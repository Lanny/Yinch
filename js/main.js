if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}


var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-3211";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_ = "default";
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__15441__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__15440 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__15440) : cljs.core.into_array.call(null, G__15440);
      }());
    };
    var G__15441 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__15442__i = 0, G__15442__a = new Array(arguments.length - 0);
        while (G__15442__i < G__15442__a.length) {
          G__15442__a[G__15442__i] = arguments[G__15442__i + 0];
          ++G__15442__i;
        }
        args = new cljs.core.IndexedSeq(G__15442__a, 0);
      }
      return G__15441__delegate.call(this, args);
    };
    G__15441.cljs$lang$maxFixedArity = 0;
    G__15441.cljs$lang$applyTo = function(arglist__15443) {
      var args = cljs.core.seq(arglist__15443);
      return G__15441__delegate(args);
    };
    G__15441.cljs$core$IFn$_invoke$arity$variadic = G__15441__delegate;
    return G__15441;
  }();
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  var G__15445 = x;
  return goog.isString(G__15445);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__15447 = x__$1;
    return goog.typeOf(G__15447);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4266__auto__ = ty;
    if (cljs.core.truth_(and__4266__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4266__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__15449 = obj;
    return goog.typeOf(G__15449);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4423__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4423__auto__)) {
    var s = temp__4423__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__15451 = Symbol;
  return goog.typeOf(G__15451);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function cljs$core$make_array() {
  var G__15453 = arguments.length;
  switch(G__15453) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__5163__auto___15455 = len;
  var i_15456 = 0;
  while (true) {
    if (i_15456 < n__5163__auto___15455) {
      new_arr[i_15456] = arr[i_15456];
      var G__15457 = i_15456 + 1;
      i_15456 = G__15457;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__15458 = i + 1;
      i = G__15458;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function cljs$core$aget() {
  var G__15463 = arguments.length;
  switch(G__15463) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__15464 = cljs.core.aget;
  var G__15465 = array[i];
  var G__15466 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__15464, G__15465, G__15466) : cljs.core.apply.call(null, G__15464, G__15465, G__15466);
};
cljs.core.aget.cljs$lang$applyTo = function(seq15459) {
  var G__15460 = cljs.core.first(seq15459);
  var seq15459__$1 = cljs.core.next(seq15459);
  var G__15461 = cljs.core.first(seq15459__$1);
  var seq15459__$2 = cljs.core.next(seq15459__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__15460, G__15461, seq15459__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset() {
  var G__15473 = arguments.length;
  switch(G__15473) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5329__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__15474 = cljs.core.aset;
  var G__15475 = array[idx];
  var G__15476 = idx2;
  var G__15477 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__15474, G__15475, G__15476, G__15477) : cljs.core.apply.call(null, G__15474, G__15475, G__15476, G__15477);
};
cljs.core.aset.cljs$lang$applyTo = function(seq15468) {
  var G__15469 = cljs.core.first(seq15468);
  var seq15468__$1 = cljs.core.next(seq15468);
  var G__15470 = cljs.core.first(seq15468__$1);
  var seq15468__$2 = cljs.core.next(seq15468__$1);
  var G__15471 = cljs.core.first(seq15468__$2);
  var seq15468__$3 = cljs.core.next(seq15468__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__15469, G__15470, G__15471, seq15468__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array() {
  var G__15480 = arguments.length;
  switch(G__15480) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__15481 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__15482 = [];
  var G__15483 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__15481, G__15482, G__15483) : cljs.core.reduce.call(null, G__15481, G__15482, G__15483);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke() {
  var argseq__5318__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5318__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq15485) {
  var G__15486 = cljs.core.first(seq15485);
  var seq15485__$1 = cljs.core.next(seq15485);
  var G__15487 = cljs.core.first(seq15485__$1);
  var seq15485__$2 = cljs.core.next(seq15485__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__15486, G__15487, seq15485__$2);
};
cljs.core.Fn = function() {
  var obj15489 = {};
  return obj15489;
}();
cljs.core.IFn = function() {
  var obj15491 = {};
  return obj15491;
}();
cljs.core._invoke = function cljs$core$_invoke() {
  var G__15493 = arguments.length;
  switch(G__15493) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15495 = x__4914__auto__;
        return goog.typeOf(G__15495);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15497 = x__4914__auto__;
        return goog.typeOf(G__15497);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15499 = x__4914__auto__;
        return goog.typeOf(G__15499);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$4;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15501 = x__4914__auto__;
        return goog.typeOf(G__15501);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$5;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15503 = x__4914__auto__;
        return goog.typeOf(G__15503);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$6;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15505 = x__4914__auto__;
        return goog.typeOf(G__15505);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$7;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15507 = x__4914__auto__;
        return goog.typeOf(G__15507);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$8;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15509 = x__4914__auto__;
        return goog.typeOf(G__15509);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$9;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15511 = x__4914__auto__;
        return goog.typeOf(G__15511);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$10;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15513 = x__4914__auto__;
        return goog.typeOf(G__15513);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$11;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15515 = x__4914__auto__;
        return goog.typeOf(G__15515);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$12;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15517 = x__4914__auto__;
        return goog.typeOf(G__15517);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$13;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15519 = x__4914__auto__;
        return goog.typeOf(G__15519);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$14;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15521 = x__4914__auto__;
        return goog.typeOf(G__15521);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$15;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15523 = x__4914__auto__;
        return goog.typeOf(G__15523);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$16;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15525 = x__4914__auto__;
        return goog.typeOf(G__15525);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$17;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15527 = x__4914__auto__;
        return goog.typeOf(G__15527);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$18;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15529 = x__4914__auto__;
        return goog.typeOf(G__15529);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$19;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15531 = x__4914__auto__;
        return goog.typeOf(G__15531);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$20;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15533 = x__4914__auto__;
        return goog.typeOf(G__15533);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$21;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15535 = x__4914__auto__;
        return goog.typeOf(G__15535);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$22;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._invoke[function() {
        var G__15537 = x__4914__auto__;
        return goog.typeOf(G__15537);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._invoke["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
  var obj15540 = {};
  return obj15540;
}();
cljs.core._clone = function cljs$core$_clone(value) {
  if (function() {
    var and__4266__auto__ = value;
    if (and__4266__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4914__auto__ = value == null ? null : value;
    return function() {
      var or__4278__auto__ = cljs.core._clone[function() {
        var G__15544 = x__4914__auto__;
        return goog.typeOf(G__15544);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._clone["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj15546 = {};
  return obj15546;
}();
cljs.core._count = function cljs$core$_count(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._count[function() {
        var G__15550 = x__4914__auto__;
        return goog.typeOf(G__15550);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._count["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj15552 = {};
  return obj15552;
}();
cljs.core._empty = function cljs$core$_empty(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._empty[function() {
        var G__15556 = x__4914__auto__;
        return goog.typeOf(G__15556);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._empty["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj15558 = {};
  return obj15558;
}();
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._conj[function() {
        var G__15562 = x__4914__auto__;
        return goog.typeOf(G__15562);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._conj["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj15564 = {};
  return obj15564;
}();
cljs.core._nth = function cljs$core$_nth() {
  var G__15566 = arguments.length;
  switch(G__15566) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IIndexed$_nth$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._nth[function() {
        var G__15568 = x__4914__auto__;
        return goog.typeOf(G__15568);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._nth["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIndexed.-nth", coll);
        }
      }
    }().call(null, coll, n);
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IIndexed$_nth$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._nth[function() {
        var G__15570 = x__4914__auto__;
        return goog.typeOf(G__15570);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._nth["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIndexed.-nth", coll);
        }
      }
    }().call(null, coll, n, not_found);
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
  var obj15573 = {};
  return obj15573;
}();
cljs.core.ISeq = function() {
  var obj15575 = {};
  return obj15575;
}();
cljs.core._first = function cljs$core$_first(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._first[function() {
        var G__15579 = x__4914__auto__;
        return goog.typeOf(G__15579);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._first["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._rest[function() {
        var G__15583 = x__4914__auto__;
        return goog.typeOf(G__15583);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._rest["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj15585 = {};
  return obj15585;
}();
cljs.core._next = function cljs$core$_next(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._next[function() {
        var G__15589 = x__4914__auto__;
        return goog.typeOf(G__15589);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._next["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj15591 = {};
  return obj15591;
}();
cljs.core._lookup = function cljs$core$_lookup() {
  var G__15593 = arguments.length;
  switch(G__15593) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$ILookup$_lookup$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._lookup[function() {
        var G__15595 = x__4914__auto__;
        return goog.typeOf(G__15595);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._lookup["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ILookup.-lookup", o);
        }
      }
    }().call(null, o, k);
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$ILookup$_lookup$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._lookup[function() {
        var G__15597 = x__4914__auto__;
        return goog.typeOf(G__15597);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._lookup["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ILookup.-lookup", o);
        }
      }
    }().call(null, o, k, not_found);
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
  var obj15600 = {};
  return obj15600;
}();
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__15604 = x__4914__auto__;
        return goog.typeOf(G__15604);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._assoc[function() {
        var G__15608 = x__4914__auto__;
        return goog.typeOf(G__15608);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._assoc["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj15610 = {};
  return obj15610;
}();
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._dissoc[function() {
        var G__15614 = x__4914__auto__;
        return goog.typeOf(G__15614);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._dissoc["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj15616 = {};
  return obj15616;
}();
cljs.core._key = function cljs$core$_key(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._key[function() {
        var G__15620 = x__4914__auto__;
        return goog.typeOf(G__15620);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._key["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._val[function() {
        var G__15624 = x__4914__auto__;
        return goog.typeOf(G__15624);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._val["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj15626 = {};
  return obj15626;
}();
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._disjoin[function() {
        var G__15630 = x__4914__auto__;
        return goog.typeOf(G__15630);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._disjoin["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj15632 = {};
  return obj15632;
}();
cljs.core._peek = function cljs$core$_peek(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._peek[function() {
        var G__15636 = x__4914__auto__;
        return goog.typeOf(G__15636);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._peek["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._pop[function() {
        var G__15640 = x__4914__auto__;
        return goog.typeOf(G__15640);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._pop["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj15642 = {};
  return obj15642;
}();
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._assoc_n[function() {
        var G__15646 = x__4914__auto__;
        return goog.typeOf(G__15646);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._assoc_n["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj15648 = {};
  return obj15648;
}();
cljs.core._deref = function cljs$core$_deref(o) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._deref[function() {
        var G__15652 = x__4914__auto__;
        return goog.typeOf(G__15652);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._deref["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj15654 = {};
  return obj15654;
}();
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._deref_with_timeout[function() {
        var G__15658 = x__4914__auto__;
        return goog.typeOf(G__15658);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj15660 = {};
  return obj15660;
}();
cljs.core._meta = function cljs$core$_meta(o) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._meta[function() {
        var G__15664 = x__4914__auto__;
        return goog.typeOf(G__15664);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._meta["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj15666 = {};
  return obj15666;
}();
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._with_meta[function() {
        var G__15670 = x__4914__auto__;
        return goog.typeOf(G__15670);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._with_meta["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj15672 = {};
  return obj15672;
}();
cljs.core._reduce = function cljs$core$_reduce() {
  var G__15674 = arguments.length;
  switch(G__15674) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IReduce$_reduce$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._reduce[function() {
        var G__15676 = x__4914__auto__;
        return goog.typeOf(G__15676);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._reduce["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReduce.-reduce", coll);
        }
      }
    }().call(null, coll, f);
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IReduce$_reduce$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._reduce[function() {
        var G__15678 = x__4914__auto__;
        return goog.typeOf(G__15678);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._reduce["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReduce.-reduce", coll);
        }
      }
    }().call(null, coll, f, start);
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
  var obj15681 = {};
  return obj15681;
}();
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._kv_reduce[function() {
        var G__15685 = x__4914__auto__;
        return goog.typeOf(G__15685);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj15687 = {};
  return obj15687;
}();
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._equiv[function() {
        var G__15691 = x__4914__auto__;
        return goog.typeOf(G__15691);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._equiv["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj15693 = {};
  return obj15693;
}();
cljs.core._hash = function cljs$core$_hash(o) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._hash[function() {
        var G__15697 = x__4914__auto__;
        return goog.typeOf(G__15697);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._hash["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj15699 = {};
  return obj15699;
}();
cljs.core._seq = function cljs$core$_seq(o) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._seq[function() {
        var G__15703 = x__4914__auto__;
        return goog.typeOf(G__15703);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._seq["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj15705 = {};
  return obj15705;
}();
cljs.core.IList = function() {
  var obj15707 = {};
  return obj15707;
}();
cljs.core.IRecord = function() {
  var obj15709 = {};
  return obj15709;
}();
cljs.core.IReversible = function() {
  var obj15711 = {};
  return obj15711;
}();
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._rseq[function() {
        var G__15715 = x__4914__auto__;
        return goog.typeOf(G__15715);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._rseq["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj15717 = {};
  return obj15717;
}();
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._sorted_seq[function() {
        var G__15721 = x__4914__auto__;
        return goog.typeOf(G__15721);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._sorted_seq_from[function() {
        var G__15725 = x__4914__auto__;
        return goog.typeOf(G__15725);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._entry_key[function() {
        var G__15729 = x__4914__auto__;
        return goog.typeOf(G__15729);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._entry_key["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._comparator[function() {
        var G__15733 = x__4914__auto__;
        return goog.typeOf(G__15733);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._comparator["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj15735 = {};
  return obj15735;
}();
cljs.core._write = function cljs$core$_write(writer, s) {
  if (function() {
    var and__4266__auto__ = writer;
    if (and__4266__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4914__auto__ = writer == null ? null : writer;
    return function() {
      var or__4278__auto__ = cljs.core._write[function() {
        var G__15739 = x__4914__auto__;
        return goog.typeOf(G__15739);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._write["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (function() {
    var and__4266__auto__ = writer;
    if (and__4266__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4914__auto__ = writer == null ? null : writer;
    return function() {
      var or__4278__auto__ = cljs.core._flush[function() {
        var G__15743 = x__4914__auto__;
        return goog.typeOf(G__15743);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._flush["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj15745 = {};
  return obj15745;
}();
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._pr_writer[function() {
        var G__15749 = x__4914__auto__;
        return goog.typeOf(G__15749);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._pr_writer["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj15751 = {};
  return obj15751;
}();
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (function() {
    var and__4266__auto__ = d;
    if (and__4266__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4914__auto__ = d == null ? null : d;
    return function() {
      var or__4278__auto__ = cljs.core._realized_QMARK_[function() {
        var G__15755 = x__4914__auto__;
        return goog.typeOf(G__15755);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj15757 = {};
  return obj15757;
}();
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._notify_watches[function() {
        var G__15761 = x__4914__auto__;
        return goog.typeOf(G__15761);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._notify_watches["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._add_watch[function() {
        var G__15765 = x__4914__auto__;
        return goog.typeOf(G__15765);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._add_watch["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core._remove_watch[function() {
        var G__15769 = x__4914__auto__;
        return goog.typeOf(G__15769);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._remove_watch["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj15771 = {};
  return obj15771;
}();
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._as_transient[function() {
        var G__15775 = x__4914__auto__;
        return goog.typeOf(G__15775);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._as_transient["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj15777 = {};
  return obj15777;
}();
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (function() {
    var and__4266__auto__ = tcoll;
    if (and__4266__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4914__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4278__auto__ = cljs.core._conj_BANG_[function() {
        var G__15781 = x__4914__auto__;
        return goog.typeOf(G__15781);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (function() {
    var and__4266__auto__ = tcoll;
    if (and__4266__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4914__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4278__auto__ = cljs.core._persistent_BANG_[function() {
        var G__15785 = x__4914__auto__;
        return goog.typeOf(G__15785);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj15787 = {};
  return obj15787;
}();
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__4266__auto__ = tcoll;
    if (and__4266__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4914__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4278__auto__ = cljs.core._assoc_BANG_[function() {
        var G__15791 = x__4914__auto__;
        return goog.typeOf(G__15791);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj15793 = {};
  return obj15793;
}();
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__4266__auto__ = tcoll;
    if (and__4266__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4914__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4278__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__15797 = x__4914__auto__;
        return goog.typeOf(G__15797);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj15799 = {};
  return obj15799;
}();
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__4266__auto__ = tcoll;
    if (and__4266__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4914__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4278__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__15803 = x__4914__auto__;
        return goog.typeOf(G__15803);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (function() {
    var and__4266__auto__ = tcoll;
    if (and__4266__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4914__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4278__auto__ = cljs.core._pop_BANG_[function() {
        var G__15807 = x__4914__auto__;
        return goog.typeOf(G__15807);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj15809 = {};
  return obj15809;
}();
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__4266__auto__ = tcoll;
    if (and__4266__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4914__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4278__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__15813 = x__4914__auto__;
        return goog.typeOf(G__15813);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj15815 = {};
  return obj15815;
}();
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (function() {
    var and__4266__auto__ = x;
    if (and__4266__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4914__auto__ = x == null ? null : x;
    return function() {
      var or__4278__auto__ = cljs.core._compare[function() {
        var G__15819 = x__4914__auto__;
        return goog.typeOf(G__15819);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._compare["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj15821 = {};
  return obj15821;
}();
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._drop_first[function() {
        var G__15825 = x__4914__auto__;
        return goog.typeOf(G__15825);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._drop_first["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj15827 = {};
  return obj15827;
}();
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._chunked_first[function() {
        var G__15831 = x__4914__auto__;
        return goog.typeOf(G__15831);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._chunked_first["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._chunked_rest[function() {
        var G__15835 = x__4914__auto__;
        return goog.typeOf(G__15835);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj15837 = {};
  return obj15837;
}();
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._chunked_next[function() {
        var G__15841 = x__4914__auto__;
        return goog.typeOf(G__15841);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._chunked_next["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj15843 = {};
  return obj15843;
}();
cljs.core._name = function cljs$core$_name(x) {
  if (function() {
    var and__4266__auto__ = x;
    if (and__4266__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4914__auto__ = x == null ? null : x;
    return function() {
      var or__4278__auto__ = cljs.core._name[function() {
        var G__15847 = x__4914__auto__;
        return goog.typeOf(G__15847);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._name["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (function() {
    var and__4266__auto__ = x;
    if (and__4266__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4914__auto__ = x == null ? null : x;
    return function() {
      var or__4278__auto__ = cljs.core._namespace[function() {
        var G__15851 = x__4914__auto__;
        return goog.typeOf(G__15851);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._namespace["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj15853 = {};
  return obj15853;
}();
cljs.core.IReset = function() {
  var obj15855 = {};
  return obj15855;
}();
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._reset_BANG_[function() {
        var G__15859 = x__4914__auto__;
        return goog.typeOf(G__15859);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj15861 = {};
  return obj15861;
}();
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_() {
  var G__15863 = arguments.length;
  switch(G__15863) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._swap_BANG_[function() {
        var G__15865 = x__4914__auto__;
        return goog.typeOf(G__15865);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._swap_BANG_[function() {
        var G__15867 = x__4914__auto__;
        return goog.typeOf(G__15867);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._swap_BANG_[function() {
        var G__15869 = x__4914__auto__;
        return goog.typeOf(G__15869);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a, b);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._swap_BANG_[function() {
        var G__15871 = x__4914__auto__;
        return goog.typeOf(G__15871);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a, b, xs);
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
  var obj15874 = {};
  return obj15874;
}();
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (function() {
    var and__4266__auto__ = o;
    if (and__4266__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4914__auto__ = o == null ? null : o;
    return function() {
      var or__4278__auto__ = cljs.core._vreset_BANG_[function() {
        var G__15878 = x__4914__auto__;
        return goog.typeOf(G__15878);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj15880 = {};
  return obj15880;
}();
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (function() {
    var and__4266__auto__ = coll;
    if (and__4266__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4914__auto__ = coll == null ? null : coll;
    return function() {
      var or__4278__auto__ = cljs.core._iterator[function() {
        var G__15884 = x__4914__auto__;
        return goog.typeOf(G__15884);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._iterator["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__15887 = 4294967295;
  var G__15888 = 5;
  return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__15887, G__15888) : Math.imul.call(null, G__15887, G__15888);
}() === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var G__15891 = a;
    var G__15892 = b;
    return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__15891, G__15892) : Math.imul.call(null, G__15891, G__15892);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__15893 = i + 2;
        var G__15894 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__15893;
        h1 = G__15894;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj15896 = {};
  return obj15896;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__15897 = i + 1;
          var G__15898 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__15897;
          hash = G__15898;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj15902 = {};
      return obj15902;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (function() {
    var G__15905 = o;
    if (G__15905) {
      var bit__4945__auto__ = G__15905.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4945__auto__ || G__15905.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__15906 = o;
        return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__15906) : Math.floor.call(null, G__15906);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4266__auto__ = cljs.core.not(a.ns);
      if (and__4266__auto__) {
        return b.ns;
      } else {
        return and__4266__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__15913 = a.ns;
            var G__15914 = b.ns;
            return goog.array.defaultCompare(G__15913, G__15914);
          }();
          if (0 === nsc) {
            var G__15915 = a.name;
            var G__15916 = b.name;
            return goog.array.defaultCompare(G__15915, G__15916);
          } else {
            return nsc;
          }
        }
      } else {
        var G__15917 = a.name;
        var G__15918 = b.name;
        return goog.array.defaultCompare(G__15917, G__15918);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__15920 = null;
  var G__15920__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__15920__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__15920 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15920__2.call(this, self__, coll);
      case 3:
        return G__15920__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15920.cljs$core$IFn$_invoke$arity$2 = G__15920__2;
  G__15920.cljs$core$IFn$_invoke$arity$3 = G__15920__3;
  return G__15920;
}();
cljs.core.Symbol.prototype.apply = function(self__, args15919) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15919)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4694__auto__ = self__._hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol() {
  var G__15922 = arguments.length;
  switch(G__15922) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.call = function() {
  var G__15969 = null;
  var G__15969__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__15969__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__15969__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__15969__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__15969__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__15969__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__15969__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__15969__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__15969__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__15969__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__15969__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__15969__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__15969__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__15969__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__15969__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__15969__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__15969__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__15969__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__15969__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__15969__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__15969__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__15969__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__15925 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__15926 = a;
    var G__15927 = b;
    var G__15928 = c;
    var G__15929 = d;
    var G__15930 = e;
    var G__15931 = f;
    var G__15932 = g;
    var G__15933 = h;
    var G__15934 = i;
    var G__15935 = j;
    var G__15936 = k;
    var G__15937 = l;
    var G__15938 = m;
    var G__15939 = n;
    var G__15940 = o;
    var G__15941 = p;
    var G__15942 = q;
    var G__15943 = r;
    var G__15944 = s;
    var G__15945 = t;
    var G__15946 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__15925, G__15926, G__15927, G__15928, G__15929, G__15930, G__15931, G__15932, G__15933, G__15934, G__15935, G__15936, G__15937, G__15938, G__15939, G__15940, G__15941, G__15942, G__15943, G__15944, G__15945, G__15946) : cljs.core.apply.call(null, G__15925, G__15926, G__15927, G__15928, G__15929, G__15930, G__15931, G__15932, G__15933, G__15934, G__15935, G__15936, G__15937, G__15938, G__15939, 
    G__15940, G__15941, G__15942, G__15943, G__15944, G__15945, G__15946);
  };
  G__15969 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__15969__1.call(this, self__);
      case 2:
        return G__15969__2.call(this, self__, a);
      case 3:
        return G__15969__3.call(this, self__, a, b);
      case 4:
        return G__15969__4.call(this, self__, a, b, c);
      case 5:
        return G__15969__5.call(this, self__, a, b, c, d);
      case 6:
        return G__15969__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__15969__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__15969__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__15969__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__15969__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__15969__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__15969__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__15969__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__15969__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__15969__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__15969__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__15969__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__15969__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__15969__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__15969__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__15969__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__15969__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15969.cljs$core$IFn$_invoke$arity$1 = G__15969__1;
  G__15969.cljs$core$IFn$_invoke$arity$2 = G__15969__2;
  G__15969.cljs$core$IFn$_invoke$arity$3 = G__15969__3;
  G__15969.cljs$core$IFn$_invoke$arity$4 = G__15969__4;
  G__15969.cljs$core$IFn$_invoke$arity$5 = G__15969__5;
  G__15969.cljs$core$IFn$_invoke$arity$6 = G__15969__6;
  G__15969.cljs$core$IFn$_invoke$arity$7 = G__15969__7;
  G__15969.cljs$core$IFn$_invoke$arity$8 = G__15969__8;
  G__15969.cljs$core$IFn$_invoke$arity$9 = G__15969__9;
  G__15969.cljs$core$IFn$_invoke$arity$10 = G__15969__10;
  G__15969.cljs$core$IFn$_invoke$arity$11 = G__15969__11;
  G__15969.cljs$core$IFn$_invoke$arity$12 = G__15969__12;
  G__15969.cljs$core$IFn$_invoke$arity$13 = G__15969__13;
  G__15969.cljs$core$IFn$_invoke$arity$14 = G__15969__14;
  G__15969.cljs$core$IFn$_invoke$arity$15 = G__15969__15;
  G__15969.cljs$core$IFn$_invoke$arity$16 = G__15969__16;
  G__15969.cljs$core$IFn$_invoke$arity$17 = G__15969__17;
  G__15969.cljs$core$IFn$_invoke$arity$18 = G__15969__18;
  G__15969.cljs$core$IFn$_invoke$arity$19 = G__15969__19;
  G__15969.cljs$core$IFn$_invoke$arity$20 = G__15969__20;
  G__15969.cljs$core$IFn$_invoke$arity$21 = G__15969__21;
  G__15969.cljs$core$IFn$_invoke$arity$22 = G__15969__22;
  return G__15969;
}();
cljs.core.Var.prototype.apply = function(self__, args15924) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15924)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__15947 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__15948 = a;
  var G__15949 = b;
  var G__15950 = c;
  var G__15951 = d;
  var G__15952 = e;
  var G__15953 = f;
  var G__15954 = g;
  var G__15955 = h;
  var G__15956 = i;
  var G__15957 = j;
  var G__15958 = k;
  var G__15959 = l;
  var G__15960 = m;
  var G__15961 = n;
  var G__15962 = o;
  var G__15963 = p;
  var G__15964 = q;
  var G__15965 = r;
  var G__15966 = s;
  var G__15967 = t;
  var G__15968 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__15947, G__15948, G__15949, G__15950, G__15951, G__15952, G__15953, G__15954, G__15955, G__15956, G__15957, G__15958, G__15959, G__15960, G__15961, G__15962, G__15963, G__15964, G__15965, G__15966, G__15967, G__15968) : cljs.core.apply.call(null, G__15947, G__15948, G__15949, G__15950, G__15951, G__15952, G__15953, G__15954, G__15955, G__15956, G__15957, G__15958, G__15959, G__15960, G__15961, 
  G__15962, G__15963, G__15964, G__15965, G__15966, G__15967, G__15968);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  var G__15971 = x;
  if (G__15971) {
    var bit__4952__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4278__auto__ = bit__4952__auto__;
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return G__15971.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__15971.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__15971);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__15971);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  var G__15973 = value;
  if (G__15973) {
    var bit__4952__auto__ = G__15973.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4952__auto__ || G__15973.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__15973.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__15973);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__15973);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15975 = coll;
      if (G__15975) {
        var bit__4945__auto__ = G__15975.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4945__auto__ || G__15975.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15977 = coll;
      if (G__15977) {
        var bit__4945__auto__ = G__15977.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4945__auto__ || G__15977.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__15979 = coll;
      if (G__15979) {
        var bit__4945__auto__ = G__15979.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4945__auto__ || G__15979.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__15981 = coll;
      if (G__15981) {
        var bit__4945__auto__ = G__15981.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4945__auto__ || G__15981.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_() {
  var G__15986 = arguments.length;
  switch(G__15986) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__15988 = y;
        var G__15989 = cljs.core.first(more);
        var G__15990 = cljs.core.next(more);
        x = G__15988;
        y = G__15989;
        more = G__15990;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq15982) {
  var G__15983 = cljs.core.first(seq15982);
  var seq15982__$1 = cljs.core.next(seq15982);
  var G__15984 = cljs.core.first(seq15982__$1);
  var seq15982__$2 = cljs.core.next(seq15982__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__15983, G__15984, seq15982__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"value":x, "done":false};
  } else {
    return{"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__15991 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__15991) : cljs.core.es6_iterator_seq.call(null, G__15991);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__15992 = n + 1;
      var G__15993 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__15994 = cljs.core.next(coll__$1);
      n = G__15992;
      hash_code = G__15993;
      coll__$1 = G__15994;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__15995 = n + 1;
      var G__15996 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__15997 = cljs.core.next(coll__$1);
      n = G__15995;
      hash_code = G__15996;
      coll__$1 = G__15997;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  var G__15998 = this$__$1.valueOf();
  var G__15999 = other.valueOf();
  return goog.array.defaultCompare(G__15998, G__15999);
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.Fn["function"] = true;
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__16000 = o;
  return goog.getUid(G__16000);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__16002 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16002) : cljs.core.deref.call(null, G__16002);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce() {
  var G__16004 = arguments.length;
  switch(G__16004) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__16005 = val;
          var G__16006 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16005, G__16006) : f.call(null, G__16005, G__16006);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__16012 = nval;
          var G__16013 = n + 1;
          val = G__16012;
          n = G__16013;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__16007 = val__$1;
        var G__16008 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16007, G__16008) : f.call(null, G__16007, G__16008);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__16014 = nval;
        var G__16015 = n + 1;
        val__$1 = G__16014;
        n = G__16015;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__16009 = val__$1;
        var G__16010 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16009, G__16010) : f.call(null, G__16009, G__16010);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__16016 = nval;
        var G__16017 = n + 1;
        val__$1 = G__16016;
        n = G__16017;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce() {
  var G__16019 = arguments.length;
  switch(G__16019) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__16020 = val;
          var G__16021 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16020, G__16021) : f.call(null, G__16020, G__16021);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__16027 = nval;
          var G__16028 = n + 1;
          val = G__16027;
          n = G__16028;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__16022 = val__$1;
        var G__16023 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16022, G__16023) : f.call(null, G__16022, G__16023);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__16029 = nval;
        var G__16030 = n + 1;
        val__$1 = G__16029;
        n = G__16030;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__16024 = val__$1;
        var G__16025 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16024, G__16025) : f.call(null, G__16024, G__16025);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__16031 = nval;
        var G__16032 = n + 1;
        val__$1 = G__16031;
        n = G__16032;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  var G__16034 = x;
  if (G__16034) {
    var bit__4952__auto__ = G__16034.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4952__auto__ || G__16034.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__16034.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__16034);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__16034);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  var G__16036 = x;
  if (G__16036) {
    var bit__4952__auto__ = G__16036.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4952__auto__ || G__16036.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__16036.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__16036);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__16036);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__16037 = coll__$1;
  var G__16038 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__16037, G__16038) : cljs.core.equiv_sequential.call(null, G__16037, G__16038);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__16039 = o;
  var G__16040 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__16039, G__16040) : cljs.core.cons.call(null, G__16039, G__16040);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq() {
  var G__16042 = arguments.length;
  switch(G__16042) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq() {
  var G__16045 = arguments.length;
  switch(G__16045) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__16047 = coll__$1;
  var G__16048 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__16047, G__16048) : cljs.core.equiv_sequential.call(null, G__16047, G__16048);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__16049 = cljs.core.List.EMPTY;
  var G__16050 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__16049, G__16050) : cljs.core.with_meta.call(null, G__16049, G__16050);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__16051 = f;
  var G__16052 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__16051, G__16052) : cljs.core.seq_reduce.call(null, G__16051, G__16052);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__16053 = f;
  var G__16054 = start;
  var G__16055 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__16053, G__16054, G__16055) : cljs.core.seq_reduce.call(null, G__16053, G__16054, G__16055);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__16056 = o;
  var G__16057 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__16056, G__16057) : cljs.core.cons.call(null, G__16056, G__16057);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__16058 = sn;
      s = G__16058;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj() {
  var G__16063 = arguments.length;
  switch(G__16063) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    return cljs.core._conj(cljs.core.List.EMPTY, x);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__16065 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__16066 = cljs.core.first(xs);
      var G__16067 = cljs.core.next(xs);
      coll = G__16065;
      x = G__16066;
      xs = G__16067;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq16059) {
  var G__16060 = cljs.core.first(seq16059);
  var seq16059__$1 = cljs.core.next(seq16059);
  var G__16061 = cljs.core.first(seq16059__$1);
  var seq16059__$2 = cljs.core.next(seq16059__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__16060, G__16061, seq16059__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__16068 = cljs.core.next(s);
      var G__16069 = acc + 1;
      s = G__16068;
      acc = G__16069;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__16071 = coll;
      if (G__16071) {
        var bit__4945__auto__ = G__16071.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4945__auto__ || G__16071.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth() {
  var G__16073 = arguments.length;
  switch(G__16073) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__16075 = cljs.core.next(coll);
            var G__16076 = n - 1;
            coll = G__16075;
            n = G__16076;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__16077 = cljs.core.next(coll);
            var G__16078 = n - 1;
            var G__16079 = not_found;
            coll = G__16077;
            n = G__16078;
            not_found = G__16079;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth() {
  var G__16081 = arguments.length;
  switch(G__16081) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (function() {
        var G__16082 = coll;
        if (G__16082) {
          var bit__4945__auto__ = G__16082.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4945__auto__ || G__16082.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (function() {
                var G__16083 = coll;
                if (G__16083) {
                  var bit__4952__auto__ = G__16083.cljs$lang$protocol_mask$partition0$ & 64;
                  if (bit__4952__auto__ || G__16083.cljs$core$ISeq$) {
                    return true;
                  } else {
                    if (!G__16083.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16083);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16083);
                }
              }()) {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (function() {
        var G__16084 = coll;
        if (G__16084) {
          var bit__4945__auto__ = G__16084.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4945__auto__ || G__16084.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (function() {
                var G__16085 = coll;
                if (G__16085) {
                  var bit__4952__auto__ = G__16085.cljs$lang$protocol_mask$partition0$ & 64;
                  if (bit__4952__auto__ || G__16085.cljs$core$ISeq$) {
                    return true;
                  } else {
                    if (!G__16085.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16085);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16085);
                }
              }()) {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__16087 = n__$1 - 1;
      var G__16088 = cljs.core.rest(xs);
      n__$1 = G__16087;
      xs = G__16088;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get() {
  var G__16090 = arguments.length;
  switch(G__16090) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (function() {
      var G__16091 = o;
      if (G__16091) {
        var bit__4945__auto__ = G__16091.cljs$lang$protocol_mask$partition0$ & 256;
        if (bit__4945__auto__ || G__16091.cljs$core$ILookup$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (function() {
      var G__16092 = o;
      if (G__16092) {
        var bit__4945__auto__ = G__16092.cljs$lang$protocol_mask$partition0$ & 256;
        if (bit__4945__auto__ || G__16092.cljs$core$ILookup$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc() {
  var G__16099 = arguments.length;
  switch(G__16099) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5329__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentHashMap.fromArrays([k], [v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__16101 = ret;
      var G__16102 = cljs.core.first(kvs);
      var G__16103 = cljs.core.second(kvs);
      var G__16104 = cljs.core.nnext(kvs);
      coll = G__16101;
      k = G__16102;
      v = G__16103;
      kvs = G__16104;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq16094) {
  var G__16095 = cljs.core.first(seq16094);
  var seq16094__$1 = cljs.core.next(seq16094);
  var G__16096 = cljs.core.first(seq16094__$1);
  var seq16094__$2 = cljs.core.next(seq16094__$1);
  var G__16097 = cljs.core.first(seq16094__$2);
  var seq16094__$3 = cljs.core.next(seq16094__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__16095, G__16096, G__16097, seq16094__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc() {
  var G__16109 = arguments.length;
  switch(G__16109) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__16111 = ret;
        var G__16112 = cljs.core.first(ks);
        var G__16113 = cljs.core.next(ks);
        coll = G__16111;
        k = G__16112;
        ks = G__16113;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq16105) {
  var G__16106 = cljs.core.first(seq16105);
  var seq16105__$1 = cljs.core.next(seq16105);
  var G__16107 = cljs.core.first(seq16105__$1);
  var seq16105__$2 = cljs.core.next(seq16105__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__16106, G__16107, seq16105__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4278__auto__ = function() {
    var G__16118 = f;
    return goog.isFunction(G__16118);
  }();
  if (cljs.core.truth_(or__4278__auto__)) {
    return or__4278__auto__;
  } else {
    var G__16119 = f;
    if (G__16119) {
      var bit__4952__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4278__auto____$1 = bit__4952__auto__;
        if (cljs.core.truth_(or__4278__auto____$1)) {
          return or__4278__auto____$1;
        } else {
          return G__16119.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__16119.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__16119);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__16119);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.call = function() {
  var G__16585 = null;
  var G__16585__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__16585__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16121 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__16121) : self__.afn.call(null, G__16121);
  };
  var G__16585__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16122 = a;
    var G__16123 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__16122, G__16123) : self__.afn.call(null, G__16122, G__16123);
  };
  var G__16585__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16124 = a;
    var G__16125 = b;
    var G__16126 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__16124, G__16125, G__16126) : self__.afn.call(null, G__16124, G__16125, G__16126);
  };
  var G__16585__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16127 = a;
    var G__16128 = b;
    var G__16129 = c;
    var G__16130 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__16127, G__16128, G__16129, G__16130) : self__.afn.call(null, G__16127, G__16128, G__16129, G__16130);
  };
  var G__16585__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16131 = a;
    var G__16132 = b;
    var G__16133 = c;
    var G__16134 = d;
    var G__16135 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__16131, G__16132, G__16133, G__16134, G__16135) : self__.afn.call(null, G__16131, G__16132, G__16133, G__16134, G__16135);
  };
  var G__16585__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16136 = a;
    var G__16137 = b;
    var G__16138 = c;
    var G__16139 = d;
    var G__16140 = e;
    var G__16141 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__16136, G__16137, G__16138, G__16139, G__16140, G__16141) : self__.afn.call(null, G__16136, G__16137, G__16138, G__16139, G__16140, G__16141);
  };
  var G__16585__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16142 = a;
    var G__16143 = b;
    var G__16144 = c;
    var G__16145 = d;
    var G__16146 = e;
    var G__16147 = f;
    var G__16148 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__16142, G__16143, G__16144, G__16145, G__16146, G__16147, G__16148) : self__.afn.call(null, G__16142, G__16143, G__16144, G__16145, G__16146, G__16147, G__16148);
  };
  var G__16585__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16149 = a;
    var G__16150 = b;
    var G__16151 = c;
    var G__16152 = d;
    var G__16153 = e;
    var G__16154 = f;
    var G__16155 = g;
    var G__16156 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__16149, G__16150, G__16151, G__16152, G__16153, G__16154, G__16155, G__16156) : self__.afn.call(null, G__16149, G__16150, G__16151, G__16152, G__16153, G__16154, G__16155, G__16156);
  };
  var G__16585__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16157 = a;
    var G__16158 = b;
    var G__16159 = c;
    var G__16160 = d;
    var G__16161 = e;
    var G__16162 = f;
    var G__16163 = g;
    var G__16164 = h;
    var G__16165 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__16157, G__16158, G__16159, G__16160, G__16161, G__16162, G__16163, G__16164, G__16165) : self__.afn.call(null, G__16157, G__16158, G__16159, G__16160, G__16161, G__16162, G__16163, G__16164, G__16165);
  };
  var G__16585__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16166 = a;
    var G__16167 = b;
    var G__16168 = c;
    var G__16169 = d;
    var G__16170 = e;
    var G__16171 = f;
    var G__16172 = g;
    var G__16173 = h;
    var G__16174 = i;
    var G__16175 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__16166, G__16167, G__16168, G__16169, G__16170, G__16171, G__16172, G__16173, G__16174, G__16175) : self__.afn.call(null, G__16166, G__16167, G__16168, G__16169, G__16170, G__16171, G__16172, G__16173, G__16174, G__16175);
  };
  var G__16585__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16176 = a;
    var G__16177 = b;
    var G__16178 = c;
    var G__16179 = d;
    var G__16180 = e;
    var G__16181 = f;
    var G__16182 = g;
    var G__16183 = h;
    var G__16184 = i;
    var G__16185 = j;
    var G__16186 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__16176, G__16177, G__16178, G__16179, G__16180, G__16181, G__16182, G__16183, G__16184, G__16185, G__16186) : self__.afn.call(null, G__16176, G__16177, G__16178, G__16179, G__16180, G__16181, G__16182, G__16183, G__16184, G__16185, G__16186);
  };
  var G__16585__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16187 = a;
    var G__16188 = b;
    var G__16189 = c;
    var G__16190 = d;
    var G__16191 = e;
    var G__16192 = f;
    var G__16193 = g;
    var G__16194 = h;
    var G__16195 = i;
    var G__16196 = j;
    var G__16197 = k;
    var G__16198 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__16187, G__16188, G__16189, G__16190, G__16191, G__16192, G__16193, G__16194, G__16195, G__16196, G__16197, G__16198) : self__.afn.call(null, G__16187, G__16188, G__16189, G__16190, G__16191, G__16192, G__16193, G__16194, G__16195, G__16196, G__16197, G__16198);
  };
  var G__16585__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16199 = a;
    var G__16200 = b;
    var G__16201 = c;
    var G__16202 = d;
    var G__16203 = e;
    var G__16204 = f;
    var G__16205 = g;
    var G__16206 = h;
    var G__16207 = i;
    var G__16208 = j;
    var G__16209 = k;
    var G__16210 = l;
    var G__16211 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__16199, G__16200, G__16201, G__16202, G__16203, G__16204, G__16205, G__16206, G__16207, G__16208, G__16209, G__16210, G__16211) : self__.afn.call(null, G__16199, G__16200, G__16201, G__16202, G__16203, G__16204, G__16205, G__16206, G__16207, G__16208, G__16209, G__16210, G__16211);
  };
  var G__16585__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16212 = a;
    var G__16213 = b;
    var G__16214 = c;
    var G__16215 = d;
    var G__16216 = e;
    var G__16217 = f;
    var G__16218 = g;
    var G__16219 = h;
    var G__16220 = i;
    var G__16221 = j;
    var G__16222 = k;
    var G__16223 = l;
    var G__16224 = m;
    var G__16225 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__16212, G__16213, G__16214, G__16215, G__16216, G__16217, G__16218, G__16219, G__16220, G__16221, G__16222, G__16223, G__16224, G__16225) : self__.afn.call(null, G__16212, G__16213, G__16214, G__16215, G__16216, G__16217, G__16218, G__16219, G__16220, G__16221, G__16222, G__16223, G__16224, G__16225);
  };
  var G__16585__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16226 = a;
    var G__16227 = b;
    var G__16228 = c;
    var G__16229 = d;
    var G__16230 = e;
    var G__16231 = f;
    var G__16232 = g;
    var G__16233 = h;
    var G__16234 = i;
    var G__16235 = j;
    var G__16236 = k;
    var G__16237 = l;
    var G__16238 = m;
    var G__16239 = n;
    var G__16240 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__16226, G__16227, G__16228, G__16229, G__16230, G__16231, G__16232, G__16233, G__16234, G__16235, G__16236, G__16237, G__16238, G__16239, G__16240) : self__.afn.call(null, G__16226, G__16227, G__16228, G__16229, G__16230, G__16231, G__16232, G__16233, G__16234, G__16235, G__16236, G__16237, G__16238, G__16239, G__16240);
  };
  var G__16585__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16241 = a;
    var G__16242 = b;
    var G__16243 = c;
    var G__16244 = d;
    var G__16245 = e;
    var G__16246 = f;
    var G__16247 = g;
    var G__16248 = h;
    var G__16249 = i;
    var G__16250 = j;
    var G__16251 = k;
    var G__16252 = l;
    var G__16253 = m;
    var G__16254 = n;
    var G__16255 = o;
    var G__16256 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__16241, G__16242, G__16243, G__16244, G__16245, G__16246, G__16247, G__16248, G__16249, G__16250, G__16251, G__16252, G__16253, G__16254, G__16255, G__16256) : self__.afn.call(null, G__16241, G__16242, G__16243, G__16244, G__16245, G__16246, G__16247, G__16248, G__16249, G__16250, G__16251, G__16252, G__16253, G__16254, G__16255, G__16256);
  };
  var G__16585__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16257 = a;
    var G__16258 = b;
    var G__16259 = c;
    var G__16260 = d;
    var G__16261 = e;
    var G__16262 = f;
    var G__16263 = g;
    var G__16264 = h;
    var G__16265 = i;
    var G__16266 = j;
    var G__16267 = k;
    var G__16268 = l;
    var G__16269 = m;
    var G__16270 = n;
    var G__16271 = o;
    var G__16272 = p;
    var G__16273 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__16257, G__16258, G__16259, G__16260, G__16261, G__16262, G__16263, G__16264, G__16265, G__16266, G__16267, G__16268, G__16269, G__16270, G__16271, G__16272, G__16273) : self__.afn.call(null, G__16257, G__16258, G__16259, G__16260, G__16261, G__16262, G__16263, G__16264, G__16265, G__16266, G__16267, G__16268, G__16269, G__16270, G__16271, G__16272, G__16273);
  };
  var G__16585__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16274 = a;
    var G__16275 = b;
    var G__16276 = c;
    var G__16277 = d;
    var G__16278 = e;
    var G__16279 = f;
    var G__16280 = g;
    var G__16281 = h;
    var G__16282 = i;
    var G__16283 = j;
    var G__16284 = k;
    var G__16285 = l;
    var G__16286 = m;
    var G__16287 = n;
    var G__16288 = o;
    var G__16289 = p;
    var G__16290 = q;
    var G__16291 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__16274, G__16275, G__16276, G__16277, G__16278, G__16279, G__16280, G__16281, G__16282, G__16283, G__16284, G__16285, G__16286, G__16287, G__16288, G__16289, G__16290, G__16291) : self__.afn.call(null, G__16274, G__16275, G__16276, G__16277, G__16278, G__16279, G__16280, G__16281, G__16282, G__16283, G__16284, G__16285, G__16286, G__16287, G__16288, G__16289, G__16290, G__16291);
  };
  var G__16585__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16292 = a;
    var G__16293 = b;
    var G__16294 = c;
    var G__16295 = d;
    var G__16296 = e;
    var G__16297 = f;
    var G__16298 = g;
    var G__16299 = h;
    var G__16300 = i;
    var G__16301 = j;
    var G__16302 = k;
    var G__16303 = l;
    var G__16304 = m;
    var G__16305 = n;
    var G__16306 = o;
    var G__16307 = p;
    var G__16308 = q;
    var G__16309 = r;
    var G__16310 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__16292, G__16293, G__16294, G__16295, G__16296, G__16297, G__16298, G__16299, G__16300, G__16301, G__16302, G__16303, G__16304, G__16305, G__16306, G__16307, G__16308, G__16309, G__16310) : self__.afn.call(null, G__16292, G__16293, G__16294, G__16295, G__16296, G__16297, G__16298, G__16299, G__16300, G__16301, G__16302, G__16303, G__16304, G__16305, G__16306, G__16307, G__16308, G__16309, G__16310);
  };
  var G__16585__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16311 = a;
    var G__16312 = b;
    var G__16313 = c;
    var G__16314 = d;
    var G__16315 = e;
    var G__16316 = f;
    var G__16317 = g;
    var G__16318 = h;
    var G__16319 = i;
    var G__16320 = j;
    var G__16321 = k;
    var G__16322 = l;
    var G__16323 = m;
    var G__16324 = n;
    var G__16325 = o;
    var G__16326 = p;
    var G__16327 = q;
    var G__16328 = r;
    var G__16329 = s;
    var G__16330 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__16311, G__16312, G__16313, G__16314, G__16315, G__16316, G__16317, G__16318, G__16319, G__16320, G__16321, G__16322, G__16323, G__16324, G__16325, G__16326, G__16327, G__16328, G__16329, G__16330) : self__.afn.call(null, G__16311, G__16312, G__16313, G__16314, G__16315, G__16316, G__16317, G__16318, G__16319, G__16320, G__16321, G__16322, G__16323, G__16324, G__16325, G__16326, G__16327, G__16328, 
    G__16329, G__16330);
  };
  var G__16585__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__16331 = self__.afn;
    var G__16332 = a;
    var G__16333 = b;
    var G__16334 = c;
    var G__16335 = d;
    var G__16336 = e;
    var G__16337 = f;
    var G__16338 = g;
    var G__16339 = h;
    var G__16340 = i;
    var G__16341 = j;
    var G__16342 = k;
    var G__16343 = l;
    var G__16344 = m;
    var G__16345 = n;
    var G__16346 = o;
    var G__16347 = p;
    var G__16348 = q;
    var G__16349 = r;
    var G__16350 = s;
    var G__16351 = t;
    var G__16352 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__16331, G__16332, G__16333, G__16334, G__16335, G__16336, G__16337, G__16338, G__16339, G__16340, G__16341, G__16342, G__16343, G__16344, G__16345, G__16346, G__16347, G__16348, G__16349, G__16350, G__16351, G__16352) : cljs.core.apply.call(null, G__16331, G__16332, G__16333, G__16334, G__16335, G__16336, G__16337, G__16338, G__16339, G__16340, G__16341, G__16342, G__16343, G__16344, G__16345, 
    G__16346, G__16347, G__16348, G__16349, G__16350, G__16351, G__16352);
  };
  G__16585 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__16585__1.call(this, self__);
      case 2:
        return G__16585__2.call(this, self__, a);
      case 3:
        return G__16585__3.call(this, self__, a, b);
      case 4:
        return G__16585__4.call(this, self__, a, b, c);
      case 5:
        return G__16585__5.call(this, self__, a, b, c, d);
      case 6:
        return G__16585__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__16585__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__16585__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__16585__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__16585__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__16585__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__16585__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__16585__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__16585__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__16585__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__16585__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__16585__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__16585__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__16585__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__16585__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__16585__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__16585__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16585.cljs$core$IFn$_invoke$arity$1 = G__16585__1;
  G__16585.cljs$core$IFn$_invoke$arity$2 = G__16585__2;
  G__16585.cljs$core$IFn$_invoke$arity$3 = G__16585__3;
  G__16585.cljs$core$IFn$_invoke$arity$4 = G__16585__4;
  G__16585.cljs$core$IFn$_invoke$arity$5 = G__16585__5;
  G__16585.cljs$core$IFn$_invoke$arity$6 = G__16585__6;
  G__16585.cljs$core$IFn$_invoke$arity$7 = G__16585__7;
  G__16585.cljs$core$IFn$_invoke$arity$8 = G__16585__8;
  G__16585.cljs$core$IFn$_invoke$arity$9 = G__16585__9;
  G__16585.cljs$core$IFn$_invoke$arity$10 = G__16585__10;
  G__16585.cljs$core$IFn$_invoke$arity$11 = G__16585__11;
  G__16585.cljs$core$IFn$_invoke$arity$12 = G__16585__12;
  G__16585.cljs$core$IFn$_invoke$arity$13 = G__16585__13;
  G__16585.cljs$core$IFn$_invoke$arity$14 = G__16585__14;
  G__16585.cljs$core$IFn$_invoke$arity$15 = G__16585__15;
  G__16585.cljs$core$IFn$_invoke$arity$16 = G__16585__16;
  G__16585.cljs$core$IFn$_invoke$arity$17 = G__16585__17;
  G__16585.cljs$core$IFn$_invoke$arity$18 = G__16585__18;
  G__16585.cljs$core$IFn$_invoke$arity$19 = G__16585__19;
  G__16585.cljs$core$IFn$_invoke$arity$20 = G__16585__20;
  G__16585.cljs$core$IFn$_invoke$arity$21 = G__16585__21;
  G__16585.cljs$core$IFn$_invoke$arity$22 = G__16585__22;
  return G__16585;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args16120) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16120)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__16353 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__16353) : self__.afn.call(null, G__16353);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__16354 = a;
  var G__16355 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__16354, G__16355) : self__.afn.call(null, G__16354, G__16355);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__16356 = a;
  var G__16357 = b;
  var G__16358 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__16356, G__16357, G__16358) : self__.afn.call(null, G__16356, G__16357, G__16358);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__16359 = a;
  var G__16360 = b;
  var G__16361 = c;
  var G__16362 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__16359, G__16360, G__16361, G__16362) : self__.afn.call(null, G__16359, G__16360, G__16361, G__16362);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__16363 = a;
  var G__16364 = b;
  var G__16365 = c;
  var G__16366 = d;
  var G__16367 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__16363, G__16364, G__16365, G__16366, G__16367) : self__.afn.call(null, G__16363, G__16364, G__16365, G__16366, G__16367);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__16368 = a;
  var G__16369 = b;
  var G__16370 = c;
  var G__16371 = d;
  var G__16372 = e;
  var G__16373 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__16368, G__16369, G__16370, G__16371, G__16372, G__16373) : self__.afn.call(null, G__16368, G__16369, G__16370, G__16371, G__16372, G__16373);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__16374 = a;
  var G__16375 = b;
  var G__16376 = c;
  var G__16377 = d;
  var G__16378 = e;
  var G__16379 = f;
  var G__16380 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__16374, G__16375, G__16376, G__16377, G__16378, G__16379, G__16380) : self__.afn.call(null, G__16374, G__16375, G__16376, G__16377, G__16378, G__16379, G__16380);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__16381 = a;
  var G__16382 = b;
  var G__16383 = c;
  var G__16384 = d;
  var G__16385 = e;
  var G__16386 = f;
  var G__16387 = g;
  var G__16388 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__16381, G__16382, G__16383, G__16384, G__16385, G__16386, G__16387, G__16388) : self__.afn.call(null, G__16381, G__16382, G__16383, G__16384, G__16385, G__16386, G__16387, G__16388);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__16389 = a;
  var G__16390 = b;
  var G__16391 = c;
  var G__16392 = d;
  var G__16393 = e;
  var G__16394 = f;
  var G__16395 = g;
  var G__16396 = h;
  var G__16397 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__16389, G__16390, G__16391, G__16392, G__16393, G__16394, G__16395, G__16396, G__16397) : self__.afn.call(null, G__16389, G__16390, G__16391, G__16392, G__16393, G__16394, G__16395, G__16396, G__16397);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__16398 = a;
  var G__16399 = b;
  var G__16400 = c;
  var G__16401 = d;
  var G__16402 = e;
  var G__16403 = f;
  var G__16404 = g;
  var G__16405 = h;
  var G__16406 = i;
  var G__16407 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__16398, G__16399, G__16400, G__16401, G__16402, G__16403, G__16404, G__16405, G__16406, G__16407) : self__.afn.call(null, G__16398, G__16399, G__16400, G__16401, G__16402, G__16403, G__16404, G__16405, G__16406, G__16407);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__16408 = a;
  var G__16409 = b;
  var G__16410 = c;
  var G__16411 = d;
  var G__16412 = e;
  var G__16413 = f;
  var G__16414 = g;
  var G__16415 = h;
  var G__16416 = i;
  var G__16417 = j;
  var G__16418 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__16408, G__16409, G__16410, G__16411, G__16412, G__16413, G__16414, G__16415, G__16416, G__16417, G__16418) : self__.afn.call(null, G__16408, G__16409, G__16410, G__16411, G__16412, G__16413, G__16414, G__16415, G__16416, G__16417, G__16418);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__16419 = a;
  var G__16420 = b;
  var G__16421 = c;
  var G__16422 = d;
  var G__16423 = e;
  var G__16424 = f;
  var G__16425 = g;
  var G__16426 = h;
  var G__16427 = i;
  var G__16428 = j;
  var G__16429 = k;
  var G__16430 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__16419, G__16420, G__16421, G__16422, G__16423, G__16424, G__16425, G__16426, G__16427, G__16428, G__16429, G__16430) : self__.afn.call(null, G__16419, G__16420, G__16421, G__16422, G__16423, G__16424, G__16425, G__16426, G__16427, G__16428, G__16429, G__16430);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__16431 = a;
  var G__16432 = b;
  var G__16433 = c;
  var G__16434 = d;
  var G__16435 = e;
  var G__16436 = f;
  var G__16437 = g;
  var G__16438 = h;
  var G__16439 = i;
  var G__16440 = j;
  var G__16441 = k;
  var G__16442 = l;
  var G__16443 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__16431, G__16432, G__16433, G__16434, G__16435, G__16436, G__16437, G__16438, G__16439, G__16440, G__16441, G__16442, G__16443) : self__.afn.call(null, G__16431, G__16432, G__16433, G__16434, G__16435, G__16436, G__16437, G__16438, G__16439, G__16440, G__16441, G__16442, G__16443);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__16444 = a;
  var G__16445 = b;
  var G__16446 = c;
  var G__16447 = d;
  var G__16448 = e;
  var G__16449 = f;
  var G__16450 = g;
  var G__16451 = h;
  var G__16452 = i;
  var G__16453 = j;
  var G__16454 = k;
  var G__16455 = l;
  var G__16456 = m;
  var G__16457 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__16444, G__16445, G__16446, G__16447, G__16448, G__16449, G__16450, G__16451, G__16452, G__16453, G__16454, G__16455, G__16456, G__16457) : self__.afn.call(null, G__16444, G__16445, G__16446, G__16447, G__16448, G__16449, G__16450, G__16451, G__16452, G__16453, G__16454, G__16455, G__16456, G__16457);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__16458 = a;
  var G__16459 = b;
  var G__16460 = c;
  var G__16461 = d;
  var G__16462 = e;
  var G__16463 = f;
  var G__16464 = g;
  var G__16465 = h;
  var G__16466 = i;
  var G__16467 = j;
  var G__16468 = k;
  var G__16469 = l;
  var G__16470 = m;
  var G__16471 = n;
  var G__16472 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__16458, G__16459, G__16460, G__16461, G__16462, G__16463, G__16464, G__16465, G__16466, G__16467, G__16468, G__16469, G__16470, G__16471, G__16472) : self__.afn.call(null, G__16458, G__16459, G__16460, G__16461, G__16462, G__16463, G__16464, G__16465, G__16466, G__16467, G__16468, G__16469, G__16470, G__16471, G__16472);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__16473 = a;
  var G__16474 = b;
  var G__16475 = c;
  var G__16476 = d;
  var G__16477 = e;
  var G__16478 = f;
  var G__16479 = g;
  var G__16480 = h;
  var G__16481 = i;
  var G__16482 = j;
  var G__16483 = k;
  var G__16484 = l;
  var G__16485 = m;
  var G__16486 = n;
  var G__16487 = o;
  var G__16488 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__16473, G__16474, G__16475, G__16476, G__16477, G__16478, G__16479, G__16480, G__16481, G__16482, G__16483, G__16484, G__16485, G__16486, G__16487, G__16488) : self__.afn.call(null, G__16473, G__16474, G__16475, G__16476, G__16477, G__16478, G__16479, G__16480, G__16481, G__16482, G__16483, G__16484, G__16485, G__16486, G__16487, G__16488);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__16489 = a;
  var G__16490 = b;
  var G__16491 = c;
  var G__16492 = d;
  var G__16493 = e;
  var G__16494 = f;
  var G__16495 = g;
  var G__16496 = h;
  var G__16497 = i;
  var G__16498 = j;
  var G__16499 = k;
  var G__16500 = l;
  var G__16501 = m;
  var G__16502 = n;
  var G__16503 = o;
  var G__16504 = p;
  var G__16505 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__16489, G__16490, G__16491, G__16492, G__16493, G__16494, G__16495, G__16496, G__16497, G__16498, G__16499, G__16500, G__16501, G__16502, G__16503, G__16504, G__16505) : self__.afn.call(null, G__16489, G__16490, G__16491, G__16492, G__16493, G__16494, G__16495, G__16496, G__16497, G__16498, G__16499, G__16500, G__16501, G__16502, G__16503, G__16504, G__16505);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__16506 = a;
  var G__16507 = b;
  var G__16508 = c;
  var G__16509 = d;
  var G__16510 = e;
  var G__16511 = f;
  var G__16512 = g;
  var G__16513 = h;
  var G__16514 = i;
  var G__16515 = j;
  var G__16516 = k;
  var G__16517 = l;
  var G__16518 = m;
  var G__16519 = n;
  var G__16520 = o;
  var G__16521 = p;
  var G__16522 = q;
  var G__16523 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__16506, G__16507, G__16508, G__16509, G__16510, G__16511, G__16512, G__16513, G__16514, G__16515, G__16516, G__16517, G__16518, G__16519, G__16520, G__16521, G__16522, G__16523) : self__.afn.call(null, G__16506, G__16507, G__16508, G__16509, G__16510, G__16511, G__16512, G__16513, G__16514, G__16515, G__16516, G__16517, G__16518, G__16519, G__16520, G__16521, G__16522, G__16523);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__16524 = a;
  var G__16525 = b;
  var G__16526 = c;
  var G__16527 = d;
  var G__16528 = e;
  var G__16529 = f;
  var G__16530 = g;
  var G__16531 = h;
  var G__16532 = i;
  var G__16533 = j;
  var G__16534 = k;
  var G__16535 = l;
  var G__16536 = m;
  var G__16537 = n;
  var G__16538 = o;
  var G__16539 = p;
  var G__16540 = q;
  var G__16541 = r;
  var G__16542 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__16524, G__16525, G__16526, G__16527, G__16528, G__16529, G__16530, G__16531, G__16532, G__16533, G__16534, G__16535, G__16536, G__16537, G__16538, G__16539, G__16540, G__16541, G__16542) : self__.afn.call(null, G__16524, G__16525, G__16526, G__16527, G__16528, G__16529, G__16530, G__16531, G__16532, G__16533, G__16534, G__16535, G__16536, G__16537, G__16538, G__16539, G__16540, G__16541, G__16542);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__16543 = a;
  var G__16544 = b;
  var G__16545 = c;
  var G__16546 = d;
  var G__16547 = e;
  var G__16548 = f;
  var G__16549 = g;
  var G__16550 = h;
  var G__16551 = i;
  var G__16552 = j;
  var G__16553 = k;
  var G__16554 = l;
  var G__16555 = m;
  var G__16556 = n;
  var G__16557 = o;
  var G__16558 = p;
  var G__16559 = q;
  var G__16560 = r;
  var G__16561 = s;
  var G__16562 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__16543, G__16544, G__16545, G__16546, G__16547, G__16548, G__16549, G__16550, G__16551, G__16552, G__16553, G__16554, G__16555, G__16556, G__16557, G__16558, G__16559, G__16560, G__16561, G__16562) : self__.afn.call(null, G__16543, G__16544, G__16545, G__16546, G__16547, G__16548, G__16549, G__16550, G__16551, G__16552, G__16553, G__16554, G__16555, G__16556, G__16557, G__16558, G__16559, G__16560, G__16561, 
  G__16562);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__16563 = self__.afn;
  var G__16564 = a;
  var G__16565 = b;
  var G__16566 = c;
  var G__16567 = d;
  var G__16568 = e;
  var G__16569 = f;
  var G__16570 = g;
  var G__16571 = h;
  var G__16572 = i;
  var G__16573 = j;
  var G__16574 = k;
  var G__16575 = l;
  var G__16576 = m;
  var G__16577 = n;
  var G__16578 = o;
  var G__16579 = p;
  var G__16580 = q;
  var G__16581 = r;
  var G__16582 = s;
  var G__16583 = t;
  var G__16584 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__16563, G__16564, G__16565, G__16566, G__16567, G__16568, G__16569, G__16570, G__16571, G__16572, G__16573, G__16574, G__16575, G__16576, G__16577, G__16578, G__16579, G__16580, G__16581, G__16582, G__16583, G__16584) : cljs.core.apply.call(null, G__16563, G__16564, G__16565, G__16566, G__16567, G__16568, G__16569, G__16570, G__16571, G__16572, G__16573, G__16574, G__16575, G__16576, G__16577, 
  G__16578, G__16579, G__16580, G__16581, G__16582, G__16583, G__16584);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__16589 = o;
    if (G__16589) {
      var bit__4952__auto__ = G__16589.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4952__auto__ || G__16589.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__16589.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__16589);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__16589);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__4266__auto__ = !(o == null);
    if (and__4266__auto__) {
      var G__16593 = o;
      if (G__16593) {
        var bit__4952__auto__ = G__16593.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4952__auto__ || G__16593.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__16593.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__16593);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__16593);
      }
    } else {
      return and__4266__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj() {
  var G__16598 = arguments.length;
  switch(G__16598) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__16600 = ret;
        var G__16601 = cljs.core.first(ks);
        var G__16602 = cljs.core.next(ks);
        coll = G__16600;
        k = G__16601;
        ks = G__16602;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq16594) {
  var G__16595 = cljs.core.first(seq16594);
  var seq16594__$1 = cljs.core.next(seq16594);
  var G__16596 = cljs.core.first(seq16594__$1);
  var seq16594__$2 = cljs.core.next(seq16594__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__16595, G__16596, seq16594__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16604 = x;
    if (G__16604) {
      var bit__4952__auto__ = G__16604.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4952__auto__ || G__16604.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__16604.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__16604);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__16604);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16606 = x;
    if (G__16606) {
      var bit__4952__auto__ = G__16606.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4952__auto__ || G__16606.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__16606.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__16606);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__16606);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  var G__16608 = x;
  if (G__16608) {
    var bit__4952__auto__ = G__16608.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4952__auto__ || G__16608.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__16608.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__16608);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__16608);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  var G__16610 = x;
  if (G__16610) {
    var bit__4952__auto__ = G__16610.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4952__auto__ || G__16610.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__16610.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__16610);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__16610);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  var G__16612 = x;
  if (G__16612) {
    var bit__4952__auto__ = G__16612.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4952__auto__ || G__16612.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__16612.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__16612);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__16612);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  var G__16614 = x;
  if (G__16614) {
    var bit__4952__auto__ = G__16614.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4952__auto__ || G__16614.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__16614.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__16614);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__16614);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16616 = x;
    if (G__16616) {
      var bit__4952__auto__ = G__16616.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4952__auto__ || G__16616.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__16616.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__16616);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__16616);
    }
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  var G__16618 = x;
  if (G__16618) {
    var bit__4952__auto__ = G__16618.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4952__auto__ || G__16618.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__16618.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__16618);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__16618);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  var G__16620 = x;
  if (G__16620) {
    var bit__4945__auto__ = G__16620.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4945__auto__ || G__16620.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj() {
  var G__16623 = arguments.length;
  switch(G__16623) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__5329__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  var obj16625 = {};
  return obj16625;
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var G__16626 = goog.object.create;
  var G__16627 = keyvals;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__16626, G__16627) : cljs.core.apply.call(null, G__16626, G__16627);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq16621) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq16621));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__16631_16633 = obj;
  var G__16632_16634 = function(G__16631_16633, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__16631_16633, keys);
  goog.object.forEach(G__16631_16633, G__16632_16634);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16635 = i__$1 + 1;
      var G__16636 = j__$1 + 1;
      var G__16637 = len__$1 - 1;
      i__$1 = G__16635;
      j__$1 = G__16636;
      len__$1 = G__16637;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16638 = i__$1 - 1;
      var G__16639 = j__$1 - 1;
      var G__16640 = len__$1 - 1;
      i__$1 = G__16638;
      j__$1 = G__16639;
      len__$1 = G__16640;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj16642 = {};
  return obj16642;
}();
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__16644 = s;
    if (G__16644) {
      var bit__4952__auto__ = G__16644.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4952__auto__ || G__16644.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__16644.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16644);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__16644);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  var G__16646 = s;
  if (G__16646) {
    var bit__4952__auto__ = G__16646.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4952__auto__ || G__16646.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__16646.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__16646);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__16646);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4278__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4278__auto__) {
    return or__4278__auto__;
  } else {
    var G__16650 = f;
    if (G__16650) {
      var bit__4952__auto__ = G__16650.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4952__auto__ || G__16650.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__16650.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__16650);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__16650);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__16663 = n;
    return isNaN(G__16663);
  }()) && !(n === Infinity) && function() {
    var G__16664 = n;
    return parseFloat(G__16664);
  }() === function() {
    var G__16665 = n;
    var G__16666 = 10;
    return parseInt(G__16665, G__16666);
  }();
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_() {
  var G__16671 = arguments.length;
  switch(G__16671) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__16673 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__16674 = etc;
          s = G__16673;
          xs = G__16674;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq16667) {
  var G__16668 = cljs.core.first(seq16667);
  var seq16667__$1 = cljs.core.next(seq16667);
  var G__16669 = cljs.core.first(seq16667__$1);
  var seq16667__$2 = cljs.core.next(seq16667__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__16668, G__16669, seq16667__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__16678 = x;
            if (G__16678) {
              var bit__4945__auto__ = G__16678.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4945__auto__ || G__16678.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__16679 = x;
            var G__16680 = y;
            return goog.array.defaultCompare(G__16679, G__16680);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed() {
  var G__16682 = arguments.length;
  switch(G__16682) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return-1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__16684 = xs;
      var G__16685 = ys;
      var G__16686 = len;
      var G__16687 = n + 1;
      xs = G__16684;
      ys = G__16685;
      len = G__16686;
      n = G__16687;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__16692 = x;
        var G__16693 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16692, G__16693) : f.call(null, G__16692, G__16693);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(function() {
            var G__16694 = y;
            var G__16695 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16694, G__16695) : f.call(null, G__16694, G__16695);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort() {
  var G__16697 = arguments.length;
  switch(G__16697) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = function() {
      var G__16698 = coll;
      return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__16698) : cljs.core.to_array.call(null, G__16698);
    }();
    var G__16699_16702 = a;
    var G__16700_16703 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__16699_16702, G__16700_16703);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by() {
  var G__16705 = arguments.length;
  switch(G__16705) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, function() {
      var G__16706 = x;
      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__16706) : keyfn.call(null, G__16706);
    }(), function() {
      var G__16707 = y;
      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__16707) : keyfn.call(null, G__16707);
    }());
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce() {
  var G__16710 = arguments.length;
  switch(G__16710) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4423__auto__ = cljs.core.seq(coll);
  if (temp__4423__auto__) {
    var s = temp__4423__auto__;
    var G__16711 = f;
    var G__16712 = cljs.core.first(s);
    var G__16713 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__16711, G__16712, G__16713) : cljs.core.reduce.call(null, G__16711, G__16712, G__16713);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__16714 = val__$1;
        var G__16715 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16714, G__16715) : f.call(null, G__16714, G__16715);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__16717 = nval;
        var G__16718 = cljs.core.next(coll__$1);
        val__$1 = G__16717;
        coll__$1 = G__16718;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = function() {
    var G__16722 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__16722) : cljs.core.to_array.call(null, G__16722);
  }();
  var G__16723_16725 = a;
  goog.array.shuffle(G__16723_16725);
  var G__16724 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__16724) : cljs.core.vec.call(null, G__16724);
};
cljs.core.reduce = function cljs$core$reduce() {
  var G__16727 = arguments.length;
  switch(G__16727) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (function() {
    var G__16728 = coll;
    if (G__16728) {
      var bit__4945__auto__ = G__16728.cljs$lang$protocol_mask$partition0$ & 524288;
      if (bit__4945__auto__ || G__16728.cljs$core$IReduce$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (function() {
    var G__16729 = coll;
    if (G__16729) {
      var bit__4945__auto__ = G__16729.cljs$lang$protocol_mask$partition0$ & 524288;
      if (bit__4945__auto__ || G__16729.cljs$core$IReduce$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing() {
  var G__16732 = arguments.length;
  switch(G__16732) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__16737 = null;
    var G__16737__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__16737__1 = function(x) {
      var G__16733 = x;
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__16733) : cf.call(null, G__16733);
    };
    var G__16737__2 = function(x, y) {
      var G__16734 = x;
      var G__16735 = y;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16734, G__16735) : f.call(null, G__16734, G__16735);
    };
    G__16737 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__16737__0.call(this);
        case 1:
          return G__16737__1.call(this, x);
        case 2:
          return G__16737__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16737.cljs$core$IFn$_invoke$arity$0 = G__16737__0;
    G__16737.cljs$core$IFn$_invoke$arity$1 = G__16737__1;
    G__16737.cljs$core$IFn$_invoke$arity$2 = G__16737__2;
    return G__16737;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce() {
  var G__16739 = arguments.length;
  switch(G__16739) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }(), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = function() {
    var G__16740 = f;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__16740) : xform.call(null, G__16740);
  }();
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  var G__16741 = ret;
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__16741) : f__$1.call(null, G__16741);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_() {
  var G__16747 = arguments.length;
  switch(G__16747) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq16743) {
  var G__16744 = cljs.core.first(seq16743);
  var seq16743__$1 = cljs.core.next(seq16743);
  var G__16745 = cljs.core.first(seq16743__$1);
  var seq16743__$2 = cljs.core.next(seq16743__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__16744, G__16745, seq16743__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_() {
  var G__16753 = arguments.length;
  switch(G__16753) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return-x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq16749) {
  var G__16750 = cljs.core.first(seq16749);
  var seq16749__$1 = cljs.core.next(seq16749);
  var G__16751 = cljs.core.first(seq16749__$1);
  var seq16749__$2 = cljs.core.next(seq16749__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__16750, G__16751, seq16749__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_() {
  var G__16759 = arguments.length;
  switch(G__16759) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq16755) {
  var G__16756 = cljs.core.first(seq16755);
  var seq16755__$1 = cljs.core.next(seq16755);
  var G__16757 = cljs.core.first(seq16755__$1);
  var seq16755__$2 = cljs.core.next(seq16755__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__16756, G__16757, seq16755__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_() {
  var G__16765 = arguments.length;
  switch(G__16765) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq16761) {
  var G__16762 = cljs.core.first(seq16761);
  var seq16761__$1 = cljs.core.next(seq16761);
  var G__16763 = cljs.core.first(seq16761__$1);
  var seq16761__$2 = cljs.core.next(seq16761__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__16762, G__16763, seq16761__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_() {
  var G__16771 = arguments.length;
  switch(G__16771) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__16773 = y;
        var G__16774 = cljs.core.first(more);
        var G__16775 = cljs.core.next(more);
        x = G__16773;
        y = G__16774;
        more = G__16775;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq16767) {
  var G__16768 = cljs.core.first(seq16767);
  var seq16767__$1 = cljs.core.next(seq16767);
  var G__16769 = cljs.core.first(seq16767__$1);
  var seq16767__$2 = cljs.core.next(seq16767__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__16768, G__16769, seq16767__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_() {
  var G__16780 = arguments.length;
  switch(G__16780) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__16782 = y;
        var G__16783 = cljs.core.first(more);
        var G__16784 = cljs.core.next(more);
        x = G__16782;
        y = G__16783;
        more = G__16784;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq16776) {
  var G__16777 = cljs.core.first(seq16776);
  var seq16776__$1 = cljs.core.next(seq16776);
  var G__16778 = cljs.core.first(seq16776__$1);
  var seq16776__$2 = cljs.core.next(seq16776__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__16777, G__16778, seq16776__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_() {
  var G__16789 = arguments.length;
  switch(G__16789) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__16791 = y;
        var G__16792 = cljs.core.first(more);
        var G__16793 = cljs.core.next(more);
        x = G__16791;
        y = G__16792;
        more = G__16793;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq16785) {
  var G__16786 = cljs.core.first(seq16785);
  var seq16785__$1 = cljs.core.next(seq16785);
  var G__16787 = cljs.core.first(seq16785__$1);
  var seq16785__$2 = cljs.core.next(seq16785__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__16786, G__16787, seq16785__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_() {
  var G__16798 = arguments.length;
  switch(G__16798) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__16800 = y;
        var G__16801 = cljs.core.first(more);
        var G__16802 = cljs.core.next(more);
        x = G__16800;
        y = G__16801;
        more = G__16802;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq16794) {
  var G__16795 = cljs.core.first(seq16794);
  var seq16794__$1 = cljs.core.next(seq16794);
  var G__16796 = cljs.core.first(seq16794__$1);
  var seq16794__$2 = cljs.core.next(seq16794__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__16795, G__16796, seq16794__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max() {
  var G__16807 = arguments.length;
  switch(G__16807) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4590__auto__ = x;
  var y__4591__auto__ = y;
  return x__4590__auto__ > y__4591__auto__ ? x__4590__auto__ : y__4591__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__4590__auto__ = x;
    var y__4591__auto__ = y;
    return x__4590__auto__ > y__4591__auto__ ? x__4590__auto__ : y__4591__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq16803) {
  var G__16804 = cljs.core.first(seq16803);
  var seq16803__$1 = cljs.core.next(seq16803);
  var G__16805 = cljs.core.first(seq16803__$1);
  var seq16803__$2 = cljs.core.next(seq16803__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__16804, G__16805, seq16803__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min() {
  var G__16813 = arguments.length;
  switch(G__16813) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4597__auto__ = x;
  var y__4598__auto__ = y;
  return x__4597__auto__ < y__4598__auto__ ? x__4597__auto__ : y__4598__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__4597__auto__ = x;
    var y__4598__auto__ = y;
    return x__4597__auto__ < y__4598__auto__ ? x__4597__auto__ : y__4598__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq16809) {
  var G__16810 = cljs.core.first(seq16809);
  var seq16809__$1 = cljs.core.next(seq16809);
  var G__16811 = cljs.core.first(seq16809__$1);
  var seq16809__$2 = cljs.core.next(seq16809__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__16810, G__16811, seq16809__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add() {
  var G__16819 = arguments.length;
  switch(G__16819) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq16815) {
  var G__16816 = cljs.core.first(seq16815);
  var seq16815__$1 = cljs.core.next(seq16815);
  var G__16817 = cljs.core.first(seq16815__$1);
  var seq16815__$2 = cljs.core.next(seq16815__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__16816, G__16817, seq16815__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int() {
  var G__16825 = arguments.length;
  switch(G__16825) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq16821) {
  var G__16822 = cljs.core.first(seq16821);
  var seq16821__$1 = cljs.core.next(seq16821);
  var G__16823 = cljs.core.first(seq16821__$1);
  var seq16821__$2 = cljs.core.next(seq16821__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__16822, G__16823, seq16821__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int() {
  var G__16831 = arguments.length;
  switch(G__16831) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq16827) {
  var G__16828 = cljs.core.first(seq16827);
  var seq16827__$1 = cljs.core.next(seq16827);
  var G__16829 = cljs.core.first(seq16827__$1);
  var seq16827__$2 = cljs.core.next(seq16827__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__16828, G__16829, seq16827__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply() {
  var G__16837 = arguments.length;
  switch(G__16837) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq16833) {
  var G__16834 = cljs.core.first(seq16833);
  var seq16833__$1 = cljs.core.next(seq16833);
  var G__16835 = cljs.core.first(seq16833__$1);
  var seq16833__$2 = cljs.core.next(seq16833__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__16834, G__16835, seq16833__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int() {
  var G__16843 = arguments.length;
  switch(G__16843) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq16839) {
  var G__16840 = cljs.core.first(seq16839);
  var seq16839__$1 = cljs.core.next(seq16839);
  var G__16841 = cljs.core.first(seq16839__$1);
  var seq16839__$2 = cljs.core.next(seq16839__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__16840, G__16841, seq16839__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  var G__16847 = x;
  var G__16848 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__16847, G__16848) : cljs.core.mod.call(null, G__16847, G__16848);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract() {
  var G__16853 = arguments.length;
  switch(G__16853) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return-x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq16849) {
  var G__16850 = cljs.core.first(seq16849);
  var seq16849__$1 = cljs.core.next(seq16849);
  var G__16851 = cljs.core.first(seq16849__$1);
  var seq16849__$2 = cljs.core.next(seq16849__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__16850, G__16851, seq16849__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int() {
  var G__16859 = arguments.length;
  switch(G__16859) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return-x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq16855) {
  var G__16856 = cljs.core.first(seq16855);
  var seq16855__$1 = cljs.core.next(seq16855);
  var G__16857 = cljs.core.first(seq16855__$1);
  var seq16855__$2 = cljs.core.next(seq16855__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__16856, G__16857, seq16855__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    var G__16863 = q;
    return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__16863) : Math.floor.call(null, G__16863);
  } else {
    var G__16864 = q;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__16864) : Math.ceil.call(null, G__16864);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor() {
  var G__16869 = arguments.length;
  switch(G__16869) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq16865) {
  var G__16866 = cljs.core.first(seq16865);
  var seq16865__$1 = cljs.core.next(seq16865);
  var G__16867 = cljs.core.first(seq16865__$1);
  var seq16865__$2 = cljs.core.next(seq16865__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__16866, G__16867, seq16865__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and() {
  var G__16875 = arguments.length;
  switch(G__16875) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq16871) {
  var G__16872 = cljs.core.first(seq16871);
  var seq16871__$1 = cljs.core.next(seq16871);
  var G__16873 = cljs.core.first(seq16871__$1);
  var seq16871__$2 = cljs.core.next(seq16871__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__16872, G__16873, seq16871__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or() {
  var G__16881 = arguments.length;
  switch(G__16881) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq16877) {
  var G__16878 = cljs.core.first(seq16877);
  var seq16877__$1 = cljs.core.next(seq16877);
  var G__16879 = cljs.core.first(seq16877__$1);
  var seq16877__$2 = cljs.core.next(seq16877__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__16878, G__16879, seq16877__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not() {
  var G__16887 = arguments.length;
  switch(G__16887) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq16883) {
  var G__16884 = cljs.core.first(seq16883);
  var seq16883__$1 = cljs.core.next(seq16883);
  var G__16885 = cljs.core.first(seq16883__$1);
  var seq16883__$2 = cljs.core.next(seq16883__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__16884, G__16885, seq16883__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_() {
  var G__16893 = arguments.length;
  switch(G__16893) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__16895 = y;
        var G__16896 = cljs.core.first(more);
        var G__16897 = cljs.core.next(more);
        x = G__16895;
        y = G__16896;
        more = G__16897;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq16889) {
  var G__16890 = cljs.core.first(seq16889);
  var seq16889__$1 = cljs.core.next(seq16889);
  var G__16891 = cljs.core.first(seq16889__$1);
  var seq16889__$2 = cljs.core.next(seq16889__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__16890, G__16891, seq16889__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__16898 = n__$1 - 1;
      var G__16899 = cljs.core.next(xs);
      n__$1 = G__16898;
      xs = G__16899;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str() {
  var G__16903 = arguments.length;
  switch(G__16903) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5329__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    var G__16904 = x;
    return goog.string.buildString(G__16904);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__16906 = sb.append([cljs.core.str(cljs.core.first(more))].join(""));
      var G__16907 = cljs.core.next(more);
      sb = G__16906;
      more = G__16907;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq16900) {
  var G__16901 = cljs.core.first(seq16900);
  var seq16900__$1 = cljs.core.next(seq16900);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__16901, seq16900__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs() {
  var G__16909 = arguments.length;
  switch(G__16909) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__16911 = cljs.core.next(xs);
            var G__16912 = cljs.core.next(ys);
            xs = G__16911;
            ys = G__16912;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__16913 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__16914 = cljs.core.next(s);
        res = G__16913;
        s = G__16914;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__16919 = (h + (cljs.core.hash(function() {
        var G__16917 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__16917) : cljs.core.key.call(null, G__16917);
      }()) ^ cljs.core.hash(function() {
        var G__16918 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__16918) : cljs.core.val.call(null, G__16918);
      }()))) % 4503599627370496;
      var G__16920 = cljs.core.next(s);
      h = G__16919;
      s = G__16920;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__16921 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__16922 = cljs.core.next(s__$1);
      h = G__16921;
      s__$1 = G__16922;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__16933_16943 = cljs.core.seq(fn_map);
  var chunk__16934_16944 = null;
  var count__16935_16945 = 0;
  var i__16936_16946 = 0;
  while (true) {
    if (i__16936_16946 < count__16935_16945) {
      var vec__16937_16947 = chunk__16934_16944.cljs$core$IIndexed$_nth$arity$2(null, i__16936_16946);
      var key_name_16948 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16937_16947, 0, null);
      var f_16949 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16937_16947, 1, null);
      var str_name_16950 = function() {
        var G__16938 = key_name_16948;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__16938) : cljs.core.name.call(null, G__16938);
      }();
      obj[str_name_16950] = f_16949;
      var G__16951 = seq__16933_16943;
      var G__16952 = chunk__16934_16944;
      var G__16953 = count__16935_16945;
      var G__16954 = i__16936_16946 + 1;
      seq__16933_16943 = G__16951;
      chunk__16934_16944 = G__16952;
      count__16935_16945 = G__16953;
      i__16936_16946 = G__16954;
      continue;
    } else {
      var temp__4425__auto___16955 = cljs.core.seq(seq__16933_16943);
      if (temp__4425__auto___16955) {
        var seq__16933_16956__$1 = temp__4425__auto___16955;
        if (cljs.core.chunked_seq_QMARK_(seq__16933_16956__$1)) {
          var c__5063__auto___16957 = function() {
            var G__16939 = seq__16933_16956__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__16939) : cljs.core.chunk_first.call(null, G__16939);
          }();
          var G__16958 = function() {
            var G__16940 = seq__16933_16956__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__16940) : cljs.core.chunk_rest.call(null, G__16940);
          }();
          var G__16959 = c__5063__auto___16957;
          var G__16960 = cljs.core.count(c__5063__auto___16957);
          var G__16961 = 0;
          seq__16933_16943 = G__16958;
          chunk__16934_16944 = G__16959;
          count__16935_16945 = G__16960;
          i__16936_16946 = G__16961;
          continue;
        } else {
          var vec__16941_16962 = cljs.core.first(seq__16933_16956__$1);
          var key_name_16963 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16941_16962, 0, null);
          var f_16964 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16941_16962, 1, null);
          var str_name_16965 = function() {
            var G__16942 = key_name_16963;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__16942) : cljs.core.name.call(null, G__16942);
          }();
          obj[str_name_16965] = f_16964;
          var G__16966 = cljs.core.next(seq__16933_16956__$1);
          var G__16967 = null;
          var G__16968 = 0;
          var G__16969 = 0;
          seq__16933_16943 = G__16966;
          chunk__16934_16944 = G__16967;
          count__16935_16945 = G__16968;
          i__16936_16946 = G__16969;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  var G__16971 = coll;
  if (G__16971) {
    var bit__4952__auto__ = G__16971.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4952__auto__ || G__16971.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__16971.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__16971);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__16971);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__16973 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__16973;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__16974 = i - 1;
      var G__16975 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__16974;
      r = G__16975;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq16972) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq16972));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__4278__auto__ = coll == null;
    if (or__4278__auto__) {
      return or__4278__auto__;
    } else {
      var G__16979 = coll;
      if (G__16979) {
        var bit__4945__auto__ = G__16979.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4945__auto__ || G__16979.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  var G__16981 = x;
  if (G__16981) {
    var bit__4952__auto__ = G__16981.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4952__auto__ || G__16981.cljs$core$IList$) {
      return true;
    } else {
      if (!G__16981.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__16981);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__16981);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4266__auto__ = cljs.core.not(a.ns);
      if (and__4266__auto__) {
        return b.ns;
      } else {
        return and__4266__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__16988 = a.ns;
            var G__16989 = b.ns;
            return goog.array.defaultCompare(G__16988, G__16989);
          }();
          if (0 === nsc) {
            var G__16990 = a.name;
            var G__16991 = b.name;
            return goog.array.defaultCompare(G__16990, G__16991);
          } else {
            return nsc;
          }
        }
      } else {
        var G__16992 = a.name;
        var G__16993 = b.name;
        return goog.array.defaultCompare(G__16992, G__16993);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__16995 = null;
  var G__16995__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__16995__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__16995 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16995__2.call(this, self__, coll);
      case 3:
        return G__16995__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16995.cljs$core$IFn$_invoke$arity$2 = G__16995__2;
  G__16995.cljs$core$IFn$_invoke$arity$3 = G__16995__3;
  return G__16995;
}();
cljs.core.Keyword.prototype.apply = function(self__, args16994) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16994)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4694__auto__ = self__._hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (function() {
    var G__16997 = x;
    if (G__16997) {
      var bit__4945__auto__ = G__16997.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4945__auto__ || G__16997.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function cljs$core$keyword() {
  var G__16999 = arguments.length;
  switch(G__16999) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), function() {
        var G__17000 = name;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__17000) : cljs.core.name.call(null, G__17000);
      }(), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__17002 = ls.sval();
        ls = G__17002;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk() {
  var G__17004 = arguments.length;
  switch(G__17004) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (function() {
    var G__17007 = s;
    if (G__17007) {
      var bit__4945__auto__ = G__17007.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4945__auto__ || G__17007.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__17008 = cljs.core.next(s__$1);
      s__$1 = G__17008;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_17009 = 0;
  var xs_17010 = cljs.core.seq(coll);
  while (true) {
    if (xs_17010) {
      ret[i_17009] = cljs.core.to_array(cljs.core.first(xs_17010));
      var G__17011 = i_17009 + 1;
      var G__17012 = cljs.core.next(xs_17010);
      i_17009 = G__17011;
      xs_17010 = G__17012;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array() {
  var G__17014 = arguments.length;
  switch(G__17014) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__17016 = i + 1;
        var G__17017 = cljs.core.next(s__$1);
        i = G__17016;
        s__$1 = G__17017;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5163__auto___17018 = size;
    var i_17019 = 0;
    while (true) {
      if (i_17019 < n__5163__auto___17018) {
        a[i_17019] = init_val_or_seq;
        var G__17020 = i_17019 + 1;
        i_17019 = G__17020;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array() {
  var G__17022 = arguments.length;
  switch(G__17022) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__17024 = i + 1;
        var G__17025 = cljs.core.next(s__$1);
        i = G__17024;
        s__$1 = G__17025;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5163__auto___17026 = size;
    var i_17027 = 0;
    while (true) {
      if (i_17027 < n__5163__auto___17026) {
        a[i_17027] = init_val_or_seq;
        var G__17028 = i_17027 + 1;
        i_17027 = G__17028;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array() {
  var G__17030 = arguments.length;
  switch(G__17030) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__17032 = i + 1;
        var G__17033 = cljs.core.next(s__$1);
        i = G__17032;
        s__$1 = G__17033;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5163__auto___17034 = size;
    var i_17035 = 0;
    while (true) {
      if (i_17035 < n__5163__auto___17034) {
        a[i_17035] = init_val_or_seq;
        var G__17036 = i_17035 + 1;
        i_17035 = G__17036;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array() {
  var G__17038 = arguments.length;
  switch(G__17038) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__17040 = i + 1;
        var G__17041 = cljs.core.next(s__$1);
        i = G__17040;
        s__$1 = G__17041;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5163__auto___17042 = size;
    var i_17043 = 0;
    while (true) {
      if (i_17043 < n__5163__auto___17042) {
        a[i_17043] = init_val_or_seq;
        var G__17044 = i_17043 + 1;
        i_17043 = G__17044;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__17045 = cljs.core.next(s__$1);
        var G__17046 = i - 1;
        var G__17047 = sum + 1;
        s__$1 = G__17045;
        i = G__17046;
        sum = G__17047;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function cljs$core$concat() {
  var G__17053 = arguments.length;
  switch(G__17053) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq17049) {
  var G__17050 = cljs.core.first(seq17049);
  var seq17049__$1 = cljs.core.next(seq17049);
  var G__17051 = cljs.core.first(seq17049__$1);
  var seq17049__$2 = cljs.core.next(seq17049__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__17050, G__17051, seq17049__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_() {
  var G__17067 = arguments.length;
  switch(G__17067) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5329__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq17061) {
  var G__17062 = cljs.core.first(seq17061);
  var seq17061__$1 = cljs.core.next(seq17061);
  var G__17063 = cljs.core.first(seq17061__$1);
  var seq17061__$2 = cljs.core.next(seq17061__$1);
  var G__17064 = cljs.core.first(seq17061__$2);
  var seq17061__$3 = cljs.core.next(seq17061__$2);
  var G__17065 = cljs.core.first(seq17061__$3);
  var seq17061__$4 = cljs.core.next(seq17061__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__17062, G__17063, G__17064, G__17065, seq17061__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_() {
  var G__17073 = arguments.length;
  switch(G__17073) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__17075 = ntcoll;
      var G__17076 = cljs.core.first(vals);
      var G__17077 = cljs.core.next(vals);
      tcoll = G__17075;
      val = G__17076;
      vals = G__17077;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq17069) {
  var G__17070 = cljs.core.first(seq17069);
  var seq17069__$1 = cljs.core.next(seq17069);
  var G__17071 = cljs.core.first(seq17069__$1);
  var seq17069__$2 = cljs.core.next(seq17069__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__17070, G__17071, seq17069__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_() {
  var G__17083 = arguments.length;
  switch(G__17083) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5329__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__17085 = ntcoll;
      var G__17086 = cljs.core.first(kvs);
      var G__17087 = cljs.core.second(kvs);
      var G__17088 = cljs.core.nnext(kvs);
      tcoll = G__17085;
      key = G__17086;
      val = G__17087;
      kvs = G__17088;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq17078) {
  var G__17079 = cljs.core.first(seq17078);
  var seq17078__$1 = cljs.core.next(seq17078);
  var G__17080 = cljs.core.first(seq17078__$1);
  var seq17078__$2 = cljs.core.next(seq17078__$1);
  var G__17081 = cljs.core.first(seq17078__$2);
  var seq17078__$3 = cljs.core.next(seq17078__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__17079, G__17080, G__17081, seq17078__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_() {
  var G__17093 = arguments.length;
  switch(G__17093) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__17095 = ntcoll;
      var G__17096 = cljs.core.first(ks);
      var G__17097 = cljs.core.next(ks);
      tcoll = G__17095;
      key = G__17096;
      ks = G__17097;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq17089) {
  var G__17090 = cljs.core.first(seq17089);
  var seq17089__$1 = cljs.core.next(seq17089);
  var G__17091 = cljs.core.first(seq17089__$1);
  var seq17089__$2 = cljs.core.next(seq17089__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__17090, G__17091, seq17089__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_() {
  var G__17102 = arguments.length;
  switch(G__17102) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__17104 = ntcoll;
      var G__17105 = cljs.core.first(vals);
      var G__17106 = cljs.core.next(vals);
      tcoll = G__17104;
      val = G__17105;
      vals = G__17106;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq17098) {
  var G__17099 = cljs.core.first(seq17098);
  var seq17098__$1 = cljs.core.next(seq17098);
  var G__17100 = cljs.core.first(seq17098__$1);
  var seq17098__$2 = cljs.core.next(seq17098__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__17099, G__17100, seq17098__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a5207 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a5207);
      } else {
        var G__17317 = a5207;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17317) : f.call(null, G__17317);
      }
    } else {
      var b5208 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a5207, b5208);
        } else {
          var G__17318 = a5207;
          var G__17319 = b5208;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17318, G__17319) : f.call(null, G__17318, G__17319);
        }
      } else {
        var c5209 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a5207, b5208, c5209);
          } else {
            var G__17320 = a5207;
            var G__17321 = b5208;
            var G__17322 = c5209;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17320, G__17321, G__17322) : f.call(null, G__17320, G__17321, G__17322);
          }
        } else {
          var d5210 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a5207, b5208, c5209, d5210);
            } else {
              var G__17323 = a5207;
              var G__17324 = b5208;
              var G__17325 = c5209;
              var G__17326 = d5210;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17323, G__17324, G__17325, G__17326) : f.call(null, G__17323, G__17324, G__17325, G__17326);
            }
          } else {
            var e5211 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a5207, b5208, c5209, d5210, e5211);
              } else {
                var G__17327 = a5207;
                var G__17328 = b5208;
                var G__17329 = c5209;
                var G__17330 = d5210;
                var G__17331 = e5211;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__17327, G__17328, G__17329, G__17330, G__17331) : f.call(null, G__17327, G__17328, G__17329, G__17330, G__17331);
              }
            } else {
              var f5212 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a5207, b5208, c5209, d5210, e5211, f5212);
                } else {
                  var G__17332 = a5207;
                  var G__17333 = b5208;
                  var G__17334 = c5209;
                  var G__17335 = d5210;
                  var G__17336 = e5211;
                  var G__17337 = f5212;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__17332, G__17333, G__17334, G__17335, G__17336, G__17337) : f.call(null, G__17332, G__17333, G__17334, G__17335, G__17336, G__17337);
                }
              } else {
                var g5213 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a5207, b5208, c5209, d5210, e5211, f5212, g5213);
                  } else {
                    var G__17338 = a5207;
                    var G__17339 = b5208;
                    var G__17340 = c5209;
                    var G__17341 = d5210;
                    var G__17342 = e5211;
                    var G__17343 = f5212;
                    var G__17344 = g5213;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__17338, G__17339, G__17340, G__17341, G__17342, G__17343, G__17344) : f.call(null, G__17338, G__17339, G__17340, G__17341, G__17342, G__17343, G__17344);
                  }
                } else {
                  var h5214 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a5207, b5208, c5209, d5210, e5211, f5212, g5213, h5214);
                    } else {
                      var G__17345 = a5207;
                      var G__17346 = b5208;
                      var G__17347 = c5209;
                      var G__17348 = d5210;
                      var G__17349 = e5211;
                      var G__17350 = f5212;
                      var G__17351 = g5213;
                      var G__17352 = h5214;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__17345, G__17346, G__17347, G__17348, G__17349, G__17350, G__17351, G__17352) : f.call(null, G__17345, G__17346, G__17347, G__17348, G__17349, G__17350, G__17351, G__17352);
                    }
                  } else {
                    var i5215 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a5207, b5208, c5209, d5210, e5211, f5212, g5213, h5214, i5215);
                      } else {
                        var G__17353 = a5207;
                        var G__17354 = b5208;
                        var G__17355 = c5209;
                        var G__17356 = d5210;
                        var G__17357 = e5211;
                        var G__17358 = f5212;
                        var G__17359 = g5213;
                        var G__17360 = h5214;
                        var G__17361 = i5215;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__17353, G__17354, G__17355, G__17356, G__17357, G__17358, G__17359, G__17360, G__17361) : f.call(null, G__17353, G__17354, G__17355, G__17356, G__17357, G__17358, G__17359, G__17360, G__17361);
                      }
                    } else {
                      var j5216 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a5207, b5208, c5209, d5210, e5211, f5212, g5213, h5214, i5215, j5216);
                        } else {
                          var G__17362 = a5207;
                          var G__17363 = b5208;
                          var G__17364 = c5209;
                          var G__17365 = d5210;
                          var G__17366 = e5211;
                          var G__17367 = f5212;
                          var G__17368 = g5213;
                          var G__17369 = h5214;
                          var G__17370 = i5215;
                          var G__17371 = j5216;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__17362, G__17363, G__17364, G__17365, G__17366, G__17367, G__17368, G__17369, G__17370, G__17371) : f.call(null, G__17362, G__17363, G__17364, G__17365, G__17366, G__17367, G__17368, G__17369, G__17370, G__17371);
                        }
                      } else {
                        var k5217 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a5207, b5208, c5209, d5210, e5211, f5212, g5213, h5214, i5215, j5216, k5217);
                          } else {
                            var G__17372 = a5207;
                            var G__17373 = b5208;
                            var G__17374 = c5209;
                            var G__17375 = d5210;
                            var G__17376 = e5211;
                            var G__17377 = f5212;
                            var G__17378 = g5213;
                            var G__17379 = h5214;
                            var G__17380 = i5215;
                            var G__17381 = j5216;
                            var G__17382 = k5217;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__17372, G__17373, G__17374, G__17375, G__17376, G__17377, G__17378, G__17379, G__17380, G__17381, G__17382) : f.call(null, G__17372, G__17373, G__17374, G__17375, G__17376, G__17377, G__17378, G__17379, G__17380, G__17381, G__17382);
                          }
                        } else {
                          var l5218 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a5207, b5208, c5209, d5210, e5211, f5212, g5213, h5214, i5215, j5216, k5217, l5218);
                            } else {
                              var G__17383 = a5207;
                              var G__17384 = b5208;
                              var G__17385 = c5209;
                              var G__17386 = d5210;
                              var G__17387 = e5211;
                              var G__17388 = f5212;
                              var G__17389 = g5213;
                              var G__17390 = h5214;
                              var G__17391 = i5215;
                              var G__17392 = j5216;
                              var G__17393 = k5217;
                              var G__17394 = l5218;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__17383, G__17384, G__17385, G__17386, G__17387, G__17388, G__17389, G__17390, G__17391, G__17392, G__17393, G__17394) : f.call(null, G__17383, G__17384, G__17385, G__17386, G__17387, G__17388, G__17389, G__17390, G__17391, G__17392, G__17393, G__17394);
                            }
                          } else {
                            var m5219 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a5207, b5208, c5209, d5210, e5211, f5212, g5213, h5214, i5215, j5216, k5217, l5218, m5219);
                              } else {
                                var G__17395 = a5207;
                                var G__17396 = b5208;
                                var G__17397 = c5209;
                                var G__17398 = d5210;
                                var G__17399 = e5211;
                                var G__17400 = f5212;
                                var G__17401 = g5213;
                                var G__17402 = h5214;
                                var G__17403 = i5215;
                                var G__17404 = j5216;
                                var G__17405 = k5217;
                                var G__17406 = l5218;
                                var G__17407 = m5219;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__17395, G__17396, G__17397, G__17398, G__17399, G__17400, G__17401, G__17402, G__17403, G__17404, G__17405, G__17406, G__17407) : f.call(null, G__17395, G__17396, G__17397, G__17398, G__17399, G__17400, G__17401, G__17402, G__17403, G__17404, G__17405, G__17406, G__17407);
                              }
                            } else {
                              var n5220 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a5207, b5208, c5209, d5210, e5211, f5212, g5213, h5214, i5215, j5216, k5217, l5218, m5219, n5220);
                                } else {
                                  var G__17408 = a5207;
                                  var G__17409 = b5208;
                                  var G__17410 = c5209;
                                  var G__17411 = d5210;
                                  var G__17412 = e5211;
                                  var G__17413 = f5212;
                                  var G__17414 = g5213;
                                  var G__17415 = h5214;
                                  var G__17416 = i5215;
                                  var G__17417 = j5216;
                                  var G__17418 = k5217;
                                  var G__17419 = l5218;
                                  var G__17420 = m5219;
                                  var G__17421 = n5220;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__17408, G__17409, G__17410, G__17411, G__17412, G__17413, G__17414, G__17415, G__17416, G__17417, G__17418, G__17419, G__17420, G__17421) : f.call(null, G__17408, G__17409, G__17410, G__17411, G__17412, G__17413, G__17414, G__17415, G__17416, G__17417, G__17418, G__17419, G__17420, G__17421);
                                }
                              } else {
                                var o5221 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a5207, b5208, c5209, d5210, e5211, f5212, g5213, h5214, i5215, j5216, k5217, l5218, m5219, n5220, o5221);
                                  } else {
                                    var G__17422 = a5207;
                                    var G__17423 = b5208;
                                    var G__17424 = c5209;
                                    var G__17425 = d5210;
                                    var G__17426 = e5211;
                                    var G__17427 = f5212;
                                    var G__17428 = g5213;
                                    var G__17429 = h5214;
                                    var G__17430 = i5215;
                                    var G__17431 = j5216;
                                    var G__17432 = k5217;
                                    var G__17433 = l5218;
                                    var G__17434 = m5219;
                                    var G__17435 = n5220;
                                    var G__17436 = o5221;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__17422, G__17423, G__17424, G__17425, G__17426, G__17427, G__17428, G__17429, G__17430, G__17431, G__17432, G__17433, G__17434, G__17435, G__17436) : f.call(null, G__17422, G__17423, G__17424, G__17425, G__17426, G__17427, G__17428, G__17429, G__17430, G__17431, G__17432, G__17433, G__17434, G__17435, G__17436);
                                  }
                                } else {
                                  var p5222 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a5207, b5208, c5209, d5210, e5211, f5212, g5213, h5214, i5215, j5216, k5217, l5218, m5219, n5220, o5221, p5222);
                                    } else {
                                      var G__17437 = a5207;
                                      var G__17438 = b5208;
                                      var G__17439 = c5209;
                                      var G__17440 = d5210;
                                      var G__17441 = e5211;
                                      var G__17442 = f5212;
                                      var G__17443 = g5213;
                                      var G__17444 = h5214;
                                      var G__17445 = i5215;
                                      var G__17446 = j5216;
                                      var G__17447 = k5217;
                                      var G__17448 = l5218;
                                      var G__17449 = m5219;
                                      var G__17450 = n5220;
                                      var G__17451 = o5221;
                                      var G__17452 = p5222;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__17437, G__17438, G__17439, G__17440, G__17441, G__17442, G__17443, G__17444, G__17445, G__17446, G__17447, G__17448, G__17449, G__17450, G__17451, G__17452) : f.call(null, G__17437, G__17438, G__17439, G__17440, G__17441, G__17442, G__17443, G__17444, G__17445, G__17446, G__17447, G__17448, G__17449, G__17450, G__17451, G__17452);
                                    }
                                  } else {
                                    var q5223 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a5207, b5208, c5209, d5210, e5211, f5212, g5213, h5214, i5215, j5216, k5217, l5218, m5219, n5220, o5221, p5222, q5223);
                                      } else {
                                        var G__17453 = a5207;
                                        var G__17454 = b5208;
                                        var G__17455 = c5209;
                                        var G__17456 = d5210;
                                        var G__17457 = e5211;
                                        var G__17458 = f5212;
                                        var G__17459 = g5213;
                                        var G__17460 = h5214;
                                        var G__17461 = i5215;
                                        var G__17462 = j5216;
                                        var G__17463 = k5217;
                                        var G__17464 = l5218;
                                        var G__17465 = m5219;
                                        var G__17466 = n5220;
                                        var G__17467 = o5221;
                                        var G__17468 = p5222;
                                        var G__17469 = q5223;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__17453, G__17454, G__17455, G__17456, G__17457, G__17458, G__17459, G__17460, G__17461, G__17462, G__17463, G__17464, G__17465, G__17466, G__17467, G__17468, G__17469) : f.call(null, G__17453, G__17454, G__17455, G__17456, G__17457, G__17458, G__17459, G__17460, G__17461, G__17462, G__17463, G__17464, G__17465, G__17466, G__17467, G__17468, G__17469);
                                      }
                                    } else {
                                      var r5224 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a5207, b5208, c5209, d5210, e5211, f5212, g5213, h5214, i5215, j5216, k5217, l5218, m5219, n5220, o5221, p5222, q5223, r5224);
                                        } else {
                                          var G__17470 = a5207;
                                          var G__17471 = b5208;
                                          var G__17472 = c5209;
                                          var G__17473 = d5210;
                                          var G__17474 = e5211;
                                          var G__17475 = f5212;
                                          var G__17476 = g5213;
                                          var G__17477 = h5214;
                                          var G__17478 = i5215;
                                          var G__17479 = j5216;
                                          var G__17480 = k5217;
                                          var G__17481 = l5218;
                                          var G__17482 = m5219;
                                          var G__17483 = n5220;
                                          var G__17484 = o5221;
                                          var G__17485 = p5222;
                                          var G__17486 = q5223;
                                          var G__17487 = r5224;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__17470, G__17471, G__17472, G__17473, G__17474, G__17475, G__17476, G__17477, G__17478, G__17479, G__17480, G__17481, G__17482, G__17483, G__17484, G__17485, G__17486, G__17487) : f.call(null, G__17470, G__17471, G__17472, G__17473, G__17474, G__17475, G__17476, G__17477, G__17478, G__17479, G__17480, G__17481, G__17482, G__17483, G__17484, G__17485, G__17486, G__17487);
                                        }
                                      } else {
                                        var s5225 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a5207, b5208, c5209, d5210, e5211, f5212, g5213, h5214, i5215, j5216, k5217, l5218, m5219, n5220, o5221, p5222, q5223, r5224, s5225);
                                          } else {
                                            var G__17488 = a5207;
                                            var G__17489 = b5208;
                                            var G__17490 = c5209;
                                            var G__17491 = d5210;
                                            var G__17492 = e5211;
                                            var G__17493 = f5212;
                                            var G__17494 = g5213;
                                            var G__17495 = h5214;
                                            var G__17496 = i5215;
                                            var G__17497 = j5216;
                                            var G__17498 = k5217;
                                            var G__17499 = l5218;
                                            var G__17500 = m5219;
                                            var G__17501 = n5220;
                                            var G__17502 = o5221;
                                            var G__17503 = p5222;
                                            var G__17504 = q5223;
                                            var G__17505 = r5224;
                                            var G__17506 = s5225;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__17488, G__17489, G__17490, G__17491, G__17492, G__17493, G__17494, G__17495, G__17496, G__17497, G__17498, G__17499, G__17500, G__17501, G__17502, G__17503, G__17504, G__17505, G__17506) : f.call(null, G__17488, G__17489, G__17490, G__17491, G__17492, G__17493, G__17494, G__17495, G__17496, G__17497, G__17498, G__17499, G__17500, G__17501, G__17502, G__17503, G__17504, G__17505, 
                                            G__17506);
                                          }
                                        } else {
                                          var t5226 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a5207, b5208, c5209, d5210, e5211, f5212, g5213, h5214, i5215, j5216, k5217, l5218, m5219, n5220, o5221, p5222, q5223, r5224, s5225, t5226);
                                            } else {
                                              var G__17507 = a5207;
                                              var G__17508 = b5208;
                                              var G__17509 = c5209;
                                              var G__17510 = d5210;
                                              var G__17511 = e5211;
                                              var G__17512 = f5212;
                                              var G__17513 = g5213;
                                              var G__17514 = h5214;
                                              var G__17515 = i5215;
                                              var G__17516 = j5216;
                                              var G__17517 = k5217;
                                              var G__17518 = l5218;
                                              var G__17519 = m5219;
                                              var G__17520 = n5220;
                                              var G__17521 = o5221;
                                              var G__17522 = p5222;
                                              var G__17523 = q5223;
                                              var G__17524 = r5224;
                                              var G__17525 = s5225;
                                              var G__17526 = t5226;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__17507, G__17508, G__17509, G__17510, G__17511, G__17512, G__17513, G__17514, G__17515, G__17516, G__17517, G__17518, G__17519, G__17520, G__17521, G__17522, G__17523, G__17524, G__17525, G__17526) : f.call(null, G__17507, G__17508, G__17509, G__17510, G__17511, G__17512, G__17513, G__17514, G__17515, G__17516, G__17517, G__17518, G__17519, G__17520, G__17521, G__17522, G__17523, 
                                              G__17524, G__17525, G__17526);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply() {
  var G__17534 = arguments.length;
  switch(G__17534) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 5), 0);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__5329__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(args, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq17527) {
  var G__17528 = cljs.core.first(seq17527);
  var seq17527__$1 = cljs.core.next(seq17527);
  var G__17529 = cljs.core.first(seq17527__$1);
  var seq17527__$2 = cljs.core.next(seq17527__$1);
  var G__17530 = cljs.core.first(seq17527__$2);
  var seq17527__$3 = cljs.core.next(seq17527__$2);
  var G__17531 = cljs.core.first(seq17527__$3);
  var seq17527__$4 = cljs.core.next(seq17527__$3);
  var G__17532 = cljs.core.first(seq17527__$4);
  var seq17527__$5 = cljs.core.next(seq17527__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__17528, G__17529, G__17530, G__17531, G__17532, seq17527__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta() {
  var G__17544 = arguments.length;
  switch(G__17544) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5329__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__17545 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17545) : f.call(null, G__17545);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__17546 = cljs.core.meta(obj);
    var G__17547 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17546, G__17547) : f.call(null, G__17546, G__17547);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__17548 = cljs.core.meta(obj);
    var G__17549 = a;
    var G__17550 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17548, G__17549, G__17550) : f.call(null, G__17548, G__17549, G__17550);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__17551 = cljs.core.meta(obj);
    var G__17552 = a;
    var G__17553 = b;
    var G__17554 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17551, G__17552, G__17553, G__17554) : f.call(null, G__17551, G__17552, G__17553, G__17554);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__17555 = cljs.core.meta(obj);
    var G__17556 = a;
    var G__17557 = b;
    var G__17558 = c;
    var G__17559 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__17555, G__17556, G__17557, G__17558, G__17559) : f.call(null, G__17555, G__17556, G__17557, G__17558, G__17559);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq17536) {
  var G__17537 = cljs.core.first(seq17536);
  var seq17536__$1 = cljs.core.next(seq17536);
  var G__17538 = cljs.core.first(seq17536__$1);
  var seq17536__$2 = cljs.core.next(seq17536__$1);
  var G__17539 = cljs.core.first(seq17536__$2);
  var seq17536__$3 = cljs.core.next(seq17536__$2);
  var G__17540 = cljs.core.first(seq17536__$3);
  var seq17536__$4 = cljs.core.next(seq17536__$3);
  var G__17541 = cljs.core.first(seq17536__$4);
  var seq17536__$5 = cljs.core.next(seq17536__$4);
  var G__17542 = cljs.core.first(seq17536__$5);
  var seq17536__$6 = cljs.core.next(seq17536__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__17537, G__17538, G__17539, G__17540, G__17541, G__17542, seq17536__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_() {
  var G__17565 = arguments.length;
  switch(G__17565) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq17561) {
  var G__17562 = cljs.core.first(seq17561);
  var seq17561__$1 = cljs.core.next(seq17561);
  var G__17563 = cljs.core.first(seq17561__$1);
  var seq17561__$2 = cljs.core.next(seq17561__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__17562, G__17563, seq17561__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t17570 !== "undefined") {
  } else {
    cljs.core.t17570 = function(nil_iter, meta17571) {
      this.nil_iter = nil_iter;
      this.meta17571 = meta17571;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t17570.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17572, meta17571__$1) {
      var self__ = this;
      var _17572__$1 = this;
      return new cljs.core.t17570(self__.nil_iter, meta17571__$1);
    };
    cljs.core.t17570.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17572) {
      var self__ = this;
      var _17572__$1 = this;
      return self__.meta17571;
    };
    cljs.core.t17570.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t17570.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t17570.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t17570.cljs$lang$type = true;
    cljs.core.t17570.cljs$lang$ctorStr = "cljs.core/t17570";
    cljs.core.t17570.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
      return cljs.core._write(writer__4858__auto__, "cljs.core/t17570");
    };
    cljs.core.__GT_t17570 = function cljs$core$nil_iter_$___GT_t17570(nil_iter__$1, meta17571) {
      return new cljs.core.t17570(nil_iter__$1, meta17571);
    };
  }
  return new cljs.core.t17570(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.truth_(cljs.core.iterable_QMARK_(coll))) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4266__auto__ = !(lt.stepper == null);
      if (and__4266__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4266__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__17573 = lt;
        var G__17574 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__17573, G__17574) : self__.xform.call(null, G__17573, G__17574);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__17575 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__17575) : self__.xform.call(null, G__17575);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__17577 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__17577) : xform.call(null, G__17577);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__17579 = cljs.core.next(iters__$1);
        iters__$1 = G__17579;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__5163__auto___17580 = self__.iters.length;
  var i_17581 = 0;
  while (true) {
    if (i_17581 < n__5163__auto___17580) {
      self__.nexts[i_17581] = self__.iters[i_17581].next();
      var G__17582 = i_17581 + 1;
      i_17581 = G__17582;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4266__auto__ = !(lt.stepper == null);
      if (and__4266__auto__) {
        return this$.hasNext();
      } else {
        return and__4266__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__17578 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__17578) : self__.xform.call(null, G__17578);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper() {
  var G__17584 = arguments.length;
  switch(G__17584) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(function() {
    var G__17585 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__17585) : xform.call(null, G__17585);
  }(), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__17587_17591 = cljs.core.seq(colls);
  var chunk__17588_17592 = null;
  var count__17589_17593 = 0;
  var i__17590_17594 = 0;
  while (true) {
    if (i__17590_17594 < count__17589_17593) {
      var coll_17595 = chunk__17588_17592.cljs$core$IIndexed$_nth$arity$2(null, i__17590_17594);
      iters.push(cljs.core.iter(coll_17595));
      var G__17596 = seq__17587_17591;
      var G__17597 = chunk__17588_17592;
      var G__17598 = count__17589_17593;
      var G__17599 = i__17590_17594 + 1;
      seq__17587_17591 = G__17596;
      chunk__17588_17592 = G__17597;
      count__17589_17593 = G__17598;
      i__17590_17594 = G__17599;
      continue;
    } else {
      var temp__4425__auto___17600 = cljs.core.seq(seq__17587_17591);
      if (temp__4425__auto___17600) {
        var seq__17587_17601__$1 = temp__4425__auto___17600;
        if (cljs.core.chunked_seq_QMARK_(seq__17587_17601__$1)) {
          var c__5063__auto___17602 = cljs.core.chunk_first(seq__17587_17601__$1);
          var G__17603 = cljs.core.chunk_rest(seq__17587_17601__$1);
          var G__17604 = c__5063__auto___17602;
          var G__17605 = cljs.core.count(c__5063__auto___17602);
          var G__17606 = 0;
          seq__17587_17591 = G__17603;
          chunk__17588_17592 = G__17604;
          count__17589_17593 = G__17605;
          i__17590_17594 = G__17606;
          continue;
        } else {
          var coll_17607 = cljs.core.first(seq__17587_17601__$1);
          iters.push(cljs.core.iter(coll_17607));
          var G__17608 = cljs.core.next(seq__17587_17601__$1);
          var G__17609 = null;
          var G__17610 = 0;
          var G__17611 = 0;
          seq__17587_17591 = G__17608;
          chunk__17588_17592 = G__17609;
          count__17589_17593 = G__17610;
          i__17590_17594 = G__17611;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence() {
  var G__17616 = arguments.length;
  switch(G__17616) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__4278__auto__ = cljs.core.seq(coll);
    if (or__4278__auto__) {
      return or__4278__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq17612) {
  var G__17613 = cljs.core.first(seq17612);
  var seq17612__$1 = cljs.core.next(seq17612);
  var G__17614 = cljs.core.first(seq17612__$1);
  var seq17612__$2 = cljs.core.next(seq17612__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__17613, G__17614, seq17612__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__17619 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__17619) : pred.call(null, G__17619);
      }())) {
        var G__17620 = pred;
        var G__17621 = cljs.core.next(coll);
        pred = G__17620;
        coll = G__17621;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4278__auto__ = function() {
        var G__17625 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__17625) : pred.call(null, G__17625);
      }();
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        var G__17626 = pred;
        var G__17627 = cljs.core.next(coll);
        pred = G__17626;
        coll = G__17627;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return!cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__17634 = null;
    var G__17634__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__17634__1 = function(x) {
      return cljs.core.not(function() {
        var G__17631 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17631) : f.call(null, G__17631);
      }());
    };
    var G__17634__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__17632 = x;
        var G__17633 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17632, G__17633) : f.call(null, G__17632, G__17633);
      }());
    };
    var G__17634__3 = function() {
      var G__17635__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__17635 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__17636__i = 0, G__17636__a = new Array(arguments.length - 2);
          while (G__17636__i < G__17636__a.length) {
            G__17636__a[G__17636__i] = arguments[G__17636__i + 2];
            ++G__17636__i;
          }
          zs = new cljs.core.IndexedSeq(G__17636__a, 0);
        }
        return G__17635__delegate.call(this, x, y, zs);
      };
      G__17635.cljs$lang$maxFixedArity = 2;
      G__17635.cljs$lang$applyTo = function(arglist__17637) {
        var x = cljs.core.first(arglist__17637);
        arglist__17637 = cljs.core.next(arglist__17637);
        var y = cljs.core.first(arglist__17637);
        var zs = cljs.core.rest(arglist__17637);
        return G__17635__delegate(x, y, zs);
      };
      G__17635.cljs$core$IFn$_invoke$arity$variadic = G__17635__delegate;
      return G__17635;
    }();
    G__17634 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__17634__0.call(this);
        case 1:
          return G__17634__1.call(this, x);
        case 2:
          return G__17634__2.call(this, x, y);
        default:
          var G__17638 = null;
          if (arguments.length > 2) {
            var G__17639__i = 0, G__17639__a = new Array(arguments.length - 2);
            while (G__17639__i < G__17639__a.length) {
              G__17639__a[G__17639__i] = arguments[G__17639__i + 2];
              ++G__17639__i;
            }
            G__17638 = new cljs.core.IndexedSeq(G__17639__a, 0);
          }
          return G__17634__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__17638);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17634.cljs$lang$maxFixedArity = 2;
    G__17634.cljs$lang$applyTo = G__17634__3.cljs$lang$applyTo;
    G__17634.cljs$core$IFn$_invoke$arity$0 = G__17634__0;
    G__17634.cljs$core$IFn$_invoke$arity$1 = G__17634__1;
    G__17634.cljs$core$IFn$_invoke$arity$2 = G__17634__2;
    G__17634.cljs$core$IFn$_invoke$arity$variadic = G__17634__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__17634;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__17640__delegate = function(args) {
      return x;
    };
    var G__17640 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__17641__i = 0, G__17641__a = new Array(arguments.length - 0);
        while (G__17641__i < G__17641__a.length) {
          G__17641__a[G__17641__i] = arguments[G__17641__i + 0];
          ++G__17641__i;
        }
        args = new cljs.core.IndexedSeq(G__17641__a, 0);
      }
      return G__17640__delegate.call(this, args);
    };
    G__17640.cljs$lang$maxFixedArity = 0;
    G__17640.cljs$lang$applyTo = function(arglist__17642) {
      var args = cljs.core.seq(arglist__17642);
      return G__17640__delegate(args);
    };
    G__17640.cljs$core$IFn$_invoke$arity$variadic = G__17640__delegate;
    return G__17640;
  }();
};
cljs.core.comp = function cljs$core$comp() {
  var G__17648 = arguments.length;
  switch(G__17648) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5329__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__17677 = null;
    var G__17677__0 = function() {
      var G__17649 = function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17649) : f.call(null, G__17649);
    };
    var G__17677__1 = function(x) {
      var G__17650 = function() {
        var G__17651 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17651) : g.call(null, G__17651);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17650) : f.call(null, G__17650);
    };
    var G__17677__2 = function(x, y) {
      var G__17652 = function() {
        var G__17653 = x;
        var G__17654 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__17653, G__17654) : g.call(null, G__17653, G__17654);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17652) : f.call(null, G__17652);
    };
    var G__17677__3 = function(x, y, z) {
      var G__17655 = function() {
        var G__17656 = x;
        var G__17657 = y;
        var G__17658 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__17656, G__17657, G__17658) : g.call(null, G__17656, G__17657, G__17658);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17655) : f.call(null, G__17655);
    };
    var G__17677__4 = function() {
      var G__17678__delegate = function(x, y, z, args) {
        var G__17659 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17659) : f.call(null, G__17659);
      };
      var G__17678 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__17679__i = 0, G__17679__a = new Array(arguments.length - 3);
          while (G__17679__i < G__17679__a.length) {
            G__17679__a[G__17679__i] = arguments[G__17679__i + 3];
            ++G__17679__i;
          }
          args = new cljs.core.IndexedSeq(G__17679__a, 0);
        }
        return G__17678__delegate.call(this, x, y, z, args);
      };
      G__17678.cljs$lang$maxFixedArity = 3;
      G__17678.cljs$lang$applyTo = function(arglist__17680) {
        var x = cljs.core.first(arglist__17680);
        arglist__17680 = cljs.core.next(arglist__17680);
        var y = cljs.core.first(arglist__17680);
        arglist__17680 = cljs.core.next(arglist__17680);
        var z = cljs.core.first(arglist__17680);
        var args = cljs.core.rest(arglist__17680);
        return G__17678__delegate(x, y, z, args);
      };
      G__17678.cljs$core$IFn$_invoke$arity$variadic = G__17678__delegate;
      return G__17678;
    }();
    G__17677 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__17677__0.call(this);
        case 1:
          return G__17677__1.call(this, x);
        case 2:
          return G__17677__2.call(this, x, y);
        case 3:
          return G__17677__3.call(this, x, y, z);
        default:
          var G__17681 = null;
          if (arguments.length > 3) {
            var G__17682__i = 0, G__17682__a = new Array(arguments.length - 3);
            while (G__17682__i < G__17682__a.length) {
              G__17682__a[G__17682__i] = arguments[G__17682__i + 3];
              ++G__17682__i;
            }
            G__17681 = new cljs.core.IndexedSeq(G__17682__a, 0);
          }
          return G__17677__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17681);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17677.cljs$lang$maxFixedArity = 3;
    G__17677.cljs$lang$applyTo = G__17677__4.cljs$lang$applyTo;
    G__17677.cljs$core$IFn$_invoke$arity$0 = G__17677__0;
    G__17677.cljs$core$IFn$_invoke$arity$1 = G__17677__1;
    G__17677.cljs$core$IFn$_invoke$arity$2 = G__17677__2;
    G__17677.cljs$core$IFn$_invoke$arity$3 = G__17677__3;
    G__17677.cljs$core$IFn$_invoke$arity$variadic = G__17677__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17677;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__17683 = null;
    var G__17683__0 = function() {
      var G__17660 = function() {
        var G__17661 = function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17661) : g.call(null, G__17661);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17660) : f.call(null, G__17660);
    };
    var G__17683__1 = function(x) {
      var G__17662 = function() {
        var G__17663 = function() {
          var G__17664 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__17664) : h.call(null, G__17664);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17663) : g.call(null, G__17663);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17662) : f.call(null, G__17662);
    };
    var G__17683__2 = function(x, y) {
      var G__17665 = function() {
        var G__17666 = function() {
          var G__17667 = x;
          var G__17668 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__17667, G__17668) : h.call(null, G__17667, G__17668);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17666) : g.call(null, G__17666);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17665) : f.call(null, G__17665);
    };
    var G__17683__3 = function(x, y, z) {
      var G__17669 = function() {
        var G__17670 = function() {
          var G__17671 = x;
          var G__17672 = y;
          var G__17673 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__17671, G__17672, G__17673) : h.call(null, G__17671, G__17672, G__17673);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17670) : g.call(null, G__17670);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17669) : f.call(null, G__17669);
    };
    var G__17683__4 = function() {
      var G__17684__delegate = function(x, y, z, args) {
        var G__17674 = function() {
          var G__17675 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17675) : g.call(null, G__17675);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17674) : f.call(null, G__17674);
      };
      var G__17684 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__17685__i = 0, G__17685__a = new Array(arguments.length - 3);
          while (G__17685__i < G__17685__a.length) {
            G__17685__a[G__17685__i] = arguments[G__17685__i + 3];
            ++G__17685__i;
          }
          args = new cljs.core.IndexedSeq(G__17685__a, 0);
        }
        return G__17684__delegate.call(this, x, y, z, args);
      };
      G__17684.cljs$lang$maxFixedArity = 3;
      G__17684.cljs$lang$applyTo = function(arglist__17686) {
        var x = cljs.core.first(arglist__17686);
        arglist__17686 = cljs.core.next(arglist__17686);
        var y = cljs.core.first(arglist__17686);
        arglist__17686 = cljs.core.next(arglist__17686);
        var z = cljs.core.first(arglist__17686);
        var args = cljs.core.rest(arglist__17686);
        return G__17684__delegate(x, y, z, args);
      };
      G__17684.cljs$core$IFn$_invoke$arity$variadic = G__17684__delegate;
      return G__17684;
    }();
    G__17683 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__17683__0.call(this);
        case 1:
          return G__17683__1.call(this, x);
        case 2:
          return G__17683__2.call(this, x, y);
        case 3:
          return G__17683__3.call(this, x, y, z);
        default:
          var G__17687 = null;
          if (arguments.length > 3) {
            var G__17688__i = 0, G__17688__a = new Array(arguments.length - 3);
            while (G__17688__i < G__17688__a.length) {
              G__17688__a[G__17688__i] = arguments[G__17688__i + 3];
              ++G__17688__i;
            }
            G__17687 = new cljs.core.IndexedSeq(G__17688__a, 0);
          }
          return G__17683__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17687);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17683.cljs$lang$maxFixedArity = 3;
    G__17683.cljs$lang$applyTo = G__17683__4.cljs$lang$applyTo;
    G__17683.cljs$core$IFn$_invoke$arity$0 = G__17683__0;
    G__17683.cljs$core$IFn$_invoke$arity$1 = G__17683__1;
    G__17683.cljs$core$IFn$_invoke$arity$2 = G__17683__2;
    G__17683.cljs$core$IFn$_invoke$arity$3 = G__17683__3;
    G__17683.cljs$core$IFn$_invoke$arity$variadic = G__17683__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17683;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__17689__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__17690 = cljs.core.first(fs__$2).call(null, ret);
            var G__17691 = cljs.core.next(fs__$2);
            ret = G__17690;
            fs__$2 = G__17691;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__17689 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__17692__i = 0, G__17692__a = new Array(arguments.length - 0);
          while (G__17692__i < G__17692__a.length) {
            G__17692__a[G__17692__i] = arguments[G__17692__i + 0];
            ++G__17692__i;
          }
          args = new cljs.core.IndexedSeq(G__17692__a, 0);
        }
        return G__17689__delegate.call(this, args);
      };
      G__17689.cljs$lang$maxFixedArity = 0;
      G__17689.cljs$lang$applyTo = function(arglist__17693) {
        var args = cljs.core.seq(arglist__17693);
        return G__17689__delegate(args);
      };
      G__17689.cljs$core$IFn$_invoke$arity$variadic = G__17689__delegate;
      return G__17689;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq17643) {
  var G__17644 = cljs.core.first(seq17643);
  var seq17643__$1 = cljs.core.next(seq17643);
  var G__17645 = cljs.core.first(seq17643__$1);
  var seq17643__$2 = cljs.core.next(seq17643__$1);
  var G__17646 = cljs.core.first(seq17643__$2);
  var seq17643__$3 = cljs.core.next(seq17643__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__17644, G__17645, G__17646, seq17643__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial() {
  var G__17700 = arguments.length;
  switch(G__17700) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5329__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__17744 = null;
    var G__17744__0 = function() {
      var G__17701 = arg1;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17701) : f.call(null, G__17701);
    };
    var G__17744__1 = function(x) {
      var G__17702 = arg1;
      var G__17703 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17702, G__17703) : f.call(null, G__17702, G__17703);
    };
    var G__17744__2 = function(x, y) {
      var G__17704 = arg1;
      var G__17705 = x;
      var G__17706 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17704, G__17705, G__17706) : f.call(null, G__17704, G__17705, G__17706);
    };
    var G__17744__3 = function(x, y, z) {
      var G__17707 = arg1;
      var G__17708 = x;
      var G__17709 = y;
      var G__17710 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17707, G__17708, G__17709, G__17710) : f.call(null, G__17707, G__17708, G__17709, G__17710);
    };
    var G__17744__4 = function() {
      var G__17745__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__17745 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__17746__i = 0, G__17746__a = new Array(arguments.length - 3);
          while (G__17746__i < G__17746__a.length) {
            G__17746__a[G__17746__i] = arguments[G__17746__i + 3];
            ++G__17746__i;
          }
          args = new cljs.core.IndexedSeq(G__17746__a, 0);
        }
        return G__17745__delegate.call(this, x, y, z, args);
      };
      G__17745.cljs$lang$maxFixedArity = 3;
      G__17745.cljs$lang$applyTo = function(arglist__17747) {
        var x = cljs.core.first(arglist__17747);
        arglist__17747 = cljs.core.next(arglist__17747);
        var y = cljs.core.first(arglist__17747);
        arglist__17747 = cljs.core.next(arglist__17747);
        var z = cljs.core.first(arglist__17747);
        var args = cljs.core.rest(arglist__17747);
        return G__17745__delegate(x, y, z, args);
      };
      G__17745.cljs$core$IFn$_invoke$arity$variadic = G__17745__delegate;
      return G__17745;
    }();
    G__17744 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__17744__0.call(this);
        case 1:
          return G__17744__1.call(this, x);
        case 2:
          return G__17744__2.call(this, x, y);
        case 3:
          return G__17744__3.call(this, x, y, z);
        default:
          var G__17748 = null;
          if (arguments.length > 3) {
            var G__17749__i = 0, G__17749__a = new Array(arguments.length - 3);
            while (G__17749__i < G__17749__a.length) {
              G__17749__a[G__17749__i] = arguments[G__17749__i + 3];
              ++G__17749__i;
            }
            G__17748 = new cljs.core.IndexedSeq(G__17749__a, 0);
          }
          return G__17744__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17748);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17744.cljs$lang$maxFixedArity = 3;
    G__17744.cljs$lang$applyTo = G__17744__4.cljs$lang$applyTo;
    G__17744.cljs$core$IFn$_invoke$arity$0 = G__17744__0;
    G__17744.cljs$core$IFn$_invoke$arity$1 = G__17744__1;
    G__17744.cljs$core$IFn$_invoke$arity$2 = G__17744__2;
    G__17744.cljs$core$IFn$_invoke$arity$3 = G__17744__3;
    G__17744.cljs$core$IFn$_invoke$arity$variadic = G__17744__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17744;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__17750 = null;
    var G__17750__0 = function() {
      var G__17711 = arg1;
      var G__17712 = arg2;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17711, G__17712) : f.call(null, G__17711, G__17712);
    };
    var G__17750__1 = function(x) {
      var G__17713 = arg1;
      var G__17714 = arg2;
      var G__17715 = x;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17713, G__17714, G__17715) : f.call(null, G__17713, G__17714, G__17715);
    };
    var G__17750__2 = function(x, y) {
      var G__17716 = arg1;
      var G__17717 = arg2;
      var G__17718 = x;
      var G__17719 = y;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17716, G__17717, G__17718, G__17719) : f.call(null, G__17716, G__17717, G__17718, G__17719);
    };
    var G__17750__3 = function(x, y, z) {
      var G__17720 = arg1;
      var G__17721 = arg2;
      var G__17722 = x;
      var G__17723 = y;
      var G__17724 = z;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__17720, G__17721, G__17722, G__17723, G__17724) : f.call(null, G__17720, G__17721, G__17722, G__17723, G__17724);
    };
    var G__17750__4 = function() {
      var G__17751__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__17751 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__17752__i = 0, G__17752__a = new Array(arguments.length - 3);
          while (G__17752__i < G__17752__a.length) {
            G__17752__a[G__17752__i] = arguments[G__17752__i + 3];
            ++G__17752__i;
          }
          args = new cljs.core.IndexedSeq(G__17752__a, 0);
        }
        return G__17751__delegate.call(this, x, y, z, args);
      };
      G__17751.cljs$lang$maxFixedArity = 3;
      G__17751.cljs$lang$applyTo = function(arglist__17753) {
        var x = cljs.core.first(arglist__17753);
        arglist__17753 = cljs.core.next(arglist__17753);
        var y = cljs.core.first(arglist__17753);
        arglist__17753 = cljs.core.next(arglist__17753);
        var z = cljs.core.first(arglist__17753);
        var args = cljs.core.rest(arglist__17753);
        return G__17751__delegate(x, y, z, args);
      };
      G__17751.cljs$core$IFn$_invoke$arity$variadic = G__17751__delegate;
      return G__17751;
    }();
    G__17750 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__17750__0.call(this);
        case 1:
          return G__17750__1.call(this, x);
        case 2:
          return G__17750__2.call(this, x, y);
        case 3:
          return G__17750__3.call(this, x, y, z);
        default:
          var G__17754 = null;
          if (arguments.length > 3) {
            var G__17755__i = 0, G__17755__a = new Array(arguments.length - 3);
            while (G__17755__i < G__17755__a.length) {
              G__17755__a[G__17755__i] = arguments[G__17755__i + 3];
              ++G__17755__i;
            }
            G__17754 = new cljs.core.IndexedSeq(G__17755__a, 0);
          }
          return G__17750__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17754);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17750.cljs$lang$maxFixedArity = 3;
    G__17750.cljs$lang$applyTo = G__17750__4.cljs$lang$applyTo;
    G__17750.cljs$core$IFn$_invoke$arity$0 = G__17750__0;
    G__17750.cljs$core$IFn$_invoke$arity$1 = G__17750__1;
    G__17750.cljs$core$IFn$_invoke$arity$2 = G__17750__2;
    G__17750.cljs$core$IFn$_invoke$arity$3 = G__17750__3;
    G__17750.cljs$core$IFn$_invoke$arity$variadic = G__17750__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17750;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__17756 = null;
    var G__17756__0 = function() {
      var G__17725 = arg1;
      var G__17726 = arg2;
      var G__17727 = arg3;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17725, G__17726, G__17727) : f.call(null, G__17725, G__17726, G__17727);
    };
    var G__17756__1 = function(x) {
      var G__17728 = arg1;
      var G__17729 = arg2;
      var G__17730 = arg3;
      var G__17731 = x;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17728, G__17729, G__17730, G__17731) : f.call(null, G__17728, G__17729, G__17730, G__17731);
    };
    var G__17756__2 = function(x, y) {
      var G__17732 = arg1;
      var G__17733 = arg2;
      var G__17734 = arg3;
      var G__17735 = x;
      var G__17736 = y;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__17732, G__17733, G__17734, G__17735, G__17736) : f.call(null, G__17732, G__17733, G__17734, G__17735, G__17736);
    };
    var G__17756__3 = function(x, y, z) {
      var G__17737 = arg1;
      var G__17738 = arg2;
      var G__17739 = arg3;
      var G__17740 = x;
      var G__17741 = y;
      var G__17742 = z;
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__17737, G__17738, G__17739, G__17740, G__17741, G__17742) : f.call(null, G__17737, G__17738, G__17739, G__17740, G__17741, G__17742);
    };
    var G__17756__4 = function() {
      var G__17757__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__17757 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__17758__i = 0, G__17758__a = new Array(arguments.length - 3);
          while (G__17758__i < G__17758__a.length) {
            G__17758__a[G__17758__i] = arguments[G__17758__i + 3];
            ++G__17758__i;
          }
          args = new cljs.core.IndexedSeq(G__17758__a, 0);
        }
        return G__17757__delegate.call(this, x, y, z, args);
      };
      G__17757.cljs$lang$maxFixedArity = 3;
      G__17757.cljs$lang$applyTo = function(arglist__17759) {
        var x = cljs.core.first(arglist__17759);
        arglist__17759 = cljs.core.next(arglist__17759);
        var y = cljs.core.first(arglist__17759);
        arglist__17759 = cljs.core.next(arglist__17759);
        var z = cljs.core.first(arglist__17759);
        var args = cljs.core.rest(arglist__17759);
        return G__17757__delegate(x, y, z, args);
      };
      G__17757.cljs$core$IFn$_invoke$arity$variadic = G__17757__delegate;
      return G__17757;
    }();
    G__17756 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__17756__0.call(this);
        case 1:
          return G__17756__1.call(this, x);
        case 2:
          return G__17756__2.call(this, x, y);
        case 3:
          return G__17756__3.call(this, x, y, z);
        default:
          var G__17760 = null;
          if (arguments.length > 3) {
            var G__17761__i = 0, G__17761__a = new Array(arguments.length - 3);
            while (G__17761__i < G__17761__a.length) {
              G__17761__a[G__17761__i] = arguments[G__17761__i + 3];
              ++G__17761__i;
            }
            G__17760 = new cljs.core.IndexedSeq(G__17761__a, 0);
          }
          return G__17756__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17760);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17756.cljs$lang$maxFixedArity = 3;
    G__17756.cljs$lang$applyTo = G__17756__4.cljs$lang$applyTo;
    G__17756.cljs$core$IFn$_invoke$arity$0 = G__17756__0;
    G__17756.cljs$core$IFn$_invoke$arity$1 = G__17756__1;
    G__17756.cljs$core$IFn$_invoke$arity$2 = G__17756__2;
    G__17756.cljs$core$IFn$_invoke$arity$3 = G__17756__3;
    G__17756.cljs$core$IFn$_invoke$arity$variadic = G__17756__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17756;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__17762__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__17762 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__17763__i = 0, G__17763__a = new Array(arguments.length - 0);
        while (G__17763__i < G__17763__a.length) {
          G__17763__a[G__17763__i] = arguments[G__17763__i + 0];
          ++G__17763__i;
        }
        args = new cljs.core.IndexedSeq(G__17763__a, 0);
      }
      return G__17762__delegate.call(this, args);
    };
    G__17762.cljs$lang$maxFixedArity = 0;
    G__17762.cljs$lang$applyTo = function(arglist__17764) {
      var args = cljs.core.seq(arglist__17764);
      return G__17762__delegate(args);
    };
    G__17762.cljs$core$IFn$_invoke$arity$variadic = G__17762__delegate;
    return G__17762;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq17694) {
  var G__17695 = cljs.core.first(seq17694);
  var seq17694__$1 = cljs.core.next(seq17694);
  var G__17696 = cljs.core.first(seq17694__$1);
  var seq17694__$2 = cljs.core.next(seq17694__$1);
  var G__17697 = cljs.core.first(seq17694__$2);
  var seq17694__$3 = cljs.core.next(seq17694__$2);
  var G__17698 = cljs.core.first(seq17694__$3);
  var seq17694__$4 = cljs.core.next(seq17694__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__17695, G__17696, G__17697, G__17698, seq17694__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil() {
  var G__17766 = arguments.length;
  switch(G__17766) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__17784 = null;
    var G__17784__1 = function(a) {
      var G__17767 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17767) : f.call(null, G__17767);
    };
    var G__17784__2 = function(a, b) {
      var G__17768 = a == null ? x : a;
      var G__17769 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17768, G__17769) : f.call(null, G__17768, G__17769);
    };
    var G__17784__3 = function(a, b, c) {
      var G__17770 = a == null ? x : a;
      var G__17771 = b;
      var G__17772 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17770, G__17771, G__17772) : f.call(null, G__17770, G__17771, G__17772);
    };
    var G__17784__4 = function() {
      var G__17785__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__17785 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__17786__i = 0, G__17786__a = new Array(arguments.length - 3);
          while (G__17786__i < G__17786__a.length) {
            G__17786__a[G__17786__i] = arguments[G__17786__i + 3];
            ++G__17786__i;
          }
          ds = new cljs.core.IndexedSeq(G__17786__a, 0);
        }
        return G__17785__delegate.call(this, a, b, c, ds);
      };
      G__17785.cljs$lang$maxFixedArity = 3;
      G__17785.cljs$lang$applyTo = function(arglist__17787) {
        var a = cljs.core.first(arglist__17787);
        arglist__17787 = cljs.core.next(arglist__17787);
        var b = cljs.core.first(arglist__17787);
        arglist__17787 = cljs.core.next(arglist__17787);
        var c = cljs.core.first(arglist__17787);
        var ds = cljs.core.rest(arglist__17787);
        return G__17785__delegate(a, b, c, ds);
      };
      G__17785.cljs$core$IFn$_invoke$arity$variadic = G__17785__delegate;
      return G__17785;
    }();
    G__17784 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__17784__1.call(this, a);
        case 2:
          return G__17784__2.call(this, a, b);
        case 3:
          return G__17784__3.call(this, a, b, c);
        default:
          var G__17788 = null;
          if (arguments.length > 3) {
            var G__17789__i = 0, G__17789__a = new Array(arguments.length - 3);
            while (G__17789__i < G__17789__a.length) {
              G__17789__a[G__17789__i] = arguments[G__17789__i + 3];
              ++G__17789__i;
            }
            G__17788 = new cljs.core.IndexedSeq(G__17789__a, 0);
          }
          return G__17784__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__17788);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17784.cljs$lang$maxFixedArity = 3;
    G__17784.cljs$lang$applyTo = G__17784__4.cljs$lang$applyTo;
    G__17784.cljs$core$IFn$_invoke$arity$1 = G__17784__1;
    G__17784.cljs$core$IFn$_invoke$arity$2 = G__17784__2;
    G__17784.cljs$core$IFn$_invoke$arity$3 = G__17784__3;
    G__17784.cljs$core$IFn$_invoke$arity$variadic = G__17784__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17784;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__17790 = null;
    var G__17790__2 = function(a, b) {
      var G__17773 = a == null ? x : a;
      var G__17774 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17773, G__17774) : f.call(null, G__17773, G__17774);
    };
    var G__17790__3 = function(a, b, c) {
      var G__17775 = a == null ? x : a;
      var G__17776 = b == null ? y : b;
      var G__17777 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17775, G__17776, G__17777) : f.call(null, G__17775, G__17776, G__17777);
    };
    var G__17790__4 = function() {
      var G__17791__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__17791 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__17792__i = 0, G__17792__a = new Array(arguments.length - 3);
          while (G__17792__i < G__17792__a.length) {
            G__17792__a[G__17792__i] = arguments[G__17792__i + 3];
            ++G__17792__i;
          }
          ds = new cljs.core.IndexedSeq(G__17792__a, 0);
        }
        return G__17791__delegate.call(this, a, b, c, ds);
      };
      G__17791.cljs$lang$maxFixedArity = 3;
      G__17791.cljs$lang$applyTo = function(arglist__17793) {
        var a = cljs.core.first(arglist__17793);
        arglist__17793 = cljs.core.next(arglist__17793);
        var b = cljs.core.first(arglist__17793);
        arglist__17793 = cljs.core.next(arglist__17793);
        var c = cljs.core.first(arglist__17793);
        var ds = cljs.core.rest(arglist__17793);
        return G__17791__delegate(a, b, c, ds);
      };
      G__17791.cljs$core$IFn$_invoke$arity$variadic = G__17791__delegate;
      return G__17791;
    }();
    G__17790 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__17790__2.call(this, a, b);
        case 3:
          return G__17790__3.call(this, a, b, c);
        default:
          var G__17794 = null;
          if (arguments.length > 3) {
            var G__17795__i = 0, G__17795__a = new Array(arguments.length - 3);
            while (G__17795__i < G__17795__a.length) {
              G__17795__a[G__17795__i] = arguments[G__17795__i + 3];
              ++G__17795__i;
            }
            G__17794 = new cljs.core.IndexedSeq(G__17795__a, 0);
          }
          return G__17790__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__17794);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17790.cljs$lang$maxFixedArity = 3;
    G__17790.cljs$lang$applyTo = G__17790__4.cljs$lang$applyTo;
    G__17790.cljs$core$IFn$_invoke$arity$2 = G__17790__2;
    G__17790.cljs$core$IFn$_invoke$arity$3 = G__17790__3;
    G__17790.cljs$core$IFn$_invoke$arity$variadic = G__17790__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17790;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__17796 = null;
    var G__17796__2 = function(a, b) {
      var G__17778 = a == null ? x : a;
      var G__17779 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17778, G__17779) : f.call(null, G__17778, G__17779);
    };
    var G__17796__3 = function(a, b, c) {
      var G__17780 = a == null ? x : a;
      var G__17781 = b == null ? y : b;
      var G__17782 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17780, G__17781, G__17782) : f.call(null, G__17780, G__17781, G__17782);
    };
    var G__17796__4 = function() {
      var G__17797__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__17797 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__17798__i = 0, G__17798__a = new Array(arguments.length - 3);
          while (G__17798__i < G__17798__a.length) {
            G__17798__a[G__17798__i] = arguments[G__17798__i + 3];
            ++G__17798__i;
          }
          ds = new cljs.core.IndexedSeq(G__17798__a, 0);
        }
        return G__17797__delegate.call(this, a, b, c, ds);
      };
      G__17797.cljs$lang$maxFixedArity = 3;
      G__17797.cljs$lang$applyTo = function(arglist__17799) {
        var a = cljs.core.first(arglist__17799);
        arglist__17799 = cljs.core.next(arglist__17799);
        var b = cljs.core.first(arglist__17799);
        arglist__17799 = cljs.core.next(arglist__17799);
        var c = cljs.core.first(arglist__17799);
        var ds = cljs.core.rest(arglist__17799);
        return G__17797__delegate(a, b, c, ds);
      };
      G__17797.cljs$core$IFn$_invoke$arity$variadic = G__17797__delegate;
      return G__17797;
    }();
    G__17796 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__17796__2.call(this, a, b);
        case 3:
          return G__17796__3.call(this, a, b, c);
        default:
          var G__17800 = null;
          if (arguments.length > 3) {
            var G__17801__i = 0, G__17801__a = new Array(arguments.length - 3);
            while (G__17801__i < G__17801__a.length) {
              G__17801__a[G__17801__i] = arguments[G__17801__i + 3];
              ++G__17801__i;
            }
            G__17800 = new cljs.core.IndexedSeq(G__17801__a, 0);
          }
          return G__17796__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__17800);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17796.cljs$lang$maxFixedArity = 3;
    G__17796.cljs$lang$applyTo = G__17796__4.cljs$lang$applyTo;
    G__17796.cljs$core$IFn$_invoke$arity$2 = G__17796__2;
    G__17796.cljs$core$IFn$_invoke$arity$3 = G__17796__3;
    G__17796.cljs$core$IFn$_invoke$arity$variadic = G__17796__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17796;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed() {
  var G__17803 = arguments.length;
  switch(G__17803) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = function() {
      var G__17804 = -1;
      return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__17804) : cljs.core.volatile_BANG_.call(null, G__17804);
    }();
    return function(i) {
      return function() {
        var G__17835 = null;
        var G__17835__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__17835__1 = function(result) {
          var G__17805 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17805) : rf.call(null, G__17805);
        };
        var G__17835__2 = function(result, input) {
          var G__17806 = result;
          var G__17807 = function() {
            var G__17808 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__17809 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17808, G__17809) : f.call(null, G__17808, G__17809);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17806, G__17807) : rf.call(null, G__17806, G__17807);
        };
        G__17835 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__17835__0.call(this);
            case 1:
              return G__17835__1.call(this, result);
            case 2:
              return G__17835__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17835.cljs$core$IFn$_invoke$arity$0 = G__17835__0;
        G__17835.cljs$core$IFn$_invoke$arity$1 = G__17835__1;
        G__17835.cljs$core$IFn$_invoke$arity$2 = G__17835__2;
        return G__17835;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4425__auto__ = cljs.core.seq(coll__$1);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5163__auto___17836 = size;
          var i_17837 = 0;
          while (true) {
            if (i_17837 < n__5163__auto___17836) {
              cljs.core.chunk_append(b, function() {
                var G__17830 = idx + i_17837;
                var G__17831 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_17837);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17830, G__17831) : f.call(null, G__17830, G__17831);
              }());
              var G__17838 = i_17837 + 1;
              i_17837 = G__17838;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__17832 = idx;
            var G__17833 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17832, G__17833) : f.call(null, G__17832, G__17833);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep() {
  var G__17840 = arguments.length;
  switch(G__17840) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__17848 = null;
      var G__17848__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__17848__1 = function(result) {
        var G__17841 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17841) : rf.call(null, G__17841);
      };
      var G__17848__2 = function(result, input) {
        var v = function() {
          var G__17842 = input;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17842) : f.call(null, G__17842);
        }();
        if (v == null) {
          return result;
        } else {
          var G__17843 = result;
          var G__17844 = v;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17843, G__17844) : rf.call(null, G__17843, G__17844);
        }
      };
      G__17848 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__17848__0.call(this);
          case 1:
            return G__17848__1.call(this, result);
          case 2:
            return G__17848__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17848.cljs$core$IFn$_invoke$arity$0 = G__17848__0;
      G__17848.cljs$core$IFn$_invoke$arity$1 = G__17848__1;
      G__17848.cljs$core$IFn$_invoke$arity$2 = G__17848__2;
      return G__17848;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5163__auto___17849 = size;
        var i_17850 = 0;
        while (true) {
          if (i_17850 < n__5163__auto___17849) {
            var x_17851 = function() {
              var G__17845 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_17850);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17845) : f.call(null, G__17845);
            }();
            if (x_17851 == null) {
            } else {
              cljs.core.chunk_append(b, x_17851);
            }
            var G__17852 = i_17850 + 1;
            i_17850 = G__17852;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__17846 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17846) : f.call(null, G__17846);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__17853 = cljs.core.seq(self__.watches);
  var chunk__17854 = null;
  var count__17855 = 0;
  var i__17856 = 0;
  while (true) {
    if (i__17856 < count__17855) {
      var vec__17857 = chunk__17854.cljs$core$IIndexed$_nth$arity$2(null, i__17856);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17857, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17857, 1, null);
      var G__17858_17868 = key;
      var G__17859_17869 = this$__$1;
      var G__17860_17870 = oldval;
      var G__17861_17871 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17858_17868, G__17859_17869, G__17860_17870, G__17861_17871) : f.call(null, G__17858_17868, G__17859_17869, G__17860_17870, G__17861_17871);
      var G__17872 = seq__17853;
      var G__17873 = chunk__17854;
      var G__17874 = count__17855;
      var G__17875 = i__17856 + 1;
      seq__17853 = G__17872;
      chunk__17854 = G__17873;
      count__17855 = G__17874;
      i__17856 = G__17875;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__17853);
      if (temp__4425__auto__) {
        var seq__17853__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17853__$1)) {
          var c__5063__auto__ = cljs.core.chunk_first(seq__17853__$1);
          var G__17876 = cljs.core.chunk_rest(seq__17853__$1);
          var G__17877 = c__5063__auto__;
          var G__17878 = cljs.core.count(c__5063__auto__);
          var G__17879 = 0;
          seq__17853 = G__17876;
          chunk__17854 = G__17877;
          count__17855 = G__17878;
          i__17856 = G__17879;
          continue;
        } else {
          var vec__17862 = cljs.core.first(seq__17853__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17862, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17862, 1, null);
          var G__17863_17880 = key;
          var G__17864_17881 = this$__$1;
          var G__17865_17882 = oldval;
          var G__17866_17883 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__17863_17880, G__17864_17881, G__17865_17882, G__17866_17883) : f.call(null, G__17863_17880, G__17864_17881, G__17865_17882, G__17866_17883);
          var G__17884 = cljs.core.next(seq__17853__$1);
          var G__17885 = null;
          var G__17886 = 0;
          var G__17887 = 0;
          seq__17853 = G__17884;
          chunk__17854 = G__17885;
          count__17855 = G__17886;
          i__17856 = G__17887;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__17867 = this$__$1;
  return goog.getUid(G__17867);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom() {
  var G__17891 = arguments.length;
  switch(G__17891) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5329__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__17892) {
  var map__17893 = p__17892;
  var map__17893__$1 = cljs.core.seq_QMARK_(map__17893) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__17893) : map__17893;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__17893__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__17893__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq17888) {
  var G__17889 = cljs.core.first(seq17888);
  var seq17888__$1 = cljs.core.next(seq17888);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__17889, seq17888__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__17897 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__17897) : validate.call(null, G__17897);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__17898 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__17898) : cljs.core.pr_str.call(null, G__17898);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_() {
  var G__17905 = arguments.length;
  switch(G__17905) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5329__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__17906 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17906) : f.call(null, G__17906);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__17907 = a.state;
      var G__17908 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17907, G__17908) : f.call(null, G__17907, G__17908);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__17909 = a.state;
      var G__17910 = x;
      var G__17911 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17909, G__17910, G__17911) : f.call(null, G__17909, G__17910, G__17911);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq17899) {
  var G__17900 = cljs.core.first(seq17899);
  var seq17899__$1 = cljs.core.next(seq17899);
  var G__17901 = cljs.core.first(seq17899__$1);
  var seq17899__$2 = cljs.core.next(seq17899__$1);
  var G__17902 = cljs.core.first(seq17899__$2);
  var seq17899__$3 = cljs.core.next(seq17899__$2);
  var G__17903 = cljs.core.first(seq17899__$3);
  var seq17899__$4 = cljs.core.next(seq17899__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__17900, G__17901, G__17902, G__17903, seq17899__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed() {
  var G__17914 = arguments.length;
  switch(G__17914) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__17949 = null;
        var G__17949__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__17949__1 = function(result) {
          var G__17915 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17915) : rf.call(null, G__17915);
        };
        var G__17949__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = function() {
            var G__17916 = i;
            var G__17917 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17916, G__17917) : f.call(null, G__17916, G__17917);
          }();
          if (v == null) {
            return result;
          } else {
            var G__17918 = result;
            var G__17919 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17918, G__17919) : rf.call(null, G__17918, G__17919);
          }
        };
        G__17949 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__17949__0.call(this);
            case 1:
              return G__17949__1.call(this, result);
            case 2:
              return G__17949__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17949.cljs$core$IFn$_invoke$arity$0 = G__17949__0;
        G__17949.cljs$core$IFn$_invoke$arity$1 = G__17949__1;
        G__17949.cljs$core$IFn$_invoke$arity$2 = G__17949__2;
        return G__17949;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4425__auto__ = cljs.core.seq(coll__$1);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5163__auto___17950 = size;
          var i_17951 = 0;
          while (true) {
            if (i_17951 < n__5163__auto___17950) {
              var x_17952 = function() {
                var G__17944 = idx + i_17951;
                var G__17945 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_17951);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17944, G__17945) : f.call(null, G__17944, G__17945);
              }();
              if (x_17952 == null) {
              } else {
                cljs.core.chunk_append(b, x_17952);
              }
              var G__17953 = i_17951 + 1;
              i_17951 = G__17953;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__17946 = idx;
            var G__17947 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17946, G__17947) : f.call(null, G__17946, G__17947);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred() {
  var G__17965 = arguments.length;
  switch(G__17965) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5329__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(function() {
        var G__17981 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__17981) : p.call(null, G__17981);
      }());
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4266__auto__ = function() {
          var G__17983 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__17983) : p.call(null, G__17983);
        }();
        if (cljs.core.truth_(and__4266__auto__)) {
          var G__17984 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__17984) : p.call(null, G__17984);
        } else {
          return and__4266__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4266__auto__ = function() {
          var G__17986 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__17986) : p.call(null, G__17986);
        }();
        if (cljs.core.truth_(and__4266__auto__)) {
          var and__4266__auto____$1 = function() {
            var G__17988 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__17988) : p.call(null, G__17988);
          }();
          if (cljs.core.truth_(and__4266__auto____$1)) {
            var G__17989 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__17989) : p.call(null, G__17989);
          } else {
            return and__4266__auto____$1;
          }
        } else {
          return and__4266__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__18151__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4266__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4266__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__4266__auto__;
          }
        }());
      };
      var G__18151 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18152__i = 0, G__18152__a = new Array(arguments.length - 3);
          while (G__18152__i < G__18152__a.length) {
            G__18152__a[G__18152__i] = arguments[G__18152__i + 3];
            ++G__18152__i;
          }
          args = new cljs.core.IndexedSeq(G__18152__a, 0);
        }
        return G__18151__delegate.call(this, x, y, z, args);
      };
      G__18151.cljs$lang$maxFixedArity = 3;
      G__18151.cljs$lang$applyTo = function(arglist__18153) {
        var x = cljs.core.first(arglist__18153);
        arglist__18153 = cljs.core.next(arglist__18153);
        var y = cljs.core.first(arglist__18153);
        arglist__18153 = cljs.core.next(arglist__18153);
        var z = cljs.core.first(arglist__18153);
        var args = cljs.core.rest(arglist__18153);
        return G__18151__delegate(x, y, z, args);
      };
      G__18151.cljs$core$IFn$_invoke$arity$variadic = G__18151__delegate;
      return G__18151;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__18154 = null;
          if (arguments.length > 3) {
            var G__18155__i = 0, G__18155__a = new Array(arguments.length - 3);
            while (G__18155__i < G__18155__a.length) {
              G__18155__a[G__18155__i] = arguments[G__18155__i + 3];
              ++G__18155__i;
            }
            G__18154 = new cljs.core.IndexedSeq(G__18155__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18154);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4266__auto__ = function() {
          var G__18021 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18021) : p1.call(null, G__18021);
        }();
        if (cljs.core.truth_(and__4266__auto__)) {
          var G__18022 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18022) : p2.call(null, G__18022);
        } else {
          return and__4266__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4266__auto__ = function() {
          var G__18024 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18024) : p1.call(null, G__18024);
        }();
        if (cljs.core.truth_(and__4266__auto__)) {
          var and__4266__auto____$1 = function() {
            var G__18026 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18026) : p1.call(null, G__18026);
          }();
          if (cljs.core.truth_(and__4266__auto____$1)) {
            var and__4266__auto____$2 = function() {
              var G__18028 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18028) : p2.call(null, G__18028);
            }();
            if (cljs.core.truth_(and__4266__auto____$2)) {
              var G__18029 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18029) : p2.call(null, G__18029);
            } else {
              return and__4266__auto____$2;
            }
          } else {
            return and__4266__auto____$1;
          }
        } else {
          return and__4266__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4266__auto__ = function() {
          var G__18031 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18031) : p1.call(null, G__18031);
        }();
        if (cljs.core.truth_(and__4266__auto__)) {
          var and__4266__auto____$1 = function() {
            var G__18033 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18033) : p1.call(null, G__18033);
          }();
          if (cljs.core.truth_(and__4266__auto____$1)) {
            var and__4266__auto____$2 = function() {
              var G__18035 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18035) : p1.call(null, G__18035);
            }();
            if (cljs.core.truth_(and__4266__auto____$2)) {
              var and__4266__auto____$3 = function() {
                var G__18037 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18037) : p2.call(null, G__18037);
              }();
              if (cljs.core.truth_(and__4266__auto____$3)) {
                var and__4266__auto____$4 = function() {
                  var G__18039 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18039) : p2.call(null, G__18039);
                }();
                if (cljs.core.truth_(and__4266__auto____$4)) {
                  var G__18040 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18040) : p2.call(null, G__18040);
                } else {
                  return and__4266__auto____$4;
                }
              } else {
                return and__4266__auto____$3;
              }
            } else {
              return and__4266__auto____$2;
            }
          } else {
            return and__4266__auto____$1;
          }
        } else {
          return and__4266__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__18156__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4266__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4266__auto__)) {
            return cljs.core.every_QMARK_(function(and__4266__auto__) {
              return function(p1__17954_SHARP_) {
                var and__4266__auto____$1 = function() {
                  var G__18042 = p1__17954_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18042) : p1.call(null, G__18042);
                }();
                if (cljs.core.truth_(and__4266__auto____$1)) {
                  var G__18043 = p1__17954_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18043) : p2.call(null, G__18043);
                } else {
                  return and__4266__auto____$1;
                }
              };
            }(and__4266__auto__), args);
          } else {
            return and__4266__auto__;
          }
        }());
      };
      var G__18156 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18157__i = 0, G__18157__a = new Array(arguments.length - 3);
          while (G__18157__i < G__18157__a.length) {
            G__18157__a[G__18157__i] = arguments[G__18157__i + 3];
            ++G__18157__i;
          }
          args = new cljs.core.IndexedSeq(G__18157__a, 0);
        }
        return G__18156__delegate.call(this, x, y, z, args);
      };
      G__18156.cljs$lang$maxFixedArity = 3;
      G__18156.cljs$lang$applyTo = function(arglist__18158) {
        var x = cljs.core.first(arglist__18158);
        arglist__18158 = cljs.core.next(arglist__18158);
        var y = cljs.core.first(arglist__18158);
        arglist__18158 = cljs.core.next(arglist__18158);
        var z = cljs.core.first(arglist__18158);
        var args = cljs.core.rest(arglist__18158);
        return G__18156__delegate(x, y, z, args);
      };
      G__18156.cljs$core$IFn$_invoke$arity$variadic = G__18156__delegate;
      return G__18156;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__18159 = null;
          if (arguments.length > 3) {
            var G__18160__i = 0, G__18160__a = new Array(arguments.length - 3);
            while (G__18160__i < G__18160__a.length) {
              G__18160__a[G__18160__i] = arguments[G__18160__i + 3];
              ++G__18160__i;
            }
            G__18159 = new cljs.core.IndexedSeq(G__18160__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18159);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4266__auto__ = function() {
          var G__18089 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18089) : p1.call(null, G__18089);
        }();
        if (cljs.core.truth_(and__4266__auto__)) {
          var and__4266__auto____$1 = function() {
            var G__18091 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18091) : p2.call(null, G__18091);
          }();
          if (cljs.core.truth_(and__4266__auto____$1)) {
            var G__18092 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18092) : p3.call(null, G__18092);
          } else {
            return and__4266__auto____$1;
          }
        } else {
          return and__4266__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4266__auto__ = function() {
          var G__18094 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18094) : p1.call(null, G__18094);
        }();
        if (cljs.core.truth_(and__4266__auto__)) {
          var and__4266__auto____$1 = function() {
            var G__18096 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18096) : p2.call(null, G__18096);
          }();
          if (cljs.core.truth_(and__4266__auto____$1)) {
            var and__4266__auto____$2 = function() {
              var G__18098 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18098) : p3.call(null, G__18098);
            }();
            if (cljs.core.truth_(and__4266__auto____$2)) {
              var and__4266__auto____$3 = function() {
                var G__18100 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18100) : p1.call(null, G__18100);
              }();
              if (cljs.core.truth_(and__4266__auto____$3)) {
                var and__4266__auto____$4 = function() {
                  var G__18102 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18102) : p2.call(null, G__18102);
                }();
                if (cljs.core.truth_(and__4266__auto____$4)) {
                  var G__18103 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18103) : p3.call(null, G__18103);
                } else {
                  return and__4266__auto____$4;
                }
              } else {
                return and__4266__auto____$3;
              }
            } else {
              return and__4266__auto____$2;
            }
          } else {
            return and__4266__auto____$1;
          }
        } else {
          return and__4266__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4266__auto__ = function() {
          var G__18105 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18105) : p1.call(null, G__18105);
        }();
        if (cljs.core.truth_(and__4266__auto__)) {
          var and__4266__auto____$1 = function() {
            var G__18107 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18107) : p2.call(null, G__18107);
          }();
          if (cljs.core.truth_(and__4266__auto____$1)) {
            var and__4266__auto____$2 = function() {
              var G__18109 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18109) : p3.call(null, G__18109);
            }();
            if (cljs.core.truth_(and__4266__auto____$2)) {
              var and__4266__auto____$3 = function() {
                var G__18111 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18111) : p1.call(null, G__18111);
              }();
              if (cljs.core.truth_(and__4266__auto____$3)) {
                var and__4266__auto____$4 = function() {
                  var G__18113 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18113) : p2.call(null, G__18113);
                }();
                if (cljs.core.truth_(and__4266__auto____$4)) {
                  var and__4266__auto____$5 = function() {
                    var G__18115 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18115) : p3.call(null, G__18115);
                  }();
                  if (cljs.core.truth_(and__4266__auto____$5)) {
                    var and__4266__auto____$6 = function() {
                      var G__18117 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18117) : p1.call(null, G__18117);
                    }();
                    if (cljs.core.truth_(and__4266__auto____$6)) {
                      var and__4266__auto____$7 = function() {
                        var G__18119 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18119) : p2.call(null, G__18119);
                      }();
                      if (cljs.core.truth_(and__4266__auto____$7)) {
                        var G__18120 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18120) : p3.call(null, G__18120);
                      } else {
                        return and__4266__auto____$7;
                      }
                    } else {
                      return and__4266__auto____$6;
                    }
                  } else {
                    return and__4266__auto____$5;
                  }
                } else {
                  return and__4266__auto____$4;
                }
              } else {
                return and__4266__auto____$3;
              }
            } else {
              return and__4266__auto____$2;
            }
          } else {
            return and__4266__auto____$1;
          }
        } else {
          return and__4266__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__18161__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4266__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4266__auto__)) {
            return cljs.core.every_QMARK_(function(and__4266__auto__) {
              return function(p1__17955_SHARP_) {
                var and__4266__auto____$1 = function() {
                  var G__18122 = p1__17955_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18122) : p1.call(null, G__18122);
                }();
                if (cljs.core.truth_(and__4266__auto____$1)) {
                  var and__4266__auto____$2 = function() {
                    var G__18124 = p1__17955_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18124) : p2.call(null, G__18124);
                  }();
                  if (cljs.core.truth_(and__4266__auto____$2)) {
                    var G__18125 = p1__17955_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18125) : p3.call(null, G__18125);
                  } else {
                    return and__4266__auto____$2;
                  }
                } else {
                  return and__4266__auto____$1;
                }
              };
            }(and__4266__auto__), args);
          } else {
            return and__4266__auto__;
          }
        }());
      };
      var G__18161 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18162__i = 0, G__18162__a = new Array(arguments.length - 3);
          while (G__18162__i < G__18162__a.length) {
            G__18162__a[G__18162__i] = arguments[G__18162__i + 3];
            ++G__18162__i;
          }
          args = new cljs.core.IndexedSeq(G__18162__a, 0);
        }
        return G__18161__delegate.call(this, x, y, z, args);
      };
      G__18161.cljs$lang$maxFixedArity = 3;
      G__18161.cljs$lang$applyTo = function(arglist__18163) {
        var x = cljs.core.first(arglist__18163);
        arglist__18163 = cljs.core.next(arglist__18163);
        var y = cljs.core.first(arglist__18163);
        arglist__18163 = cljs.core.next(arglist__18163);
        var z = cljs.core.first(arglist__18163);
        var args = cljs.core.rest(arglist__18163);
        return G__18161__delegate(x, y, z, args);
      };
      G__18161.cljs$core$IFn$_invoke$arity$variadic = G__18161__delegate;
      return G__18161;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__18164 = null;
          if (arguments.length > 3) {
            var G__18165__i = 0, G__18165__a = new Array(arguments.length - 3);
            while (G__18165__i < G__18165__a.length) {
              G__18165__a[G__18165__i] = arguments[G__18165__i + 3];
              ++G__18165__i;
            }
            G__18164 = new cljs.core.IndexedSeq(G__18165__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18164);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__17956_SHARP_) {
            var G__18141 = x;
            return p1__17956_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17956_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18141) : p1__17956_SHARP_.call(null, G__18141);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__17957_SHARP_) {
            var and__4266__auto__ = function() {
              var G__18143 = x;
              return p1__17957_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17957_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18143) : p1__17957_SHARP_.call(null, G__18143);
            }();
            if (cljs.core.truth_(and__4266__auto__)) {
              var G__18144 = y;
              return p1__17957_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17957_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18144) : p1__17957_SHARP_.call(null, G__18144);
            } else {
              return and__4266__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__17958_SHARP_) {
            var and__4266__auto__ = function() {
              var G__18146 = x;
              return p1__17958_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17958_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18146) : p1__17958_SHARP_.call(null, G__18146);
            }();
            if (cljs.core.truth_(and__4266__auto__)) {
              var and__4266__auto____$1 = function() {
                var G__18148 = y;
                return p1__17958_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17958_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18148) : p1__17958_SHARP_.call(null, G__18148);
              }();
              if (cljs.core.truth_(and__4266__auto____$1)) {
                var G__18149 = z;
                return p1__17958_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__17958_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18149) : p1__17958_SHARP_.call(null, G__18149);
              } else {
                return and__4266__auto____$1;
              }
            } else {
              return and__4266__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__18166__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__4266__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__4266__auto__)) {
              return cljs.core.every_QMARK_(function(and__4266__auto__, ps__$1) {
                return function(p1__17959_SHARP_) {
                  return cljs.core.every_QMARK_(p1__17959_SHARP_, args);
                };
              }(and__4266__auto__, ps__$1), ps__$1);
            } else {
              return and__4266__auto__;
            }
          }());
        };
        var G__18166 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__18167__i = 0, G__18167__a = new Array(arguments.length - 3);
            while (G__18167__i < G__18167__a.length) {
              G__18167__a[G__18167__i] = arguments[G__18167__i + 3];
              ++G__18167__i;
            }
            args = new cljs.core.IndexedSeq(G__18167__a, 0);
          }
          return G__18166__delegate.call(this, x, y, z, args);
        };
        G__18166.cljs$lang$maxFixedArity = 3;
        G__18166.cljs$lang$applyTo = function(arglist__18168) {
          var x = cljs.core.first(arglist__18168);
          arglist__18168 = cljs.core.next(arglist__18168);
          var y = cljs.core.first(arglist__18168);
          arglist__18168 = cljs.core.next(arglist__18168);
          var z = cljs.core.first(arglist__18168);
          var args = cljs.core.rest(arglist__18168);
          return G__18166__delegate(x, y, z, args);
        };
        G__18166.cljs$core$IFn$_invoke$arity$variadic = G__18166__delegate;
        return G__18166;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__18169 = null;
            if (arguments.length > 3) {
              var G__18170__i = 0, G__18170__a = new Array(arguments.length - 3);
              while (G__18170__i < G__18170__a.length) {
                G__18170__a[G__18170__i] = arguments[G__18170__i + 3];
                ++G__18170__i;
              }
              G__18169 = new cljs.core.IndexedSeq(G__18170__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18169);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq17960) {
  var G__17961 = cljs.core.first(seq17960);
  var seq17960__$1 = cljs.core.next(seq17960);
  var G__17962 = cljs.core.first(seq17960__$1);
  var seq17960__$2 = cljs.core.next(seq17960__$1);
  var G__17963 = cljs.core.first(seq17960__$2);
  var seq17960__$3 = cljs.core.next(seq17960__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__17961, G__17962, G__17963, seq17960__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn() {
  var G__18182 = arguments.length;
  switch(G__18182) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5329__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      var G__18198 = x;
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18198) : p.call(null, G__18198);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__4278__auto__ = function() {
        var G__18200 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18200) : p.call(null, G__18200);
      }();
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        var G__18201 = y;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18201) : p.call(null, G__18201);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__4278__auto__ = function() {
        var G__18203 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18203) : p.call(null, G__18203);
      }();
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = function() {
          var G__18205 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18205) : p.call(null, G__18205);
        }();
        if (cljs.core.truth_(or__4278__auto____$1)) {
          return or__4278__auto____$1;
        } else {
          var G__18206 = z;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__18206) : p.call(null, G__18206);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__18368__delegate = function(x, y, z, args) {
        var or__4278__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4278__auto__)) {
          return or__4278__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__18368 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18369__i = 0, G__18369__a = new Array(arguments.length - 3);
          while (G__18369__i < G__18369__a.length) {
            G__18369__a[G__18369__i] = arguments[G__18369__i + 3];
            ++G__18369__i;
          }
          args = new cljs.core.IndexedSeq(G__18369__a, 0);
        }
        return G__18368__delegate.call(this, x, y, z, args);
      };
      G__18368.cljs$lang$maxFixedArity = 3;
      G__18368.cljs$lang$applyTo = function(arglist__18370) {
        var x = cljs.core.first(arglist__18370);
        arglist__18370 = cljs.core.next(arglist__18370);
        var y = cljs.core.first(arglist__18370);
        arglist__18370 = cljs.core.next(arglist__18370);
        var z = cljs.core.first(arglist__18370);
        var args = cljs.core.rest(arglist__18370);
        return G__18368__delegate(x, y, z, args);
      };
      G__18368.cljs$core$IFn$_invoke$arity$variadic = G__18368__delegate;
      return G__18368;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__18371 = null;
          if (arguments.length > 3) {
            var G__18372__i = 0, G__18372__a = new Array(arguments.length - 3);
            while (G__18372__i < G__18372__a.length) {
              G__18372__a[G__18372__i] = arguments[G__18372__i + 3];
              ++G__18372__i;
            }
            G__18371 = new cljs.core.IndexedSeq(G__18372__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18371);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__4278__auto__ = function() {
        var G__18238 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18238) : p1.call(null, G__18238);
      }();
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        var G__18239 = x;
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18239) : p2.call(null, G__18239);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__4278__auto__ = function() {
        var G__18241 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18241) : p1.call(null, G__18241);
      }();
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = function() {
          var G__18243 = y;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18243) : p1.call(null, G__18243);
        }();
        if (cljs.core.truth_(or__4278__auto____$1)) {
          return or__4278__auto____$1;
        } else {
          var or__4278__auto____$2 = function() {
            var G__18245 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18245) : p2.call(null, G__18245);
          }();
          if (cljs.core.truth_(or__4278__auto____$2)) {
            return or__4278__auto____$2;
          } else {
            var G__18246 = y;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18246) : p2.call(null, G__18246);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__4278__auto__ = function() {
        var G__18248 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18248) : p1.call(null, G__18248);
      }();
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = function() {
          var G__18250 = y;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18250) : p1.call(null, G__18250);
        }();
        if (cljs.core.truth_(or__4278__auto____$1)) {
          return or__4278__auto____$1;
        } else {
          var or__4278__auto____$2 = function() {
            var G__18252 = z;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18252) : p1.call(null, G__18252);
          }();
          if (cljs.core.truth_(or__4278__auto____$2)) {
            return or__4278__auto____$2;
          } else {
            var or__4278__auto____$3 = function() {
              var G__18254 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18254) : p2.call(null, G__18254);
            }();
            if (cljs.core.truth_(or__4278__auto____$3)) {
              return or__4278__auto____$3;
            } else {
              var or__4278__auto____$4 = function() {
                var G__18256 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18256) : p2.call(null, G__18256);
              }();
              if (cljs.core.truth_(or__4278__auto____$4)) {
                return or__4278__auto____$4;
              } else {
                var G__18257 = z;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18257) : p2.call(null, G__18257);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__18373__delegate = function(x, y, z, args) {
        var or__4278__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4278__auto__)) {
          return or__4278__auto__;
        } else {
          return cljs.core.some(function(or__4278__auto__) {
            return function(p1__18171_SHARP_) {
              var or__4278__auto____$1 = function() {
                var G__18259 = p1__18171_SHARP_;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18259) : p1.call(null, G__18259);
              }();
              if (cljs.core.truth_(or__4278__auto____$1)) {
                return or__4278__auto____$1;
              } else {
                var G__18260 = p1__18171_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18260) : p2.call(null, G__18260);
              }
            };
          }(or__4278__auto__), args);
        }
      };
      var G__18373 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18374__i = 0, G__18374__a = new Array(arguments.length - 3);
          while (G__18374__i < G__18374__a.length) {
            G__18374__a[G__18374__i] = arguments[G__18374__i + 3];
            ++G__18374__i;
          }
          args = new cljs.core.IndexedSeq(G__18374__a, 0);
        }
        return G__18373__delegate.call(this, x, y, z, args);
      };
      G__18373.cljs$lang$maxFixedArity = 3;
      G__18373.cljs$lang$applyTo = function(arglist__18375) {
        var x = cljs.core.first(arglist__18375);
        arglist__18375 = cljs.core.next(arglist__18375);
        var y = cljs.core.first(arglist__18375);
        arglist__18375 = cljs.core.next(arglist__18375);
        var z = cljs.core.first(arglist__18375);
        var args = cljs.core.rest(arglist__18375);
        return G__18373__delegate(x, y, z, args);
      };
      G__18373.cljs$core$IFn$_invoke$arity$variadic = G__18373__delegate;
      return G__18373;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__18376 = null;
          if (arguments.length > 3) {
            var G__18377__i = 0, G__18377__a = new Array(arguments.length - 3);
            while (G__18377__i < G__18377__a.length) {
              G__18377__a[G__18377__i] = arguments[G__18377__i + 3];
              ++G__18377__i;
            }
            G__18376 = new cljs.core.IndexedSeq(G__18377__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18376);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__4278__auto__ = function() {
        var G__18306 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18306) : p1.call(null, G__18306);
      }();
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = function() {
          var G__18308 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18308) : p2.call(null, G__18308);
        }();
        if (cljs.core.truth_(or__4278__auto____$1)) {
          return or__4278__auto____$1;
        } else {
          var G__18309 = x;
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18309) : p3.call(null, G__18309);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__4278__auto__ = function() {
        var G__18311 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18311) : p1.call(null, G__18311);
      }();
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = function() {
          var G__18313 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18313) : p2.call(null, G__18313);
        }();
        if (cljs.core.truth_(or__4278__auto____$1)) {
          return or__4278__auto____$1;
        } else {
          var or__4278__auto____$2 = function() {
            var G__18315 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18315) : p3.call(null, G__18315);
          }();
          if (cljs.core.truth_(or__4278__auto____$2)) {
            return or__4278__auto____$2;
          } else {
            var or__4278__auto____$3 = function() {
              var G__18317 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18317) : p1.call(null, G__18317);
            }();
            if (cljs.core.truth_(or__4278__auto____$3)) {
              return or__4278__auto____$3;
            } else {
              var or__4278__auto____$4 = function() {
                var G__18319 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18319) : p2.call(null, G__18319);
              }();
              if (cljs.core.truth_(or__4278__auto____$4)) {
                return or__4278__auto____$4;
              } else {
                var G__18320 = y;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18320) : p3.call(null, G__18320);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__4278__auto__ = function() {
        var G__18322 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18322) : p1.call(null, G__18322);
      }();
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = function() {
          var G__18324 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18324) : p2.call(null, G__18324);
        }();
        if (cljs.core.truth_(or__4278__auto____$1)) {
          return or__4278__auto____$1;
        } else {
          var or__4278__auto____$2 = function() {
            var G__18326 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18326) : p3.call(null, G__18326);
          }();
          if (cljs.core.truth_(or__4278__auto____$2)) {
            return or__4278__auto____$2;
          } else {
            var or__4278__auto____$3 = function() {
              var G__18328 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18328) : p1.call(null, G__18328);
            }();
            if (cljs.core.truth_(or__4278__auto____$3)) {
              return or__4278__auto____$3;
            } else {
              var or__4278__auto____$4 = function() {
                var G__18330 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18330) : p2.call(null, G__18330);
              }();
              if (cljs.core.truth_(or__4278__auto____$4)) {
                return or__4278__auto____$4;
              } else {
                var or__4278__auto____$5 = function() {
                  var G__18332 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18332) : p3.call(null, G__18332);
                }();
                if (cljs.core.truth_(or__4278__auto____$5)) {
                  return or__4278__auto____$5;
                } else {
                  var or__4278__auto____$6 = function() {
                    var G__18334 = z;
                    return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18334) : p1.call(null, G__18334);
                  }();
                  if (cljs.core.truth_(or__4278__auto____$6)) {
                    return or__4278__auto____$6;
                  } else {
                    var or__4278__auto____$7 = function() {
                      var G__18336 = z;
                      return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18336) : p2.call(null, G__18336);
                    }();
                    if (cljs.core.truth_(or__4278__auto____$7)) {
                      return or__4278__auto____$7;
                    } else {
                      var G__18337 = z;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18337) : p3.call(null, G__18337);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__18378__delegate = function(x, y, z, args) {
        var or__4278__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4278__auto__)) {
          return or__4278__auto__;
        } else {
          return cljs.core.some(function(or__4278__auto__) {
            return function(p1__18172_SHARP_) {
              var or__4278__auto____$1 = function() {
                var G__18339 = p1__18172_SHARP_;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__18339) : p1.call(null, G__18339);
              }();
              if (cljs.core.truth_(or__4278__auto____$1)) {
                return or__4278__auto____$1;
              } else {
                var or__4278__auto____$2 = function() {
                  var G__18341 = p1__18172_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__18341) : p2.call(null, G__18341);
                }();
                if (cljs.core.truth_(or__4278__auto____$2)) {
                  return or__4278__auto____$2;
                } else {
                  var G__18342 = p1__18172_SHARP_;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__18342) : p3.call(null, G__18342);
                }
              }
            };
          }(or__4278__auto__), args);
        }
      };
      var G__18378 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__18379__i = 0, G__18379__a = new Array(arguments.length - 3);
          while (G__18379__i < G__18379__a.length) {
            G__18379__a[G__18379__i] = arguments[G__18379__i + 3];
            ++G__18379__i;
          }
          args = new cljs.core.IndexedSeq(G__18379__a, 0);
        }
        return G__18378__delegate.call(this, x, y, z, args);
      };
      G__18378.cljs$lang$maxFixedArity = 3;
      G__18378.cljs$lang$applyTo = function(arglist__18380) {
        var x = cljs.core.first(arglist__18380);
        arglist__18380 = cljs.core.next(arglist__18380);
        var y = cljs.core.first(arglist__18380);
        arglist__18380 = cljs.core.next(arglist__18380);
        var z = cljs.core.first(arglist__18380);
        var args = cljs.core.rest(arglist__18380);
        return G__18378__delegate(x, y, z, args);
      };
      G__18378.cljs$core$IFn$_invoke$arity$variadic = G__18378__delegate;
      return G__18378;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__18381 = null;
          if (arguments.length > 3) {
            var G__18382__i = 0, G__18382__a = new Array(arguments.length - 3);
            while (G__18382__i < G__18382__a.length) {
              G__18382__a[G__18382__i] = arguments[G__18382__i + 3];
              ++G__18382__i;
            }
            G__18381 = new cljs.core.IndexedSeq(G__18382__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18381);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__18173_SHARP_) {
            var G__18358 = x;
            return p1__18173_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18173_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18358) : p1__18173_SHARP_.call(null, G__18358);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__18174_SHARP_) {
            var or__4278__auto__ = function() {
              var G__18360 = x;
              return p1__18174_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18174_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18360) : p1__18174_SHARP_.call(null, G__18360);
            }();
            if (cljs.core.truth_(or__4278__auto__)) {
              return or__4278__auto__;
            } else {
              var G__18361 = y;
              return p1__18174_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18174_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18361) : p1__18174_SHARP_.call(null, G__18361);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__18175_SHARP_) {
            var or__4278__auto__ = function() {
              var G__18363 = x;
              return p1__18175_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18175_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18363) : p1__18175_SHARP_.call(null, G__18363);
            }();
            if (cljs.core.truth_(or__4278__auto__)) {
              return or__4278__auto__;
            } else {
              var or__4278__auto____$1 = function() {
                var G__18365 = y;
                return p1__18175_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18175_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18365) : p1__18175_SHARP_.call(null, G__18365);
              }();
              if (cljs.core.truth_(or__4278__auto____$1)) {
                return or__4278__auto____$1;
              } else {
                var G__18366 = z;
                return p1__18175_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__18175_SHARP_.cljs$core$IFn$_invoke$arity$1(G__18366) : p1__18175_SHARP_.call(null, G__18366);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__18383__delegate = function(x, y, z, args) {
          var or__4278__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4278__auto__)) {
            return or__4278__auto__;
          } else {
            return cljs.core.some(function(or__4278__auto__, ps__$1) {
              return function(p1__18176_SHARP_) {
                return cljs.core.some(p1__18176_SHARP_, args);
              };
            }(or__4278__auto__, ps__$1), ps__$1);
          }
        };
        var G__18383 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__18384__i = 0, G__18384__a = new Array(arguments.length - 3);
            while (G__18384__i < G__18384__a.length) {
              G__18384__a[G__18384__i] = arguments[G__18384__i + 3];
              ++G__18384__i;
            }
            args = new cljs.core.IndexedSeq(G__18384__a, 0);
          }
          return G__18383__delegate.call(this, x, y, z, args);
        };
        G__18383.cljs$lang$maxFixedArity = 3;
        G__18383.cljs$lang$applyTo = function(arglist__18385) {
          var x = cljs.core.first(arglist__18385);
          arglist__18385 = cljs.core.next(arglist__18385);
          var y = cljs.core.first(arglist__18385);
          arglist__18385 = cljs.core.next(arglist__18385);
          var z = cljs.core.first(arglist__18385);
          var args = cljs.core.rest(arglist__18385);
          return G__18383__delegate(x, y, z, args);
        };
        G__18383.cljs$core$IFn$_invoke$arity$variadic = G__18383__delegate;
        return G__18383;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__18386 = null;
            if (arguments.length > 3) {
              var G__18387__i = 0, G__18387__a = new Array(arguments.length - 3);
              while (G__18387__i < G__18387__a.length) {
                G__18387__a[G__18387__i] = arguments[G__18387__i + 3];
                ++G__18387__i;
              }
              G__18386 = new cljs.core.IndexedSeq(G__18387__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__18386);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq18177) {
  var G__18178 = cljs.core.first(seq18177);
  var seq18177__$1 = cljs.core.next(seq18177);
  var G__18179 = cljs.core.first(seq18177__$1);
  var seq18177__$2 = cljs.core.next(seq18177__$1);
  var G__18180 = cljs.core.first(seq18177__$2);
  var seq18177__$3 = cljs.core.next(seq18177__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__18178, G__18179, G__18180, seq18177__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map() {
  var G__18395 = arguments.length;
  switch(G__18395) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5329__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__18411 = null;
      var G__18411__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__18411__1 = function(result) {
        var G__18396 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18396) : rf.call(null, G__18396);
      };
      var G__18411__2 = function(result, input) {
        var G__18397 = result;
        var G__18398 = function() {
          var G__18399 = input;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18399) : f.call(null, G__18399);
        }();
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18397, G__18398) : rf.call(null, G__18397, G__18398);
      };
      var G__18411__3 = function() {
        var G__18412__delegate = function(result, input, inputs) {
          var G__18400 = result;
          var G__18401 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18400, G__18401) : rf.call(null, G__18400, G__18401);
        };
        var G__18412 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__18413__i = 0, G__18413__a = new Array(arguments.length - 2);
            while (G__18413__i < G__18413__a.length) {
              G__18413__a[G__18413__i] = arguments[G__18413__i + 2];
              ++G__18413__i;
            }
            inputs = new cljs.core.IndexedSeq(G__18413__a, 0);
          }
          return G__18412__delegate.call(this, result, input, inputs);
        };
        G__18412.cljs$lang$maxFixedArity = 2;
        G__18412.cljs$lang$applyTo = function(arglist__18414) {
          var result = cljs.core.first(arglist__18414);
          arglist__18414 = cljs.core.next(arglist__18414);
          var input = cljs.core.first(arglist__18414);
          var inputs = cljs.core.rest(arglist__18414);
          return G__18412__delegate(result, input, inputs);
        };
        G__18412.cljs$core$IFn$_invoke$arity$variadic = G__18412__delegate;
        return G__18412;
      }();
      G__18411 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__18411__0.call(this);
          case 1:
            return G__18411__1.call(this, result);
          case 2:
            return G__18411__2.call(this, result, input);
          default:
            var G__18415 = null;
            if (arguments.length > 2) {
              var G__18416__i = 0, G__18416__a = new Array(arguments.length - 2);
              while (G__18416__i < G__18416__a.length) {
                G__18416__a[G__18416__i] = arguments[G__18416__i + 2];
                ++G__18416__i;
              }
              G__18415 = new cljs.core.IndexedSeq(G__18416__a, 0);
            }
            return G__18411__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__18415);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18411.cljs$lang$maxFixedArity = 2;
      G__18411.cljs$lang$applyTo = G__18411__3.cljs$lang$applyTo;
      G__18411.cljs$core$IFn$_invoke$arity$0 = G__18411__0;
      G__18411.cljs$core$IFn$_invoke$arity$1 = G__18411__1;
      G__18411.cljs$core$IFn$_invoke$arity$2 = G__18411__2;
      G__18411.cljs$core$IFn$_invoke$arity$variadic = G__18411__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__18411;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5163__auto___18417 = size;
        var i_18418 = 0;
        while (true) {
          if (i_18418 < n__5163__auto___18417) {
            cljs.core.chunk_append(b, function() {
              var G__18402 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18418);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18402) : f.call(null, G__18402);
            }());
            var G__18419 = i_18418 + 1;
            i_18418 = G__18419;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__18403 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18403) : f.call(null, G__18403);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__18404 = cljs.core.first(s1);
        var G__18405 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18404, G__18405) : f.call(null, G__18404, G__18405);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__18406 = cljs.core.first(s1);
        var G__18407 = cljs.core.first(s2);
        var G__18408 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18406, G__18407, G__18408) : f.call(null, G__18406, G__18407, G__18408);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__18388_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__18388_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq18389) {
  var G__18390 = cljs.core.first(seq18389);
  var seq18389__$1 = cljs.core.next(seq18389);
  var G__18391 = cljs.core.first(seq18389__$1);
  var seq18389__$2 = cljs.core.next(seq18389__$1);
  var G__18392 = cljs.core.first(seq18389__$2);
  var seq18389__$3 = cljs.core.next(seq18389__$2);
  var G__18393 = cljs.core.first(seq18389__$3);
  var seq18389__$4 = cljs.core.next(seq18389__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__18390, G__18391, G__18392, G__18393, seq18389__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take() {
  var G__18421 = arguments.length;
  switch(G__18421) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__18426 = null;
        var G__18426__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__18426__1 = function(result) {
          var G__18422 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18422) : rf.call(null, G__18422);
        };
        var G__18426__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? function() {
            var G__18423 = result;
            var G__18424 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18423, G__18424) : rf.call(null, G__18423, G__18424);
          }() : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__18426 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18426__0.call(this);
            case 1:
              return G__18426__1.call(this, result);
            case 2:
              return G__18426__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18426.cljs$core$IFn$_invoke$arity$0 = G__18426__0;
        G__18426.cljs$core$IFn$_invoke$arity$1 = G__18426__1;
        G__18426.cljs$core$IFn$_invoke$arity$2 = G__18426__2;
        return G__18426;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4425__auto__ = cljs.core.seq(coll);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop() {
  var G__18428 = arguments.length;
  switch(G__18428) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__18433 = null;
        var G__18433__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__18433__1 = function(result) {
          var G__18429 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18429) : rf.call(null, G__18429);
        };
        var G__18433__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            var G__18430 = result;
            var G__18431 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18430, G__18431) : rf.call(null, G__18430, G__18431);
          }
        };
        G__18433 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18433__0.call(this);
            case 1:
              return G__18433__1.call(this, result);
            case 2:
              return G__18433__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18433.cljs$core$IFn$_invoke$arity$0 = G__18433__0;
        G__18433.cljs$core$IFn$_invoke$arity$1 = G__18433__1;
        G__18433.cljs$core$IFn$_invoke$arity$2 = G__18433__2;
        return G__18433;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__18434 = n__$1 - 1;
        var G__18435 = cljs.core.rest(s);
        n__$1 = G__18434;
        coll__$1 = G__18435;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last() {
  var G__18437 = arguments.length;
  switch(G__18437) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__18439 = cljs.core.next(s);
      var G__18440 = cljs.core.next(lead);
      s = G__18439;
      lead = G__18440;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while() {
  var G__18442 = arguments.length;
  switch(G__18442) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__18450 = null;
        var G__18450__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__18450__1 = function(result) {
          var G__18443 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18443) : rf.call(null, G__18443);
        };
        var G__18450__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__4266__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__4266__auto__)) {
              var G__18444 = input;
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18444) : pred.call(null, G__18444);
            } else {
              return and__4266__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            var G__18445 = result;
            var G__18446 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18445, G__18446) : rf.call(null, G__18445, G__18446);
          }
        };
        G__18450 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18450__0.call(this);
            case 1:
              return G__18450__1.call(this, result);
            case 2:
              return G__18450__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18450.cljs$core$IFn$_invoke$arity$0 = G__18450__0;
        G__18450.cljs$core$IFn$_invoke$arity$1 = G__18450__1;
        G__18450.cljs$core$IFn$_invoke$arity$2 = G__18450__2;
        return G__18450;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__4266__auto__ = s;
        if (and__4266__auto__) {
          var G__18448 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__18448) : pred__$1.call(null, G__18448);
        } else {
          return and__4266__auto__;
        }
      }())) {
        var G__18451 = pred__$1;
        var G__18452 = cljs.core.rest(s);
        pred__$1 = G__18451;
        coll__$1 = G__18452;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat() {
  var G__18455 = arguments.length;
  switch(G__18455) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly() {
  var G__18458 = arguments.length;
  switch(G__18458) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, function() {
      var G__18463 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18463) : f.call(null, G__18463);
    }());
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave() {
  var G__18468 = arguments.length;
  switch(G__18468) {
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq18464) {
  var G__18465 = cljs.core.first(seq18464);
  var seq18464__$1 = cljs.core.next(seq18464);
  var G__18466 = cljs.core.first(seq18464__$1);
  var seq18464__$2 = cljs.core.next(seq18464__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__18465, G__18466, seq18464__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose() {
  var G__18471 = arguments.length;
  switch(G__18471) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__18480 = null;
        var G__18480__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__18480__1 = function(result) {
          var G__18472 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18472) : rf.call(null, G__18472);
        };
        var G__18480__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = function() {
              var G__18473 = result;
              var G__18474 = sep;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18473, G__18474) : rf.call(null, G__18473, G__18474);
            }();
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              var G__18475 = sepr;
              var G__18476 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18475, G__18476) : rf.call(null, G__18475, G__18476);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            var G__18477 = result;
            var G__18478 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18477, G__18478) : rf.call(null, G__18477, G__18478);
          }
        };
        G__18480 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__18480__0.call(this);
            case 1:
              return G__18480__1.call(this, result);
            case 2:
              return G__18480__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__18480.cljs$core$IFn$_invoke$arity$0 = G__18480__0;
        G__18480.cljs$core$IFn$_invoke$arity$1 = G__18480__1;
        G__18480.cljs$core$IFn$_invoke$arity$2 = G__18480__2;
        return G__18480;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4423__auto__ = cljs.core.seq(coll);
      if (temp__4423__auto__) {
        var coll__$1 = temp__4423__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat() {
  var G__18492 = arguments.length;
  switch(G__18492) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5329__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq18489) {
  var G__18490 = cljs.core.first(seq18489);
  var seq18489__$1 = cljs.core.next(seq18489);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__18490, seq18489__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter() {
  var G__18495 = arguments.length;
  switch(G__18495) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__18503 = null;
      var G__18503__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__18503__1 = function(result) {
        var G__18496 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__18496) : rf.call(null, G__18496);
      };
      var G__18503__2 = function(result, input) {
        if (cljs.core.truth_(function() {
          var G__18497 = input;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18497) : pred.call(null, G__18497);
        }())) {
          var G__18498 = result;
          var G__18499 = input;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__18498, G__18499) : rf.call(null, G__18498, G__18499);
        } else {
          return result;
        }
      };
      G__18503 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__18503__0.call(this);
          case 1:
            return G__18503__1.call(this, result);
          case 2:
            return G__18503__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18503.cljs$core$IFn$_invoke$arity$0 = G__18503__0;
      G__18503.cljs$core$IFn$_invoke$arity$1 = G__18503__1;
      G__18503.cljs$core$IFn$_invoke$arity$2 = G__18503__2;
      return G__18503;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5163__auto___18504 = size;
        var i_18505 = 0;
        while (true) {
          if (i_18505 < n__5163__auto___18504) {
            if (cljs.core.truth_(function() {
              var G__18500 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18505);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18500) : pred.call(null, G__18500);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_18505));
            } else {
            }
            var G__18506 = i_18505 + 1;
            i_18505 = G__18506;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(function() {
          var G__18501 = f;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18501) : pred.call(null, G__18501);
        }())) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove() {
  var G__18508 = arguments.length;
  switch(G__18508) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__18516 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__18516) : branch_QMARK_.call(null, G__18516);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([function() {
        var G__18517 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__18517) : children.call(null, G__18517);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__18518_SHARP_) {
    return!cljs.core.sequential_QMARK_(p1__18518_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into() {
  var G__18520 = arguments.length;
  switch(G__18520) {
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__18521 = to;
      if (G__18521) {
        var bit__4945__auto__ = G__18521.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4945__auto__ || G__18521.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (function() {
    var G__18522 = to;
    if (G__18522) {
      var bit__4945__auto__ = G__18522.cljs$lang$protocol_mask$partition1$ & 4;
      if (bit__4945__auto__ || G__18522.cljs$core$IEditableCollection$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv() {
  var G__18530 = arguments.length;
  switch(G__18530) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5329__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
      var G__18531 = o;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18531) : f.call(null, G__18531);
    }());
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq18524) {
  var G__18525 = cljs.core.first(seq18524);
  var seq18524__$1 = cljs.core.next(seq18524);
  var G__18526 = cljs.core.first(seq18524__$1);
  var seq18524__$2 = cljs.core.next(seq18524__$1);
  var G__18527 = cljs.core.first(seq18524__$2);
  var seq18524__$3 = cljs.core.next(seq18524__$2);
  var G__18528 = cljs.core.first(seq18524__$3);
  var seq18524__$4 = cljs.core.next(seq18524__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__18525, G__18526, G__18527, G__18528, seq18524__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__18534 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__18534) : pred.call(null, G__18534);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition() {
  var G__18536 = arguments.length;
  switch(G__18536) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in() {
  var G__18539 = arguments.length;
  switch(G__18539) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (ks__$1) {
      if (!function() {
        var G__18540 = m__$1;
        if (G__18540) {
          var bit__4952__auto__ = G__18540.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4952__auto__ || G__18540.cljs$core$ILookup$) {
            return true;
          } else {
            if (!G__18540.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__18540);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__18540);
        }
      }()) {
        return not_found;
      } else {
        var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
        if (sentinel === m__$2) {
          return not_found;
        } else {
          var G__18542 = sentinel;
          var G__18543 = m__$2;
          var G__18544 = cljs.core.next(ks__$1);
          sentinel = G__18542;
          m__$1 = G__18543;
          ks__$1 = G__18544;
          continue;
        }
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__18545, v) {
  var vec__18550 = p__18545;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18550, 0, null);
  var ks = cljs.core.nthnext(vec__18550, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in() {
  var G__18559 = arguments.length;
  switch(G__18559) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5329__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__18560, f) {
  var vec__18561 = p__18560;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18561, 0, null);
  var ks = cljs.core.nthnext(vec__18561, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__18562 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18562) : f.call(null, G__18562);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__18563, f, a) {
  var vec__18564 = p__18563;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18564, 0, null);
  var ks = cljs.core.nthnext(vec__18564, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__18565 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__18566 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18565, G__18566) : f.call(null, G__18565, G__18566);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__18567, f, a, b) {
  var vec__18568 = p__18567;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18568, 0, null);
  var ks = cljs.core.nthnext(vec__18568, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__18569 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__18570 = a;
      var G__18571 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18569, G__18570, G__18571) : f.call(null, G__18569, G__18570, G__18571);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__18572, f, a, b, c) {
  var vec__18573 = p__18572;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18573, 0, null);
  var ks = cljs.core.nthnext(vec__18573, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__18574 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__18575 = a;
      var G__18576 = b;
      var G__18577 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18574, G__18575, G__18576, G__18577) : f.call(null, G__18574, G__18575, G__18576, G__18577);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__18578, f, a, b, c, args) {
  var vec__18579 = p__18578;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18579, 0, null);
  var ks = cljs.core.nthnext(vec__18579, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq18551) {
  var G__18552 = cljs.core.first(seq18551);
  var seq18551__$1 = cljs.core.next(seq18551);
  var G__18553 = cljs.core.first(seq18551__$1);
  var seq18551__$2 = cljs.core.next(seq18551__$1);
  var G__18554 = cljs.core.first(seq18551__$2);
  var seq18551__$3 = cljs.core.next(seq18551__$2);
  var G__18555 = cljs.core.first(seq18551__$3);
  var seq18551__$4 = cljs.core.next(seq18551__$3);
  var G__18556 = cljs.core.first(seq18551__$4);
  var seq18551__$5 = cljs.core.next(seq18551__$4);
  var G__18557 = cljs.core.first(seq18551__$5);
  var seq18551__$6 = cljs.core.next(seq18551__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__18552, G__18553, G__18554, G__18555, G__18556, G__18557, seq18551__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update() {
  var G__18589 = arguments.length;
  switch(G__18589) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5329__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__18590 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__18590) : f.call(null, G__18590);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__18591 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__18592 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18591, G__18592) : f.call(null, G__18591, G__18592);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__18593 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__18594 = x;
    var G__18595 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18593, G__18594, G__18595) : f.call(null, G__18593, G__18594, G__18595);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__18596 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__18597 = x;
    var G__18598 = y;
    var G__18599 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__18596, G__18597, G__18598, G__18599) : f.call(null, G__18596, G__18597, G__18598, G__18599);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq18581) {
  var G__18582 = cljs.core.first(seq18581);
  var seq18581__$1 = cljs.core.next(seq18581);
  var G__18583 = cljs.core.first(seq18581__$1);
  var seq18581__$2 = cljs.core.next(seq18581__$1);
  var G__18584 = cljs.core.first(seq18581__$2);
  var seq18581__$3 = cljs.core.next(seq18581__$2);
  var G__18585 = cljs.core.first(seq18581__$3);
  var seq18581__$4 = cljs.core.next(seq18581__$3);
  var G__18586 = cljs.core.first(seq18581__$4);
  var seq18581__$5 = cljs.core.next(seq18581__$4);
  var G__18587 = cljs.core.first(seq18581__$5);
  var seq18581__$6 = cljs.core.next(seq18581__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__18582, G__18583, G__18584, G__18585, G__18586, G__18587, seq18581__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__18601 = ll - 5;
      var G__18602 = r;
      ll = G__18601;
      ret = G__18602;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__18607 = cljs.core.pv_aget(node, 0);
      var G__18608 = level - 5;
      node = G__18607;
      level = G__18608;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__18609 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__18610 = level - 5;
        node = G__18609;
        level = G__18610;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__18620 = init__$2;
              var G__18621 = j + i;
              var G__18622 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18620, G__18621, G__18622) : f.call(null, G__18620, G__18621, G__18622);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__18633 = j + 1;
              var G__18634 = init__$3;
              j = G__18633;
              init__$2 = G__18634;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__18623 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18623) : cljs.core.deref.call(null, G__18623);
      } else {
        var G__18635 = i + len;
        var G__18636 = init__$2;
        i = G__18635;
        init__$1 = G__18636;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__18624 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__18624) : cljs.core.tv_editable_root.call(null, G__18624);
  }(), function() {
    var G__18625 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__18625) : cljs.core.tv_editable_tail.call(null, G__18625);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__18626 = init__$2;
              var G__18627 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18626, G__18627) : f.call(null, G__18626, G__18627);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__18637 = j + 1;
              var G__18638 = init__$3;
              j = G__18637;
              init__$2 = G__18638;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__18628 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18628) : cljs.core.deref.call(null, G__18628);
      } else {
        var G__18639 = i + len;
        var G__18640 = init__$2;
        i = G__18639;
        init__$1 = G__18640;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__18629 = coll__$1;
      var G__18630 = cljs.core.first_array_for_longvec(coll__$1);
      var G__18631 = 0;
      var G__18632 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18629, G__18630, G__18631, G__18632) : cljs.core.chunked_seq.call(null, G__18629, G__18630, G__18631, G__18632);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__5163__auto___18641 = len;
    var i_18642 = 0;
    while (true) {
      if (i_18642 < n__5163__auto___18641) {
        new_tail[i_18642] = self__.tail[i_18642];
        var G__18643 = i_18642 + 1;
        i_18642 = G__18643;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__18644 = null;
  var G__18644__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__18644__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__18644 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18644__2.call(this, self__, k);
      case 3:
        return G__18644__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18644.cljs$core$IFn$_invoke$arity$2 = G__18644__2;
  G__18644.cljs$core$IFn$_invoke$arity$3 = G__18644__3;
  return G__18644;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args18619) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18619)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__18645 = i + 1;
        var G__18646 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__18645;
        out = G__18646;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq18647) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq18647));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__18648 = self__.vec;
      var G__18649 = self__.node;
      var G__18650 = self__.i;
      var G__18651 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18648, G__18649, G__18650, G__18651) : cljs.core.chunked_seq.call(null, G__18648, G__18649, G__18650, G__18651);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__18652 = self__.vec;
    var G__18653 = self__.i + self__.off;
    var G__18654 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__18652, G__18653, G__18654) : cljs.core.subvec.call(null, G__18652, G__18653, G__18654);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__18655 = self__.vec;
    var G__18656 = self__.i + self__.off;
    var G__18657 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__18655, G__18656, G__18657) : cljs.core.subvec.call(null, G__18655, G__18656, G__18657);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__18658 = self__.vec;
      var G__18659 = self__.node;
      var G__18660 = self__.i;
      var G__18661 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18658, G__18659, G__18660, G__18661) : cljs.core.chunked_seq.call(null, G__18658, G__18659, G__18660, G__18661);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__18662 = self__.vec;
    var G__18663 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__18664 = end;
    var G__18665 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18662, G__18663, G__18664, G__18665) : cljs.core.chunked_seq.call(null, G__18662, G__18663, G__18664, G__18665);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__18666 = self__.vec;
  var G__18667 = self__.node;
  var G__18668 = self__.i;
  var G__18669 = self__.off;
  var G__18670 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__18666, G__18667, G__18668, G__18669, G__18670) : cljs.core.chunked_seq.call(null, G__18666, G__18667, G__18668, G__18669, G__18670);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__18671 = self__.vec;
    var G__18672 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__18673 = end;
    var G__18674 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__18671, G__18672, G__18673, G__18674) : cljs.core.chunked_seq.call(null, G__18671, G__18672, G__18673, G__18674);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq() {
  var G__18676 = arguments.length;
  switch(G__18676) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__18679 = init__$1;
        var G__18680 = j;
        var G__18681 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18679, G__18680, G__18681) : f.call(null, G__18679, G__18680, G__18681);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__18682 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18682) : cljs.core.deref.call(null, G__18682);
      } else {
        var G__18704 = i + 1;
        var G__18705 = j + 1;
        var G__18706 = init__$2;
        i = G__18704;
        j = G__18705;
        init__$1 = G__18706;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__18683 = self__.meta;
  var G__18684 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__18685 = self__.start;
  var G__18686 = function() {
    var x__4590__auto__ = self__.end;
    var y__4591__auto__ = v_pos + 1;
    return x__4590__auto__ > y__4591__auto__ ? x__4590__auto__ : y__4591__auto__;
  }();
  var G__18687 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__18683, G__18684, G__18685, G__18686, G__18687) : cljs.core.build_subvec.call(null, G__18683, G__18684, G__18685, G__18686, G__18687);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__18688 = self__.meta;
    var G__18689 = self__.v;
    var G__18690 = self__.start;
    var G__18691 = self__.end - 1;
    var G__18692 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__18688, G__18689, G__18690, G__18691, G__18692) : cljs.core.build_subvec.call(null, G__18688, G__18689, G__18690, G__18691, G__18692);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__18694 = meta__$1;
  var G__18695 = self__.v;
  var G__18696 = self__.start;
  var G__18697 = self__.end;
  var G__18698 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__18694, G__18695, G__18696, G__18697, G__18698) : cljs.core.build_subvec.call(null, G__18694, G__18695, G__18696, G__18697, G__18698);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__18699 = self__.meta;
  var G__18700 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__18701 = self__.start;
  var G__18702 = self__.end + 1;
  var G__18703 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__18699, G__18700, G__18701, G__18702, G__18703) : cljs.core.build_subvec.call(null, G__18699, G__18700, G__18701, G__18702, G__18703);
};
cljs.core.Subvec.prototype.call = function() {
  var G__18707 = null;
  var G__18707__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__18707__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__18707 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18707__2.call(this, self__, k);
      case 3:
        return G__18707__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18707.cljs$core$IFn$_invoke$arity$2 = G__18707__2;
  G__18707.cljs$core$IFn$_invoke$arity$3 = G__18707__3;
  return G__18707;
}();
cljs.core.Subvec.prototype.apply = function(self__, args18678) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18678)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__18708 = meta;
      var G__18709 = v.v;
      var G__18710 = v.start + start;
      var G__18711 = v.start + end;
      var G__18712 = __hash;
      meta = G__18708;
      v = G__18709;
      start = G__18710;
      end = G__18711;
      __hash = G__18712;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec() {
  var G__18714 = arguments.length;
  switch(G__18714) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj18719 = {};
    return obj18719;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__18727 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__18728 = level - 5;
        node = G__18727;
        level = G__18728;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__18732 = null;
  var G__18732__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18732__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18732 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18732__2.call(this, self__, k);
      case 3:
        return G__18732__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18732.cljs$core$IFn$_invoke$arity$2 = G__18732__2;
  G__18732.cljs$core$IFn$_invoke$arity$3 = G__18732__3;
  return G__18732;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args18729) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18729)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4423__auto__ = cljs.core.next(self__.front);
  if (temp__4423__auto__) {
    var f1 = temp__4423__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4423__auto__ = cljs.core.next(self__.front);
    if (temp__4423__auto__) {
      var f1 = temp__4423__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4278__auto__ = self__.front;
    if (cljs.core.truth_(or__4278__auto__)) {
      return or__4278__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4278__auto__ = self__.rear;
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__18733 = i + incr;
        i = G__18733;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__18734 = i + 1;
      var G__18735 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__18734;
      out = G__18735;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = function() {
    var obj18739 = {};
    return obj18739;
  }();
  var l = ks.length;
  var i_18740 = 0;
  while (true) {
    if (i_18740 < l) {
      var k_18741 = ks[i_18740];
      new_obj[k_18741] = obj[k_18741];
      var G__18742 = i_18740 + 1;
      i_18740 = G__18742;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4266__auto__ = function() {
      var G__18746 = k;
      return goog.isString(G__18746);
    }();
    if (cljs.core.truth_(and__4266__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4266__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__18747 = init__$1;
        var G__18748 = k;
        var G__18749 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18747, G__18748, G__18749) : f.call(null, G__18747, G__18748, G__18749);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__18750 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18750) : cljs.core.deref.call(null, G__18750);
      } else {
        var G__18756 = cljs.core.rest(keys__$1);
        var G__18757 = init__$2;
        keys__$1 = G__18756;
        init__$1 = G__18757;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4266__auto__ = function() {
      var G__18752 = k;
      return goog.isString(G__18752);
    }();
    if (cljs.core.truth_(and__4266__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4266__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__18753 = k;
    return goog.isString(G__18753);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4266__auto__ = function() {
      var G__18755 = k;
      return goog.isString(G__18755);
    }();
    if (cljs.core.truth_(and__4266__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4266__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__18743_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18743_SHARP_, self__.strobj[p1__18743_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__18758 = null;
  var G__18758__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18758__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18758 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18758__2.call(this, self__, k);
      case 3:
        return G__18758__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18758.cljs$core$IFn$_invoke$arity$2 = G__18758__2;
  G__18758.cljs$core$IFn$_invoke$arity$3 = G__18758__3;
  return G__18758;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args18744) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18744)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj18760 = {};
  return obj18760;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__18761 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18761, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18761, 1, null);
    self__.s = cljs.core.next(self__.s);
    return{"value":[k, v], "done":false};
  } else {
    return{"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"value":[x, x], "done":false};
  } else {
    return{"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__18762 = i + 2;
        i = G__18762;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__18763 = i + 2;
        i = G__18763;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__18764 = i + 2;
        i = G__18764;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__18765 = i + 2;
        i = G__18765;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__18766 = i + 2;
        i = G__18766;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__4278__auto__ = function() {
        var G__18770 = k;
        return goog.isString(G__18770);
      }();
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_18771 = 0;
  while (true) {
    if (i_18771 < l) {
      narr[i_18771] = arr[i_18771];
      var G__18772 = i_18771 + 1;
      i_18771 = G__18772;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__18774 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__18774) : cljs.core.keys.call(null, G__18774);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__18775 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__18775) : cljs.core.vals.call(null, G__18775);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__18776 = cljs.core.seq(coll);
  var chunk__18777 = null;
  var count__18778 = 0;
  var i__18779 = 0;
  while (true) {
    if (i__18779 < count__18778) {
      var vec__18780 = chunk__18777.cljs$core$IIndexed$_nth$arity$2(null, i__18779);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18780, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18780, 1, null);
      var G__18781_18794 = v;
      var G__18782_18795 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18781_18794, G__18782_18795) : f.call(null, G__18781_18794, G__18782_18795);
      var G__18796 = seq__18776;
      var G__18797 = chunk__18777;
      var G__18798 = count__18778;
      var G__18799 = i__18779 + 1;
      seq__18776 = G__18796;
      chunk__18777 = G__18797;
      count__18778 = G__18798;
      i__18779 = G__18799;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__18776);
      if (temp__4425__auto__) {
        var seq__18776__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__18776__$1)) {
          var c__5063__auto__ = cljs.core.chunk_first(seq__18776__$1);
          var G__18800 = cljs.core.chunk_rest(seq__18776__$1);
          var G__18801 = c__5063__auto__;
          var G__18802 = cljs.core.count(c__5063__auto__);
          var G__18803 = 0;
          seq__18776 = G__18800;
          chunk__18777 = G__18801;
          count__18778 = G__18802;
          i__18779 = G__18803;
          continue;
        } else {
          var vec__18783 = cljs.core.first(seq__18776__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18783, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18783, 1, null);
          var G__18784_18804 = v;
          var G__18785_18805 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18784_18804, G__18785_18805) : f.call(null, G__18784_18804, G__18785_18805);
          var G__18806 = cljs.core.next(seq__18776__$1);
          var G__18807 = null;
          var G__18808 = 0;
          var G__18809 = 0;
          seq__18776 = G__18806;
          chunk__18777 = G__18807;
          count__18778 = G__18808;
          i__18779 = G__18809;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__18786 = init__$1;
        var G__18787 = self__.arr[i];
        var G__18788 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18786, G__18787, G__18788) : f.call(null, G__18786, G__18787, G__18788);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__18789 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18789) : cljs.core.deref.call(null, G__18789);
      } else {
        var G__18810 = i + 2;
        var G__18811 = init__$2;
        i = G__18810;
        init__$1 = G__18811;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__18790 = other;
    if (G__18790) {
      var bit__4945__auto__ = G__18790.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4945__auto__ || G__18790.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__18812 = i + 2;
              i = G__18812;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj18792 = {};
    return obj18792;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__18813 = s + 2;
            var G__18814 = d;
            s = G__18813;
            d = G__18814;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__18815 = s + 2;
            var G__18816 = d + 2;
            s = G__18815;
            d = G__18816;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__18793 = cljs.core.aclone(self__.arr);
        G__18793[idx + 1] = v;
        return G__18793;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__18817 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__18818 = cljs.core.next(es);
          ret = G__18817;
          es = G__18818;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__18819 = null;
  var G__18819__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18819__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18819 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18819__2.call(this, self__, k);
      case 3:
        return G__18819__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18819.cljs$core$IFn$_invoke$arity$2 = G__18819__2;
  G__18819.cljs$core$IFn$_invoke$arity$3 = G__18819__3;
  return G__18819;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args18773) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18773)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_18820 = 0;
    while (true) {
      if (i_18820 < arr__$1.length) {
        var k_18821 = arr__$1[i_18820];
        var v_18822 = arr__$1[i_18820 + 1];
        var idx_18823 = cljs.core.array_index_of(ret, k_18821);
        if (idx_18823 === -1) {
          ret.push(k_18821);
          ret.push(v_18822);
        } else {
        }
        var G__18824 = i_18820 + 2;
        i_18820 = G__18824;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var arr__$3 = function() {
    var cnt = arr__$2.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
  }();
  return arr__$3;
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__18825 = o;
      if (G__18825) {
        var bit__4952__auto__ = G__18825.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4952__auto__ || G__18825.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__18825.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__18825);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__18825);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__18826 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__18826) : cljs.core.key.call(null, G__18826);
      }(), function() {
        var G__18827 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__18827) : cljs.core.val.call(null, G__18827);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4423__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          var G__18833 = cljs.core.next(es);
          var G__18834 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__18828 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__18828) : cljs.core.key.call(null, G__18828);
          }(), function() {
            var G__18829 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__18829) : cljs.core.val.call(null, G__18829);
          }());
          es = G__18833;
          tcoll__$2 = G__18834;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__18830 = self__.len;
          var G__18831 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__18830, G__18831) : cljs.core.array__GT_transient_hash_map.call(null, G__18830, G__18831);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__18832_18835 = self__.arr;
      G__18832_18835.pop();
      G__18832_18835.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__18836 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__18837 = i + 2;
      out = G__18836;
      i = G__18837;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set() {
  var G__18839 = arguments.length;
  switch(G__18839) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__18840 = cljs.core.aclone(arr);
  G__18840[i] = a;
  return G__18840;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__18841 = cljs.core.aclone(arr);
  G__18841[i] = a;
  G__18841[j] = b;
  return G__18841;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set() {
  var G__18844 = arguments.length;
  switch(G__18844) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__18850 = init__$1;
          var G__18851 = k;
          var G__18852 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18850, G__18851, G__18852) : f.call(null, G__18850, G__18851, G__18852);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__18853 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18853) : cljs.core.deref.call(null, G__18853);
      } else {
        var G__18854 = i + 2;
        var G__18855 = init__$2;
        i = G__18854;
        init__$1 = G__18855;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__18856 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__18856) : cljs.core.create_inode_seq.call(null, G__18856);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_18870 = 0;
        var j_18871 = 0;
        while (true) {
          if (i_18870 < 32) {
            if ((self__.bitmap >>> i_18870 & 1) === 0) {
              var G__18872 = i_18870 + 1;
              var G__18873 = j_18871;
              i_18870 = G__18872;
              j_18871 = G__18873;
              continue;
            } else {
              nodes[i_18870] = !(self__.arr[j_18871] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_18871]), self__.arr[j_18871], self__.arr[j_18871 + 1], added_leaf_QMARK_) : self__.arr[j_18871 + 1];
              var G__18874 = i_18870 + 1;
              var G__18875 = j_18871 + 2;
              i_18870 = G__18874;
              j_18871 = G__18875;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__18857 = edit__$1;
          var G__18858 = shift + 5;
          var G__18859 = key_or_nil;
          var G__18860 = val_or_node;
          var G__18861 = hash;
          var G__18862 = key;
          var G__18863 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__18857, G__18858, G__18859, G__18860, G__18861, G__18862, G__18863) : cljs.core.create_node.call(null, G__18857, G__18858, G__18859, G__18860, G__18861, G__18862, G__18863);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_18876 = 0;
      var j_18877 = 0;
      while (true) {
        if (i_18876 < 32) {
          if ((self__.bitmap >>> i_18876 & 1) === 0) {
            var G__18878 = i_18876 + 1;
            var G__18879 = j_18877;
            i_18876 = G__18878;
            j_18877 = G__18879;
            continue;
          } else {
            nodes[i_18876] = !(self__.arr[j_18877] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_18877]), self__.arr[j_18877], self__.arr[j_18877 + 1], added_leaf_QMARK_) : self__.arr[j_18877 + 1];
            var G__18880 = i_18876 + 1;
            var G__18881 = j_18877 + 2;
            i_18876 = G__18880;
            j_18877 = G__18881;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__18864 = shift + 5;
          var G__18865 = key_or_nil;
          var G__18866 = val_or_node;
          var G__18867 = hash;
          var G__18868 = key;
          var G__18869 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__18864, G__18865, G__18866, G__18867, G__18868, G__18869) : cljs.core.create_node.call(null, G__18864, G__18865, G__18866, G__18867, G__18868, G__18869);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__18882 = i + 1;
        var G__18883 = j + 2;
        var G__18884 = bitmap | 1 << i;
        i = G__18882;
        j = G__18883;
        bitmap = G__18884;
        continue;
      } else {
        var G__18885 = i + 1;
        var G__18886 = j;
        var G__18887 = bitmap;
        i = G__18885;
        j = G__18886;
        bitmap = G__18887;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__18888 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__18888) : cljs.core.create_array_node_seq.call(null, G__18888);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__18889 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18889) : cljs.core.deref.call(null, G__18889);
        } else {
          var G__18890 = i + 1;
          var G__18891 = init__$2;
          i = G__18890;
          init__$1 = G__18891;
          continue;
        }
      } else {
        var G__18892 = i + 1;
        var G__18893 = init__$1;
        i = G__18892;
        init__$1 = G__18893;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__18894 = i + 2;
        i = G__18894;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__18895 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__18895) : cljs.core.create_inode_seq.call(null, G__18895);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node() {
  var G__18897 = arguments.length;
  switch(G__18897) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__18899 = self__.nodes;
    var G__18900 = self__.i + 2;
    var G__18901 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__18899, G__18900, G__18901) : cljs.core.create_inode_seq.call(null, G__18899, G__18900, G__18901);
  } else {
    var G__18902 = self__.nodes;
    var G__18903 = self__.i;
    var G__18904 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__18902, G__18903, G__18904) : cljs.core.create_inode_seq.call(null, G__18902, G__18903, G__18904);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq() {
  var G__18906 = arguments.length;
  switch(G__18906) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4423__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4423__auto__)) {
            var node = temp__4423__auto__;
            var temp__4423__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4423__auto____$1)) {
              var node_seq = temp__4423__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__18908 = j + 2;
              j = G__18908;
              continue;
            }
          } else {
            var G__18909 = j + 2;
            j = G__18909;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__18910 = null;
  var G__18911 = self__.nodes;
  var G__18912 = self__.i;
  var G__18913 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__18910, G__18911, G__18912, G__18913) : cljs.core.create_array_node_seq.call(null, G__18910, G__18911, G__18912, G__18913);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq() {
  var G__18915 = arguments.length;
  switch(G__18915) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4423__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4423__auto__)) {
          var nj = temp__4423__auto__;
          var temp__4423__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4423__auto____$1)) {
            var ns = temp__4423__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__18917 = j + 1;
            j = G__18917;
            continue;
          }
        } else {
          var G__18918 = j + 1;
          j = G__18918;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__18920 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__18920) : cljs.core.keys.call(null, G__18920);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__18921 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__18921) : cljs.core.vals.call(null, G__18921);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__18922 = cljs.core.seq(coll);
  var chunk__18923 = null;
  var count__18924 = 0;
  var i__18925 = 0;
  while (true) {
    if (i__18925 < count__18924) {
      var vec__18926 = chunk__18923.cljs$core$IIndexed$_nth$arity$2(null, i__18925);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18926, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18926, 1, null);
      var G__18927_18938 = v;
      var G__18928_18939 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18927_18938, G__18928_18939) : f.call(null, G__18927_18938, G__18928_18939);
      var G__18940 = seq__18922;
      var G__18941 = chunk__18923;
      var G__18942 = count__18924;
      var G__18943 = i__18925 + 1;
      seq__18922 = G__18940;
      chunk__18923 = G__18941;
      count__18924 = G__18942;
      i__18925 = G__18943;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__18922);
      if (temp__4425__auto__) {
        var seq__18922__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__18922__$1)) {
          var c__5063__auto__ = cljs.core.chunk_first(seq__18922__$1);
          var G__18944 = cljs.core.chunk_rest(seq__18922__$1);
          var G__18945 = c__5063__auto__;
          var G__18946 = cljs.core.count(c__5063__auto__);
          var G__18947 = 0;
          seq__18922 = G__18944;
          chunk__18923 = G__18945;
          count__18924 = G__18946;
          i__18925 = G__18947;
          continue;
        } else {
          var vec__18929 = cljs.core.first(seq__18922__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18929, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18929, 1, null);
          var G__18930_18948 = v;
          var G__18931_18949 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__18930_18948, G__18931_18949) : f.call(null, G__18930_18948, G__18931_18949);
          var G__18950 = cljs.core.next(seq__18922__$1);
          var G__18951 = null;
          var G__18952 = 0;
          var G__18953 = 0;
          seq__18922 = G__18950;
          chunk__18923 = G__18951;
          count__18924 = G__18952;
          i__18925 = G__18953;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__18932 = init;
    var G__18933 = null;
    var G__18934 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18932, G__18933, G__18934) : f.call(null, G__18932, G__18933, G__18934);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__18935 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18935) : cljs.core.deref.call(null, G__18935);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj18937 = {};
    return obj18937;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__18954 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__18955 = cljs.core.next(es);
          ret = G__18954;
          es = G__18955;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__18956 = null;
  var G__18956__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18956__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18956 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18956__2.call(this, self__, k);
      case 3:
        return G__18956__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18956.cljs$core$IFn$_invoke$arity$2 = G__18956__2;
  G__18956.cljs$core$IFn$_invoke$arity$3 = G__18956__3;
  return G__18956;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args18919) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18919)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__18957 = i + 2;
      var G__18958 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__18957;
      ret = G__18958;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__18959 = i + 1;
      var G__18960 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__18959;
      out = G__18960;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__18961 = o;
      if (G__18961) {
        var bit__4952__auto__ = G__18961.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4952__auto__ || G__18961.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__18961.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__18961);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__18961);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__18962 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__18962) : cljs.core.key.call(null, G__18962);
      }(), function() {
        var G__18963 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__18963) : cljs.core.val.call(null, G__18963);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4423__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          var G__18966 = cljs.core.next(es);
          var G__18967 = tcoll__$1.assoc_BANG_(function() {
            var G__18964 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__18964) : cljs.core.key.call(null, G__18964);
          }(), function() {
            var G__18965 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__18965) : cljs.core.val.call(null, G__18965);
          }());
          es = G__18966;
          tcoll__$1 = G__18967;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__18968 = ascending_QMARK_ ? t.left : t.right;
      var G__18969 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__18968;
      stack__$1 = G__18969;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__18982 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18982) : cljs.core.deref.call(null, G__18982);
  } else {
    var init__$2 = function() {
      var G__18983 = init__$1;
      var G__18984 = node.key;
      var G__18985 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__18983, G__18984, G__18985) : f.call(null, G__18983, G__18984, G__18985);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__18986 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18986) : cljs.core.deref.call(null, G__18986);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__18987 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18987) : cljs.core.deref.call(null, G__18987);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__18989 = null;
  var G__18989__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18989__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18989 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18989__2.call(this, self__, k);
      case 3:
        return G__18989__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18989.cljs$core$IFn$_invoke$arity$2 = G__18989__2;
  G__18989.cljs$core$IFn$_invoke$arity$3 = G__18989__3;
  return G__18989;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args18988) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18988)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__18991 = null;
  var G__18991__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18991__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18991 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18991__2.call(this, self__, k);
      case 3:
        return G__18991__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18991.cljs$core$IFn$_invoke$arity$2 = G__18991__2;
  G__18991.cljs$core$IFn$_invoke$arity$3 = G__18991__3;
  return G__18991;
}();
cljs.core.RedNode.prototype.apply = function(self__, args18990) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18990)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__19004 = k;
      var G__19005 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__19004, G__19005) : comp.call(null, G__19004, G__19005);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__19024 = k;
      var G__19025 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__19024, G__19025) : comp.call(null, G__19024, G__19025);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__19036 = k;
    var G__19037 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__19036, G__19037) : comp.call(null, G__19036, G__19037);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__19039 = cljs.core.seq(coll);
  var chunk__19040 = null;
  var count__19041 = 0;
  var i__19042 = 0;
  while (true) {
    if (i__19042 < count__19041) {
      var vec__19043 = chunk__19040.cljs$core$IIndexed$_nth$arity$2(null, i__19042);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19043, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19043, 1, null);
      var G__19044_19056 = v;
      var G__19045_19057 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19044_19056, G__19045_19057) : f.call(null, G__19044_19056, G__19045_19057);
      var G__19058 = seq__19039;
      var G__19059 = chunk__19040;
      var G__19060 = count__19041;
      var G__19061 = i__19042 + 1;
      seq__19039 = G__19058;
      chunk__19040 = G__19059;
      count__19041 = G__19060;
      i__19042 = G__19061;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__19039);
      if (temp__4425__auto__) {
        var seq__19039__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19039__$1)) {
          var c__5063__auto__ = cljs.core.chunk_first(seq__19039__$1);
          var G__19062 = cljs.core.chunk_rest(seq__19039__$1);
          var G__19063 = c__5063__auto__;
          var G__19064 = cljs.core.count(c__5063__auto__);
          var G__19065 = 0;
          seq__19039 = G__19062;
          chunk__19040 = G__19063;
          count__19041 = G__19064;
          i__19042 = G__19065;
          continue;
        } else {
          var vec__19046 = cljs.core.first(seq__19039__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19046, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19046, 1, null);
          var G__19047_19066 = v;
          var G__19048_19067 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19047_19066, G__19048_19067) : f.call(null, G__19047_19066, G__19048_19067);
          var G__19068 = cljs.core.next(seq__19039__$1);
          var G__19069 = null;
          var G__19070 = 0;
          var G__19071 = 0;
          seq__19039 = G__19068;
          chunk__19040 = G__19069;
          count__19041 = G__19070;
          i__19042 = G__19071;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__19049 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__19049) : cljs.core.keys.call(null, G__19049);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__19050 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__19050) : cljs.core.vals.call(null, G__19050);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__19051 = k;
        var G__19052 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__19051, G__19052) : self__.comp.call(null, G__19051, G__19052);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__19072 = t.left;
          t = G__19072;
          continue;
        } else {
          var G__19073 = t.right;
          t = G__19073;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__19074 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__19075 = cljs.core.next(es);
          ret = G__19074;
          es = G__19075;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__19076 = null;
  var G__19076__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19076__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19076 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19076__2.call(this, self__, k);
      case 3:
        return G__19076__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19076.cljs$core$IFn$_invoke$arity$2 = G__19076__2;
  G__19076.cljs$core$IFn$_invoke$arity$3 = G__19076__3;
  return G__19076;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args19038) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19038)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__19053 = k;
          var G__19054 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__19053, G__19054) : self__.comp.call(null, G__19053, G__19054);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__19077 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__19078 = t.left;
              stack = G__19077;
              t = G__19078;
              continue;
            } else {
              var G__19079 = stack;
              var G__19080 = t.right;
              stack = G__19079;
              t = G__19080;
              continue;
            }
          } else {
            if (c > 0) {
              var G__19081 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__19082 = t.right;
              stack = G__19081;
              t = G__19082;
              continue;
            } else {
              var G__19083 = stack;
              var G__19084 = t.left;
              stack = G__19083;
              t = G__19084;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__19055 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__19055) : cljs.core.key.call(null, G__19055);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__19086 = cljs.core.nnext(in$);
      var G__19087 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__19086;
      out = G__19087;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq19085) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19085));
};
cljs.core.array_map = function cljs$core$array_map() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.fromArray(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq19088) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19088));
};
cljs.core.obj_map = function cljs$core$obj_map() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = function() {
    var obj19091 = {};
    return obj19091;
  }();
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__19092 = cljs.core.nnext(kvs);
      kvs = G__19092;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq19089) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19089));
};
cljs.core.sorted_map = function cljs$core$sorted_map() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__19094 = cljs.core.nnext(in$);
      var G__19095 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__19094;
      out = G__19095;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq19093) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19093));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by() {
  var argseq__5318__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5318__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__19098 = cljs.core.nnext(in$);
      var G__19099 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__19098;
      out = G__19099;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq19096) {
  var G__19097 = cljs.core.first(seq19096);
  var seq19096__$1 = cljs.core.next(seq19096);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__19097, seq19096__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__19100 = self__.mseq;
    if (G__19100) {
      var bit__4952__auto__ = G__19100.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4952__auto__ || G__19100.cljs$core$INext$) {
        return true;
      } else {
        if (!G__19100.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19100);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19100);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__19101 = self__.mseq;
    if (G__19101) {
      var bit__4952__auto__ = G__19101.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4952__auto__ || G__19101.cljs$core$INext$) {
        return true;
      } else {
        if (!G__19101.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19101);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19101);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4425__auto__ = cljs.core.seq(hash_map);
  if (temp__4425__auto__) {
    var mseq = temp__4425__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__19102 = self__.mseq;
    if (G__19102) {
      var bit__4952__auto__ = G__19102.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4952__auto__ || G__19102.cljs$core$INext$) {
        return true;
      } else {
        if (!G__19102.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19102);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19102);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__19103 = self__.mseq;
    if (G__19103) {
      var bit__4952__auto__ = G__19103.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4952__auto__ || G__19103.cljs$core$INext$) {
        return true;
      } else {
        if (!G__19103.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19103);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__19103);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4425__auto__ = cljs.core.seq(hash_map);
  if (temp__4425__auto__) {
    var mseq = temp__4425__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__19104_SHARP_, p2__19105_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__4278__auto__ = p1__19104_SHARP_;
        if (cljs.core.truth_(or__4278__auto__)) {
          return or__4278__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__19105_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq19106) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19106));
};
cljs.core.merge_with = function cljs$core$merge_with() {
  var argseq__5318__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5318__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__19109 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__19110 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19109, G__19110) : f.call(null, G__19109, G__19110);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__4278__auto__ = m1;
          if (cljs.core.truth_(or__4278__auto__)) {
            return or__4278__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq19107) {
  var G__19108 = cljs.core.first(seq19107);
  var seq19107__$1 = cljs.core.next(seq19107);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__19108, seq19107__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__19111 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__19112 = cljs.core.next(keys);
      ret = G__19111;
      keys = G__19112;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__19115 = cljs.core.seq(coll);
  var chunk__19116 = null;
  var count__19117 = 0;
  var i__19118 = 0;
  while (true) {
    if (i__19118 < count__19117) {
      var vec__19119 = chunk__19116.cljs$core$IIndexed$_nth$arity$2(null, i__19118);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19119, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19119, 1, null);
      var G__19120_19125 = v;
      var G__19121_19126 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19120_19125, G__19121_19126) : f.call(null, G__19120_19125, G__19121_19126);
      var G__19127 = seq__19115;
      var G__19128 = chunk__19116;
      var G__19129 = count__19117;
      var G__19130 = i__19118 + 1;
      seq__19115 = G__19127;
      chunk__19116 = G__19128;
      count__19117 = G__19129;
      i__19118 = G__19130;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__19115);
      if (temp__4425__auto__) {
        var seq__19115__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19115__$1)) {
          var c__5063__auto__ = cljs.core.chunk_first(seq__19115__$1);
          var G__19131 = cljs.core.chunk_rest(seq__19115__$1);
          var G__19132 = c__5063__auto__;
          var G__19133 = cljs.core.count(c__5063__auto__);
          var G__19134 = 0;
          seq__19115 = G__19131;
          chunk__19116 = G__19132;
          count__19117 = G__19133;
          i__19118 = G__19134;
          continue;
        } else {
          var vec__19122 = cljs.core.first(seq__19115__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19122, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19122, 1, null);
          var G__19123_19135 = v;
          var G__19124_19136 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19123_19135, G__19124_19136) : f.call(null, G__19123_19135, G__19124_19136);
          var G__19137 = cljs.core.next(seq__19115__$1);
          var G__19138 = null;
          var G__19139 = 0;
          var G__19140 = 0;
          seq__19115 = G__19137;
          chunk__19116 = G__19138;
          count__19117 = G__19139;
          i__19118 = G__19140;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__19113_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__19113_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__19141 = null;
  var G__19141__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19141__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19141 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19141__2.call(this, self__, k);
      case 3:
        return G__19141__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19141.cljs$core$IFn$_invoke$arity$2 = G__19141__2;
  G__19141.cljs$core$IFn$_invoke$arity$3 = G__19141__3;
  return G__19141;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args19114) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19114)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__19142 = i + 1;
        var G__19143 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__19142;
        out = G__19143;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__19144 = i + 1;
        var G__19145 = cljs.core._conj_BANG_(out, items[i]);
        i = G__19144;
        out = G__19145;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__19147 = null;
  var G__19147__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__19147__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__19147 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19147__2.call(this, self__, k);
      case 3:
        return G__19147__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19147.cljs$core$IFn$_invoke$arity$2 = G__19147__2;
  G__19147.cljs$core$IFn$_invoke$arity$3 = G__19147__3;
  return G__19147;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args19146) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19146)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__19150 = cljs.core.seq(coll);
  var chunk__19151 = null;
  var count__19152 = 0;
  var i__19153 = 0;
  while (true) {
    if (i__19153 < count__19152) {
      var vec__19154 = chunk__19151.cljs$core$IIndexed$_nth$arity$2(null, i__19153);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19154, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19154, 1, null);
      var G__19155_19160 = v;
      var G__19156_19161 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19155_19160, G__19156_19161) : f.call(null, G__19155_19160, G__19156_19161);
      var G__19162 = seq__19150;
      var G__19163 = chunk__19151;
      var G__19164 = count__19152;
      var G__19165 = i__19153 + 1;
      seq__19150 = G__19162;
      chunk__19151 = G__19163;
      count__19152 = G__19164;
      i__19153 = G__19165;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__19150);
      if (temp__4425__auto__) {
        var seq__19150__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19150__$1)) {
          var c__5063__auto__ = cljs.core.chunk_first(seq__19150__$1);
          var G__19166 = cljs.core.chunk_rest(seq__19150__$1);
          var G__19167 = c__5063__auto__;
          var G__19168 = cljs.core.count(c__5063__auto__);
          var G__19169 = 0;
          seq__19150 = G__19166;
          chunk__19151 = G__19167;
          count__19152 = G__19168;
          i__19153 = G__19169;
          continue;
        } else {
          var vec__19157 = cljs.core.first(seq__19150__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19157, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19157, 1, null);
          var G__19158_19170 = v;
          var G__19159_19171 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19158_19170, G__19159_19171) : f.call(null, G__19158_19170, G__19159_19171);
          var G__19172 = cljs.core.next(seq__19150__$1);
          var G__19173 = null;
          var G__19174 = 0;
          var G__19175 = 0;
          seq__19150 = G__19172;
          chunk__19151 = G__19173;
          count__19152 = G__19174;
          i__19153 = G__19175;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__19148_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__19148_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__19176 = null;
  var G__19176__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__19176__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__19176 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__19176__2.call(this, self__, k);
      case 3:
        return G__19176__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__19176.cljs$core$IFn$_invoke$arity$2 = G__19176__2;
  G__19176.cljs$core$IFn$_invoke$arity$3 = G__19176__3;
  return G__19176;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args19149) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19149)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__5157__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__5157__auto__.length) {
        var G__19177 = i + 1;
        var G__19178 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__19177;
        res = G__19178;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__19179 = in$__$1.cljs$core$INext$_next$arity$1(null);
          var G__19180 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__19179;
          out = G__19180;
          continue;
        } else {
          return out.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set() {
  var G__19183 = arguments.length;
  switch(G__19183) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5329__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq19181) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19181));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq19185) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19185));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by() {
  var argseq__5318__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5318__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq19186) {
  var G__19187 = cljs.core.first(seq19186);
  var seq19186__$1 = cljs.core.next(seq19186);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__19187, seq19186__$1);
};
cljs.core.replace = function cljs$core$replace() {
  var G__19191 = arguments.length;
  switch(G__19191) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__19188_SHARP_) {
    var temp__4423__auto__ = cljs.core.find(smap, p1__19188_SHARP_);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var e = temp__4423__auto__;
      return cljs.core.val(e);
    } else {
      return p1__19188_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4423__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__19189_SHARP_) {
      var temp__4423__auto__ = cljs.core.find(smap, p1__19189_SHARP_);
      if (cljs.core.truth_(temp__4423__auto__)) {
        var e = temp__4423__auto__;
        return cljs.core.second(e);
      } else {
        return p1__19189_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct() {
  var G__19194 = arguments.length;
  switch(G__19194) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__19206 = null;
        var G__19206__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19206__1 = function(result) {
          var G__19195 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19195) : rf.call(null, G__19195);
        };
        var G__19206__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(function() {
            var G__19196 = seen;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19196) : cljs.core.deref.call(null, G__19196);
          }(), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            var G__19197 = result;
            var G__19198 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19197, G__19198) : rf.call(null, G__19197, G__19198);
          }
        };
        G__19206 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__19206__0.call(this);
            case 1:
              return G__19206__1.call(this, result);
            case 2:
              return G__19206__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19206.cljs$core$IFn$_invoke$arity$0 = G__19206__0;
        G__19206.cljs$core$IFn$_invoke$arity$1 = G__19206__1;
        G__19206.cljs$core$IFn$_invoke$arity$2 = G__19206__2;
        return G__19206;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__19203, seen__$1) {
        while (true) {
          var vec__19204 = p__19203;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19204, 0, null);
          var xs__$1 = vec__19204;
          var temp__4425__auto__ = cljs.core.seq(xs__$1);
          if (temp__4425__auto__) {
            var s = temp__4425__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__19207 = cljs.core.rest(s);
              var G__19208 = seen__$1;
              p__19203 = G__19207;
              seen__$1 = G__19208;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__19209 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__19210 = cljs.core.next(s__$1);
      ret = G__19209;
      s__$1 = G__19210;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (function() {
    var G__19212 = x;
    if (G__19212) {
      var bit__4945__auto__ = G__19212.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4945__auto__ || G__19212.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__19213 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__19214 = cljs.core.next(ks);
      var G__19215 = cljs.core.next(vs);
      map = G__19213;
      ks = G__19214;
      vs = G__19215;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key() {
  var G__19223 = arguments.length;
  switch(G__19223) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5329__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if (function() {
    var G__19224 = x;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__19224) : k.call(null, G__19224);
  }() > function() {
    var G__19225 = y;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__19225) : k.call(null, G__19225);
  }()) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__19216_SHARP_, p2__19217_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__19216_SHARP_, p2__19217_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq19218) {
  var G__19219 = cljs.core.first(seq19218);
  var seq19218__$1 = cljs.core.next(seq19218);
  var G__19220 = cljs.core.first(seq19218__$1);
  var seq19218__$2 = cljs.core.next(seq19218__$1);
  var G__19221 = cljs.core.first(seq19218__$2);
  var seq19218__$3 = cljs.core.next(seq19218__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__19219, G__19220, G__19221, seq19218__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key() {
  var G__19234 = arguments.length;
  switch(G__19234) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5329__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if (function() {
    var G__19235 = x;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__19235) : k.call(null, G__19235);
  }() < function() {
    var G__19236 = y;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__19236) : k.call(null, G__19236);
  }()) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__19227_SHARP_, p2__19228_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__19227_SHARP_, p2__19228_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq19229) {
  var G__19230 = cljs.core.first(seq19229);
  var seq19229__$1 = cljs.core.next(seq19229);
  var G__19231 = cljs.core.first(seq19229__$1);
  var seq19229__$2 = cljs.core.next(seq19229__$1);
  var G__19232 = cljs.core.first(seq19229__$2);
  var seq19229__$3 = cljs.core.next(seq19229__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__19230, G__19231, G__19232, seq19229__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all() {
  var G__19239 = arguments.length;
  switch(G__19239) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__19246 = null;
        var G__19246__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19246__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(function() {
              var G__19240 = result;
              var G__19241 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19240, G__19241) : rf.call(null, G__19240, G__19241);
            }());
          }();
          var G__19242 = result__$1;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19242) : rf.call(null, G__19242);
        };
        var G__19246__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var G__19243 = result;
            var G__19244 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19243, G__19244) : rf.call(null, G__19243, G__19244);
          } else {
            return result;
          }
        };
        G__19246 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__19246__0.call(this);
            case 1:
              return G__19246__1.call(this, result);
            case 2:
              return G__19246__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19246.cljs$core$IFn$_invoke$arity$0 = G__19246__0;
        G__19246.cljs$core$IFn$_invoke$arity$1 = G__19246__1;
        G__19246.cljs$core$IFn$_invoke$arity$2 = G__19246__2;
        return G__19246;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while() {
  var G__19248 = arguments.length;
  switch(G__19248) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__19255 = null;
      var G__19255__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__19255__1 = function(result) {
        var G__19249 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19249) : rf.call(null, G__19249);
      };
      var G__19255__2 = function(result, input) {
        if (cljs.core.truth_(function() {
          var G__19250 = input;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__19250) : pred.call(null, G__19250);
        }())) {
          var G__19251 = result;
          var G__19252 = input;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19251, G__19252) : rf.call(null, G__19251, G__19252);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__19255 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__19255__0.call(this);
          case 1:
            return G__19255__1.call(this, result);
          case 2:
            return G__19255__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19255.cljs$core$IFn$_invoke$arity$0 = G__19255__0;
      G__19255.cljs$core$IFn$_invoke$arity$1 = G__19255__1;
      G__19255.cljs$core$IFn$_invoke$arity$2 = G__19255__2;
      return G__19255;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.truth_(function() {
        var G__19253 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__19253) : pred.call(null, G__19253);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__19260 = function() {
      var G__19262 = cljs.core._entry_key(sc, e);
      var G__19263 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__19262, G__19263) : comp.call(null, G__19262, G__19263);
    }();
    var G__19261 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__19260, G__19261) : test.call(null, G__19260, G__19261);
  };
};
cljs.core.subseq = function cljs$core$subseq() {
  var G__19265 = arguments.length;
  switch(G__19265) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var vec__19266 = temp__4425__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19266, 0, null);
      var s = vec__19266;
      if (cljs.core.truth_(function() {
        var G__19267 = e;
        return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__19267) : include.call(null, G__19267);
      }())) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var vec__19268 = temp__4425__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19268, 0, null);
    var s = vec__19268;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq() {
  var G__19271 = arguments.length;
  switch(G__19271) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var vec__19272 = temp__4425__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19272, 0, null);
      var s = vec__19272;
      if (cljs.core.truth_(function() {
        var G__19273 = e;
        return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__19273) : include.call(null, G__19273);
      }())) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var vec__19274 = temp__4425__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19274, 0, null);
    var s = vec__19274;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__19276 = (self__.end - self__.start) / self__.step;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__19276) : Math.ceil.call(null, G__19276);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__19277 = ret;
        var G__19278 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19277, G__19278) : f.call(null, G__19277, G__19278);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__19279 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19279) : cljs.core.deref.call(null, G__19279);
      } else {
        var G__19280 = i + self__.step;
        var G__19281 = ret__$1;
        i = G__19280;
        ret = G__19281;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.range = function cljs$core$range() {
  var G__19283 = arguments.length;
  switch(G__19283) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth() {
  var G__19286 = arguments.length;
  switch(G__19286) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__19291 = null;
        var G__19291__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19291__1 = function(result) {
          var G__19287 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19287) : rf.call(null, G__19287);
        };
        var G__19291__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            var G__19288 = result;
            var G__19289 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19288, G__19289) : rf.call(null, G__19288, G__19289);
          } else {
            return result;
          }
        };
        G__19291 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__19291__0.call(this);
            case 1:
              return G__19291__1.call(this, result);
            case 2:
              return G__19291__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19291.cljs$core$IFn$_invoke$arity$0 = G__19291__0;
        G__19291.cljs$core$IFn$_invoke$arity$1 = G__19291__1;
        G__19291.cljs$core$IFn$_invoke$arity$2 = G__19291__2;
        return G__19291;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by() {
  var G__19294 = arguments.length;
  switch(G__19294) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__19305 = null;
        var G__19305__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19305__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(function() {
              var G__19295 = result;
              var G__19296 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19295, G__19296) : rf.call(null, G__19295, G__19296);
            }());
          }();
          var G__19297 = result__$1;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19297) : rf.call(null, G__19297);
        };
        var G__19305__2 = function(result, input) {
          var pval = function() {
            var G__19298 = pa;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19298) : cljs.core.deref.call(null, G__19298);
          }();
          var val = function() {
            var G__19299 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19299) : f.call(null, G__19299);
          }();
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = function() {
              var G__19300 = result;
              var G__19301 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19300, G__19301) : rf.call(null, G__19300, G__19301);
            }();
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__19305 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__19305__0.call(this);
            case 1:
              return G__19305__1.call(this, result);
            case 2:
              return G__19305__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19305.cljs$core$IFn$_invoke$arity$0 = G__19305__0;
        G__19305.cljs$core$IFn$_invoke$arity$1 = G__19305__1;
        G__19305.cljs$core$IFn$_invoke$arity$2 = G__19305__2;
        return G__19305;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var fst = cljs.core.first(s);
      var fv = function() {
        var G__19302 = fst;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19302) : f.call(null, G__19302);
      }();
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4425__auto__) {
        return function(p1__19292_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
            var G__19303 = p1__19292_SHARP_;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19303) : f.call(null, G__19303);
          }());
        };
      }(fst, fv, s, temp__4425__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions() {
  var G__19307 = arguments.length;
  switch(G__19307) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
        var G__19308 = init;
        var G__19309 = cljs.core.first(s);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19308, G__19309) : f.call(null, G__19308, G__19309);
      }(), cljs.core.rest(s));
    } else {
      return null;
    }
  }, null, null));
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt() {
  var G__19326 = arguments.length;
  switch(G__19326) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5329__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__19370 = null;
    var G__19370__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }()], null);
    };
    var G__19370__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19327 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19327) : f.call(null, G__19327);
      }()], null);
    };
    var G__19370__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19328 = x;
        var G__19329 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19328, G__19329) : f.call(null, G__19328, G__19329);
      }()], null);
    };
    var G__19370__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19330 = x;
        var G__19331 = y;
        var G__19332 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19330, G__19331, G__19332) : f.call(null, G__19330, G__19331, G__19332);
      }()], null);
    };
    var G__19370__4 = function() {
      var G__19371__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__19371 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__19372__i = 0, G__19372__a = new Array(arguments.length - 3);
          while (G__19372__i < G__19372__a.length) {
            G__19372__a[G__19372__i] = arguments[G__19372__i + 3];
            ++G__19372__i;
          }
          args = new cljs.core.IndexedSeq(G__19372__a, 0);
        }
        return G__19371__delegate.call(this, x, y, z, args);
      };
      G__19371.cljs$lang$maxFixedArity = 3;
      G__19371.cljs$lang$applyTo = function(arglist__19373) {
        var x = cljs.core.first(arglist__19373);
        arglist__19373 = cljs.core.next(arglist__19373);
        var y = cljs.core.first(arglist__19373);
        arglist__19373 = cljs.core.next(arglist__19373);
        var z = cljs.core.first(arglist__19373);
        var args = cljs.core.rest(arglist__19373);
        return G__19371__delegate(x, y, z, args);
      };
      G__19371.cljs$core$IFn$_invoke$arity$variadic = G__19371__delegate;
      return G__19371;
    }();
    G__19370 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__19370__0.call(this);
        case 1:
          return G__19370__1.call(this, x);
        case 2:
          return G__19370__2.call(this, x, y);
        case 3:
          return G__19370__3.call(this, x, y, z);
        default:
          var G__19374 = null;
          if (arguments.length > 3) {
            var G__19375__i = 0, G__19375__a = new Array(arguments.length - 3);
            while (G__19375__i < G__19375__a.length) {
              G__19375__a[G__19375__i] = arguments[G__19375__i + 3];
              ++G__19375__i;
            }
            G__19374 = new cljs.core.IndexedSeq(G__19375__a, 0);
          }
          return G__19370__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19374);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19370.cljs$lang$maxFixedArity = 3;
    G__19370.cljs$lang$applyTo = G__19370__4.cljs$lang$applyTo;
    G__19370.cljs$core$IFn$_invoke$arity$0 = G__19370__0;
    G__19370.cljs$core$IFn$_invoke$arity$1 = G__19370__1;
    G__19370.cljs$core$IFn$_invoke$arity$2 = G__19370__2;
    G__19370.cljs$core$IFn$_invoke$arity$3 = G__19370__3;
    G__19370.cljs$core$IFn$_invoke$arity$variadic = G__19370__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__19370;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__19376 = null;
    var G__19376__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }()], null);
    };
    var G__19376__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19333 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19333) : f.call(null, G__19333);
      }(), function() {
        var G__19334 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__19334) : g.call(null, G__19334);
      }()], null);
    };
    var G__19376__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19335 = x;
        var G__19336 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19335, G__19336) : f.call(null, G__19335, G__19336);
      }(), function() {
        var G__19337 = x;
        var G__19338 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__19337, G__19338) : g.call(null, G__19337, G__19338);
      }()], null);
    };
    var G__19376__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19339 = x;
        var G__19340 = y;
        var G__19341 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19339, G__19340, G__19341) : f.call(null, G__19339, G__19340, G__19341);
      }(), function() {
        var G__19342 = x;
        var G__19343 = y;
        var G__19344 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__19342, G__19343, G__19344) : g.call(null, G__19342, G__19343, G__19344);
      }()], null);
    };
    var G__19376__4 = function() {
      var G__19377__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__19377 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__19378__i = 0, G__19378__a = new Array(arguments.length - 3);
          while (G__19378__i < G__19378__a.length) {
            G__19378__a[G__19378__i] = arguments[G__19378__i + 3];
            ++G__19378__i;
          }
          args = new cljs.core.IndexedSeq(G__19378__a, 0);
        }
        return G__19377__delegate.call(this, x, y, z, args);
      };
      G__19377.cljs$lang$maxFixedArity = 3;
      G__19377.cljs$lang$applyTo = function(arglist__19379) {
        var x = cljs.core.first(arglist__19379);
        arglist__19379 = cljs.core.next(arglist__19379);
        var y = cljs.core.first(arglist__19379);
        arglist__19379 = cljs.core.next(arglist__19379);
        var z = cljs.core.first(arglist__19379);
        var args = cljs.core.rest(arglist__19379);
        return G__19377__delegate(x, y, z, args);
      };
      G__19377.cljs$core$IFn$_invoke$arity$variadic = G__19377__delegate;
      return G__19377;
    }();
    G__19376 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__19376__0.call(this);
        case 1:
          return G__19376__1.call(this, x);
        case 2:
          return G__19376__2.call(this, x, y);
        case 3:
          return G__19376__3.call(this, x, y, z);
        default:
          var G__19380 = null;
          if (arguments.length > 3) {
            var G__19381__i = 0, G__19381__a = new Array(arguments.length - 3);
            while (G__19381__i < G__19381__a.length) {
              G__19381__a[G__19381__i] = arguments[G__19381__i + 3];
              ++G__19381__i;
            }
            G__19380 = new cljs.core.IndexedSeq(G__19381__a, 0);
          }
          return G__19376__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19380);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19376.cljs$lang$maxFixedArity = 3;
    G__19376.cljs$lang$applyTo = G__19376__4.cljs$lang$applyTo;
    G__19376.cljs$core$IFn$_invoke$arity$0 = G__19376__0;
    G__19376.cljs$core$IFn$_invoke$arity$1 = G__19376__1;
    G__19376.cljs$core$IFn$_invoke$arity$2 = G__19376__2;
    G__19376.cljs$core$IFn$_invoke$arity$3 = G__19376__3;
    G__19376.cljs$core$IFn$_invoke$arity$variadic = G__19376__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__19376;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__19382 = null;
    var G__19382__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }(), function() {
        return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
      }()], null);
    };
    var G__19382__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19345 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19345) : f.call(null, G__19345);
      }(), function() {
        var G__19346 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__19346) : g.call(null, G__19346);
      }(), function() {
        var G__19347 = x;
        return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__19347) : h.call(null, G__19347);
      }()], null);
    };
    var G__19382__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19348 = x;
        var G__19349 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__19348, G__19349) : f.call(null, G__19348, G__19349);
      }(), function() {
        var G__19350 = x;
        var G__19351 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__19350, G__19351) : g.call(null, G__19350, G__19351);
      }(), function() {
        var G__19352 = x;
        var G__19353 = y;
        return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__19352, G__19353) : h.call(null, G__19352, G__19353);
      }()], null);
    };
    var G__19382__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__19354 = x;
        var G__19355 = y;
        var G__19356 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__19354, G__19355, G__19356) : f.call(null, G__19354, G__19355, G__19356);
      }(), function() {
        var G__19357 = x;
        var G__19358 = y;
        var G__19359 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__19357, G__19358, G__19359) : g.call(null, G__19357, G__19358, G__19359);
      }(), function() {
        var G__19360 = x;
        var G__19361 = y;
        var G__19362 = z;
        return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__19360, G__19361, G__19362) : h.call(null, G__19360, G__19361, G__19362);
      }()], null);
    };
    var G__19382__4 = function() {
      var G__19383__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__19383 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__19384__i = 0, G__19384__a = new Array(arguments.length - 3);
          while (G__19384__i < G__19384__a.length) {
            G__19384__a[G__19384__i] = arguments[G__19384__i + 3];
            ++G__19384__i;
          }
          args = new cljs.core.IndexedSeq(G__19384__a, 0);
        }
        return G__19383__delegate.call(this, x, y, z, args);
      };
      G__19383.cljs$lang$maxFixedArity = 3;
      G__19383.cljs$lang$applyTo = function(arglist__19385) {
        var x = cljs.core.first(arglist__19385);
        arglist__19385 = cljs.core.next(arglist__19385);
        var y = cljs.core.first(arglist__19385);
        arglist__19385 = cljs.core.next(arglist__19385);
        var z = cljs.core.first(arglist__19385);
        var args = cljs.core.rest(arglist__19385);
        return G__19383__delegate(x, y, z, args);
      };
      G__19383.cljs$core$IFn$_invoke$arity$variadic = G__19383__delegate;
      return G__19383;
    }();
    G__19382 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__19382__0.call(this);
        case 1:
          return G__19382__1.call(this, x);
        case 2:
          return G__19382__2.call(this, x, y);
        case 3:
          return G__19382__3.call(this, x, y, z);
        default:
          var G__19386 = null;
          if (arguments.length > 3) {
            var G__19387__i = 0, G__19387__a = new Array(arguments.length - 3);
            while (G__19387__i < G__19387__a.length) {
              G__19387__a[G__19387__i] = arguments[G__19387__i + 3];
              ++G__19387__i;
            }
            G__19386 = new cljs.core.IndexedSeq(G__19387__a, 0);
          }
          return G__19382__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19386);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__19382.cljs$lang$maxFixedArity = 3;
    G__19382.cljs$lang$applyTo = G__19382__4.cljs$lang$applyTo;
    G__19382.cljs$core$IFn$_invoke$arity$0 = G__19382__0;
    G__19382.cljs$core$IFn$_invoke$arity$1 = G__19382__1;
    G__19382.cljs$core$IFn$_invoke$arity$2 = G__19382__2;
    G__19382.cljs$core$IFn$_invoke$arity$3 = G__19382__3;
    G__19382.cljs$core$IFn$_invoke$arity$variadic = G__19382__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__19382;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__19388 = null;
      var G__19388__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__19311_SHARP_, p2__19312_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19311_SHARP_, function() {
              return p2__19312_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__19312_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__19312_SHARP_.call(null);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__19388__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__19313_SHARP_, p2__19314_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19313_SHARP_, function() {
              var G__19363 = x;
              return p2__19314_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__19314_SHARP_.cljs$core$IFn$_invoke$arity$1(G__19363) : p2__19314_SHARP_.call(null, G__19363);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__19388__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__19315_SHARP_, p2__19316_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19315_SHARP_, function() {
              var G__19364 = x;
              var G__19365 = y;
              return p2__19316_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__19316_SHARP_.cljs$core$IFn$_invoke$arity$2(G__19364, G__19365) : p2__19316_SHARP_.call(null, G__19364, G__19365);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__19388__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__19317_SHARP_, p2__19318_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19317_SHARP_, function() {
              var G__19366 = x;
              var G__19367 = y;
              var G__19368 = z;
              return p2__19318_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__19318_SHARP_.cljs$core$IFn$_invoke$arity$3(G__19366, G__19367, G__19368) : p2__19318_SHARP_.call(null, G__19366, G__19367, G__19368);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__19388__4 = function() {
        var G__19389__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__19319_SHARP_, p2__19320_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__19319_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__19320_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__19389 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__19390__i = 0, G__19390__a = new Array(arguments.length - 3);
            while (G__19390__i < G__19390__a.length) {
              G__19390__a[G__19390__i] = arguments[G__19390__i + 3];
              ++G__19390__i;
            }
            args = new cljs.core.IndexedSeq(G__19390__a, 0);
          }
          return G__19389__delegate.call(this, x, y, z, args);
        };
        G__19389.cljs$lang$maxFixedArity = 3;
        G__19389.cljs$lang$applyTo = function(arglist__19391) {
          var x = cljs.core.first(arglist__19391);
          arglist__19391 = cljs.core.next(arglist__19391);
          var y = cljs.core.first(arglist__19391);
          arglist__19391 = cljs.core.next(arglist__19391);
          var z = cljs.core.first(arglist__19391);
          var args = cljs.core.rest(arglist__19391);
          return G__19389__delegate(x, y, z, args);
        };
        G__19389.cljs$core$IFn$_invoke$arity$variadic = G__19389__delegate;
        return G__19389;
      }();
      G__19388 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__19388__0.call(this);
          case 1:
            return G__19388__1.call(this, x);
          case 2:
            return G__19388__2.call(this, x, y);
          case 3:
            return G__19388__3.call(this, x, y, z);
          default:
            var G__19392 = null;
            if (arguments.length > 3) {
              var G__19393__i = 0, G__19393__a = new Array(arguments.length - 3);
              while (G__19393__i < G__19393__a.length) {
                G__19393__a[G__19393__i] = arguments[G__19393__i + 3];
                ++G__19393__i;
              }
              G__19392 = new cljs.core.IndexedSeq(G__19393__a, 0);
            }
            return G__19388__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__19392);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19388.cljs$lang$maxFixedArity = 3;
      G__19388.cljs$lang$applyTo = G__19388__4.cljs$lang$applyTo;
      G__19388.cljs$core$IFn$_invoke$arity$0 = G__19388__0;
      G__19388.cljs$core$IFn$_invoke$arity$1 = G__19388__1;
      G__19388.cljs$core$IFn$_invoke$arity$2 = G__19388__2;
      G__19388.cljs$core$IFn$_invoke$arity$3 = G__19388__3;
      G__19388.cljs$core$IFn$_invoke$arity$variadic = G__19388__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__19388;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq19321) {
  var G__19322 = cljs.core.first(seq19321);
  var seq19321__$1 = cljs.core.next(seq19321);
  var G__19323 = cljs.core.first(seq19321__$1);
  var seq19321__$2 = cljs.core.next(seq19321__$1);
  var G__19324 = cljs.core.first(seq19321__$2);
  var seq19321__$3 = cljs.core.next(seq19321__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__19322, G__19323, G__19324, seq19321__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun() {
  var G__19395 = arguments.length;
  switch(G__19395) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__19397 = cljs.core.next(coll);
      coll = G__19397;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__19398 = n - 1;
      var G__19399 = cljs.core.next(coll);
      n = G__19398;
      coll = G__19399;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall() {
  var G__19401 = arguments.length;
  switch(G__19401) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__19406 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19406, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19406, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__4278__auto__ = flags;
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_19414 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4278__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4278__auto__)) {
              return or__4278__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__19415_19421 = cljs.core.first(coll);
          var G__19416_19422 = writer;
          var G__19417_19423 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__19415_19421, G__19416_19422, G__19417_19423) : print_one.call(null, G__19415_19421, G__19416_19422, G__19417_19423);
        } else {
        }
        var coll_19424__$1 = cljs.core.next(coll);
        var n_19425 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_19424__$1 && (n_19425 == null || !(n_19425 === 0))) {
            cljs.core._write(writer, sep);
            var G__19418_19426 = cljs.core.first(coll_19424__$1);
            var G__19419_19427 = writer;
            var G__19420_19428 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__19418_19426, G__19419_19427, G__19420_19428) : print_one.call(null, G__19418_19426, G__19419_19427, G__19420_19428);
            var G__19429 = cljs.core.next(coll_19424__$1);
            var G__19430 = n_19425 - 1;
            coll_19424__$1 = G__19429;
            n_19425 = G__19430;
            continue;
          } else {
            if (cljs.core.seq(coll_19424__$1) && n_19425 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4278__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4278__auto__)) {
                  return or__4278__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_19414;
  }
};
cljs.core.write_all = function cljs$core$write_all() {
  var argseq__5318__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5318__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__19433 = cljs.core.seq(ss);
  var chunk__19434 = null;
  var count__19435 = 0;
  var i__19436 = 0;
  while (true) {
    if (i__19436 < count__19435) {
      var s = chunk__19434.cljs$core$IIndexed$_nth$arity$2(null, i__19436);
      cljs.core._write(writer, s);
      var G__19437 = seq__19433;
      var G__19438 = chunk__19434;
      var G__19439 = count__19435;
      var G__19440 = i__19436 + 1;
      seq__19433 = G__19437;
      chunk__19434 = G__19438;
      count__19435 = G__19439;
      i__19436 = G__19440;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__19433);
      if (temp__4425__auto__) {
        var seq__19433__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19433__$1)) {
          var c__5063__auto__ = cljs.core.chunk_first(seq__19433__$1);
          var G__19441 = cljs.core.chunk_rest(seq__19433__$1);
          var G__19442 = c__5063__auto__;
          var G__19443 = cljs.core.count(c__5063__auto__);
          var G__19444 = 0;
          seq__19433 = G__19441;
          chunk__19434 = G__19442;
          count__19435 = G__19443;
          i__19436 = G__19444;
          continue;
        } else {
          var s = cljs.core.first(seq__19433__$1);
          cljs.core._write(writer, s);
          var G__19445 = cljs.core.next(seq__19433__$1);
          var G__19446 = null;
          var G__19447 = 0;
          var G__19448 = 0;
          seq__19433 = G__19445;
          chunk__19434 = G__19446;
          count__19435 = G__19447;
          i__19436 = G__19448;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq19431) {
  var G__19432 = cljs.core.first(seq19431);
  var seq19431__$1 = cljs.core.next(seq19431);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__19432, seq19431__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj19450 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj19450;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__19453 = '[\\\\"\b\f\n\r\t]';
    var G__19454 = "g";
    return RegExp(G__19453, G__19454);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__4266__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__4266__auto__)) {
          var and__4266__auto____$1 = function() {
            var G__19468 = obj;
            if (G__19468) {
              var bit__4952__auto__ = G__19468.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4952__auto__ || G__19468.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__19468.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__19468);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__19468);
            }
          }();
          if (and__4266__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__4266__auto____$1;
          }
        } else {
          return and__4266__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__19469_19479 = cljs.core.meta(obj);
        var G__19470_19480 = writer;
        var G__19471_19481 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__19469_19479, G__19470_19480, G__19471_19481) : cljs.core.pr_writer.call(null, G__19469_19479, G__19470_19480, G__19471_19481);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__19472 = obj;
            if (G__19472) {
              var bit__4945__auto__ = G__19472.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4945__auto__ || G__19472.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__19473 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__19474 = cljs.core.pr_writer;
                var G__19475 = writer;
                var G__19476 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__19473, G__19474, G__19475, G__19476) : cljs.core.print_map.call(null, G__19473, G__19474, G__19475, G__19476);
              } else {
                if (cljs.core.array_QMARK_(obj)) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__19477 = obj;
                    return goog.isString(G__19477);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__19482 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__19482;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.truth_(cljs.core.regexp_QMARK_(obj))) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__19478 = obj;
                            if (G__19478) {
                              var bit__4952__auto__ = G__19478.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4952__auto__ || G__19478.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__19478.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__19478);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__19478);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4423__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var alt_impl = temp__4423__auto__;
    var G__19486 = obj;
    var G__19487 = writer;
    var G__19488 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__19486, G__19487, G__19488) : alt_impl.call(null, G__19486, G__19487, G__19488);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__19493 = cljs.core.seq(cljs.core.next(objs));
  var chunk__19494 = null;
  var count__19495 = 0;
  var i__19496 = 0;
  while (true) {
    if (i__19496 < count__19495) {
      var obj = chunk__19494.cljs$core$IIndexed$_nth$arity$2(null, i__19496);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__19497 = seq__19493;
      var G__19498 = chunk__19494;
      var G__19499 = count__19495;
      var G__19500 = i__19496 + 1;
      seq__19493 = G__19497;
      chunk__19494 = G__19498;
      count__19495 = G__19499;
      i__19496 = G__19500;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__19493);
      if (temp__4425__auto__) {
        var seq__19493__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__19493__$1)) {
          var c__5063__auto__ = cljs.core.chunk_first(seq__19493__$1);
          var G__19501 = cljs.core.chunk_rest(seq__19493__$1);
          var G__19502 = c__5063__auto__;
          var G__19503 = cljs.core.count(c__5063__auto__);
          var G__19504 = 0;
          seq__19493 = G__19501;
          chunk__19494 = G__19502;
          count__19495 = G__19503;
          i__19496 = G__19504;
          continue;
        } else {
          var obj = cljs.core.first(seq__19493__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__19505 = cljs.core.next(seq__19493__$1);
          var G__19506 = null;
          var G__19507 = 0;
          var G__19508 = 0;
          seq__19493 = G__19505;
          chunk__19494 = G__19506;
          count__19495 = G__19507;
          i__19496 = G__19508;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function cljs$core$pr_str() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq19509) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19509));
};
cljs.core.prn_str = function cljs$core$prn_str() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq19510) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19510));
};
cljs.core.pr = function cljs$core$pr() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq19511) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19511));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__19512__i = 0, G__19512__a = new Array(arguments.length - 0);
      while (G__19512__i < G__19512__a.length) {
        G__19512__a[G__19512__i] = arguments[G__19512__i + 0];
        ++G__19512__i;
      }
      objs = new cljs.core.IndexedSeq(G__19512__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__19513) {
    var objs = cljs.core.seq(arglist__19513);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq19514) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19514));
};
cljs.core.println = function cljs$core$println() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq19515) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19515));
};
cljs.core.println_str = function cljs$core$println_str() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq19516) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19516));
};
cljs.core.prn = function cljs$core$prn() {
  var argseq__5318__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__5318__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq19517) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq19517));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__19524_19530 = cljs.core.key(e);
    var G__19525_19531 = w;
    var G__19526_19532 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__19524_19530, G__19525_19531, G__19526_19532) : print_one.call(null, G__19524_19530, G__19525_19531, G__19526_19532);
    cljs.core._write(w, " ");
    var G__19527 = cljs.core.val(e);
    var G__19528 = w;
    var G__19529 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__19527, G__19528, G__19529) : print_one.call(null, G__19527, G__19528, G__19529);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_() {
  var argseq__5318__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5318__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq19533) {
  var G__19534 = cljs.core.first(seq19533);
  var seq19533__$1 = cljs.core.next(seq19533);
  var G__19535 = cljs.core.first(seq19533__$1);
  var seq19533__$2 = cljs.core.next(seq19533__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__19534, G__19535, seq19533__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym() {
  var G__19537 = arguments.length;
  switch(G__19537) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = function() {
      var G__19538 = 0;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__19538) : cljs.core.atom.call(null, G__19538);
    }();
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__19541 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19541) : cljs.core.deref.call(null, G__19541);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__19542_SHARP_, p2__19543_SHARP_) {
    var ret = function() {
      var G__19546 = p1__19542_SHARP_;
      var G__19547 = p2__19543_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19546, G__19547) : rf.call(null, G__19546, G__19547);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__19550 = null;
      var G__19550__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__19550__1 = function(result) {
        var G__19549 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19549) : rf.call(null, G__19549);
      };
      var G__19550__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__19550 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__19550__0.call(this);
          case 1:
            return G__19550__1.call(this, result);
          case 2:
            return G__19550__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__19550.cljs$core$IFn$_invoke$arity$0 = G__19550__0;
      G__19550.cljs$core$IFn$_invoke$arity$1 = G__19550__1;
      G__19550.cljs$core$IFn$_invoke$arity$2 = G__19550__2;
      return G__19550;
    }();
  }(rf1);
};
cljs.core.dedupe = function cljs$core$dedupe() {
  var G__19552 = arguments.length;
  switch(G__19552) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__19558 = null;
        var G__19558__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__19558__1 = function(result) {
          var G__19553 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__19553) : rf.call(null, G__19553);
        };
        var G__19558__2 = function(result, input) {
          var prior = function() {
            var G__19554 = pa;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19554) : cljs.core.deref.call(null, G__19554);
          }();
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            var G__19555 = result;
            var G__19556 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__19555, G__19556) : rf.call(null, G__19555, G__19556);
          }
        };
        G__19558 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__19558__0.call(this);
            case 1:
              return G__19558__1.call(this, result);
            case 2:
              return G__19558__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__19558.cljs$core$IFn$_invoke$arity$0 = G__19558__0;
        G__19558.cljs$core$IFn$_invoke$arity$1 = G__19558__1;
        G__19558.cljs$core$IFn$_invoke$arity$2 = G__19558__2;
        return G__19558;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample() {
  var G__19560 = arguments.length;
  switch(G__19560) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return function() {
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
    }() < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return function() {
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
    }() < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5254__auto__ = this;
  return cljs.core.es6_iterator(this__5254__auto__);
};
cljs.core.eduction = function cljs$core$eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__19563_SHARP_, p2__19562_SHARP_) {
    var G__19565 = p2__19562_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__19565) : proc.call(null, G__19565);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj19567 = {};
  return obj19567;
}();
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (function() {
    var and__4266__auto__ = x;
    if (and__4266__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4914__auto__ = x == null ? null : x;
    return function() {
      var or__4278__auto__ = cljs.core._clj__GT_js[function() {
        var G__19571 = x__4914__auto__;
        return goog.typeOf(G__19571);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (function() {
    var and__4266__auto__ = x;
    if (and__4266__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4914__auto__ = x == null ? null : x;
    return function() {
      var or__4278__auto__ = cljs.core._key__GT_js[function() {
        var G__19575 = x__4914__auto__;
        return goog.typeOf(G__19575);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (function() {
    var G__19578 = k;
    if (G__19578) {
      var bit__4952__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4278__auto__ = bit__4952__auto__;
        if (cljs.core.truth_(or__4278__auto__)) {
          return or__4278__auto__;
        } else {
          return G__19578.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__19578.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__19578);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__19578);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__19579 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__19579) : cljs.core.clj__GT_js.call(null, G__19579);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__19595 = x;
      if (G__19595) {
        var bit__4952__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4278__auto__ = bit__4952__auto__;
          if (cljs.core.truth_(or__4278__auto__)) {
            return or__4278__auto__;
          } else {
            return G__19595.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__19595.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__19595);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__19595);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj19597 = {};
              return obj19597;
            }();
            var seq__19598_19608 = cljs.core.seq(x);
            var chunk__19599_19609 = null;
            var count__19600_19610 = 0;
            var i__19601_19611 = 0;
            while (true) {
              if (i__19601_19611 < count__19600_19610) {
                var vec__19602_19612 = chunk__19599_19609.cljs$core$IIndexed$_nth$arity$2(null, i__19601_19611);
                var k_19613 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19602_19612, 0, null);
                var v_19614 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19602_19612, 1, null);
                m[cljs.core.key__GT_js(k_19613)] = cljs$core$clj__GT_js(v_19614);
                var G__19615 = seq__19598_19608;
                var G__19616 = chunk__19599_19609;
                var G__19617 = count__19600_19610;
                var G__19618 = i__19601_19611 + 1;
                seq__19598_19608 = G__19615;
                chunk__19599_19609 = G__19616;
                count__19600_19610 = G__19617;
                i__19601_19611 = G__19618;
                continue;
              } else {
                var temp__4425__auto___19619 = cljs.core.seq(seq__19598_19608);
                if (temp__4425__auto___19619) {
                  var seq__19598_19620__$1 = temp__4425__auto___19619;
                  if (cljs.core.chunked_seq_QMARK_(seq__19598_19620__$1)) {
                    var c__5063__auto___19621 = cljs.core.chunk_first(seq__19598_19620__$1);
                    var G__19622 = cljs.core.chunk_rest(seq__19598_19620__$1);
                    var G__19623 = c__5063__auto___19621;
                    var G__19624 = cljs.core.count(c__5063__auto___19621);
                    var G__19625 = 0;
                    seq__19598_19608 = G__19622;
                    chunk__19599_19609 = G__19623;
                    count__19600_19610 = G__19624;
                    i__19601_19611 = G__19625;
                    continue;
                  } else {
                    var vec__19603_19626 = cljs.core.first(seq__19598_19620__$1);
                    var k_19627 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19603_19626, 0, null);
                    var v_19628 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19603_19626, 1, null);
                    m[cljs.core.key__GT_js(k_19627)] = cljs$core$clj__GT_js(v_19628);
                    var G__19629 = cljs.core.next(seq__19598_19620__$1);
                    var G__19630 = null;
                    var G__19631 = 0;
                    var G__19632 = 0;
                    seq__19598_19608 = G__19629;
                    chunk__19599_19609 = G__19630;
                    count__19600_19610 = G__19631;
                    i__19601_19611 = G__19632;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__19604_19633 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__19605_19634 = null;
              var count__19606_19635 = 0;
              var i__19607_19636 = 0;
              while (true) {
                if (i__19607_19636 < count__19606_19635) {
                  var x_19637__$1 = chunk__19605_19634.cljs$core$IIndexed$_nth$arity$2(null, i__19607_19636);
                  arr.push(x_19637__$1);
                  var G__19638 = seq__19604_19633;
                  var G__19639 = chunk__19605_19634;
                  var G__19640 = count__19606_19635;
                  var G__19641 = i__19607_19636 + 1;
                  seq__19604_19633 = G__19638;
                  chunk__19605_19634 = G__19639;
                  count__19606_19635 = G__19640;
                  i__19607_19636 = G__19641;
                  continue;
                } else {
                  var temp__4425__auto___19642 = cljs.core.seq(seq__19604_19633);
                  if (temp__4425__auto___19642) {
                    var seq__19604_19643__$1 = temp__4425__auto___19642;
                    if (cljs.core.chunked_seq_QMARK_(seq__19604_19643__$1)) {
                      var c__5063__auto___19644 = cljs.core.chunk_first(seq__19604_19643__$1);
                      var G__19645 = cljs.core.chunk_rest(seq__19604_19643__$1);
                      var G__19646 = c__5063__auto___19644;
                      var G__19647 = cljs.core.count(c__5063__auto___19644);
                      var G__19648 = 0;
                      seq__19604_19633 = G__19645;
                      chunk__19605_19634 = G__19646;
                      count__19606_19635 = G__19647;
                      i__19607_19636 = G__19648;
                      continue;
                    } else {
                      var x_19649__$1 = cljs.core.first(seq__19604_19643__$1);
                      arr.push(x_19649__$1);
                      var G__19650 = cljs.core.next(seq__19604_19643__$1);
                      var G__19651 = null;
                      var G__19652 = 0;
                      var G__19653 = 0;
                      seq__19604_19633 = G__19650;
                      chunk__19605_19634 = G__19651;
                      count__19606_19635 = G__19652;
                      i__19607_19636 = G__19653;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj19655 = {};
  return obj19655;
}();
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (function() {
    var and__4266__auto__ = x;
    if (and__4266__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4914__auto__ = x == null ? null : x;
    return function() {
      var or__4278__auto__ = cljs.core._js__GT_clj[function() {
        var G__19659 = x__4914__auto__;
        return goog.typeOf(G__19659);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj() {
  var G__19663 = arguments.length;
  switch(G__19663) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5329__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__19664 = opts;
  var map__19664__$1 = cljs.core.seq_QMARK_(map__19664) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__19664) : map__19664;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19664__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__19664, map__19664__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (function() {
        var G__19680 = x__$1;
        if (G__19680) {
          var bit__4952__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4278__auto__ = bit__4952__auto__;
            if (cljs.core.truth_(or__4278__auto__)) {
              return or__4278__auto__;
            } else {
              return G__19680.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__19680.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__19680);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__19680);
        }
      }()) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__5032__auto__ = function(map__19664, map__19664__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__19681(s__19682) {
                      return new cljs.core.LazySeq(null, function(map__19664, map__19664__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__19682__$1 = s__19682;
                          while (true) {
                            var temp__4425__auto__ = cljs.core.seq(s__19682__$1);
                            if (temp__4425__auto__) {
                              var s__19682__$2 = temp__4425__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__19682__$2)) {
                                var c__5030__auto__ = cljs.core.chunk_first(s__19682__$2);
                                var size__5031__auto__ = cljs.core.count(c__5030__auto__);
                                var b__19684 = cljs.core.chunk_buffer(size__5031__auto__);
                                if (function() {
                                  var i__19683 = 0;
                                  while (true) {
                                    if (i__19683 < size__5031__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__5030__auto__, i__19683);
                                      cljs.core.chunk_append(b__19684, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                        var G__19689 = k;
                                        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__19689) : keyfn.call(null, G__19689);
                                      }(), cljs$core$thisfn(x__$1[k])], null));
                                      var G__19692 = i__19683 + 1;
                                      i__19683 = G__19692;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__19684), cljs$core$thisfn_$_iter__19681(cljs.core.chunk_rest(s__19682__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__19684), null);
                                }
                              } else {
                                var k = cljs.core.first(s__19682__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                  var G__19690 = k;
                                  return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__19690) : keyfn.call(null, G__19690);
                                }(), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__19681(cljs.core.rest(s__19682__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__19664, map__19664__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__19664, map__19664__$1, keywordize_keys, keyfn);
                  return iter__5032__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__19664, map__19664__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq19660) {
  var G__19661 = cljs.core.first(seq19660);
  var seq19660__$1 = cljs.core.next(seq19660);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__19661, seq19660__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__19695 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__19695) : cljs.core.atom.call(null, G__19695);
  }();
  return function(mem) {
    return function() {
      var G__19697__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__19696 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19696) : cljs.core.deref.call(null, G__19696);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__19697 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__19698__i = 0, G__19698__a = new Array(arguments.length - 0);
          while (G__19698__i < G__19698__a.length) {
            G__19698__a[G__19698__i] = arguments[G__19698__i + 0];
            ++G__19698__i;
          }
          args = new cljs.core.IndexedSeq(G__19698__a, 0);
        }
        return G__19697__delegate.call(this, args);
      };
      G__19697.cljs$lang$maxFixedArity = 0;
      G__19697.cljs$lang$applyTo = function(arglist__19699) {
        var args = cljs.core.seq(arglist__19699);
        return G__19697__delegate(args);
      };
      G__19697.cljs$core$IFn$_invoke$arity$variadic = G__19697__delegate;
      return G__19697;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline() {
  var G__19703 = arguments.length;
  switch(G__19703) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5329__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }();
    if (cljs.core.fn_QMARK_(ret)) {
      var G__19705 = ret;
      f = G__19705;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq19700) {
  var G__19701 = cljs.core.first(seq19700);
  var seq19700__$1 = cljs.core.next(seq19700);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__19701, seq19700__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand() {
  var G__19707 = arguments.length;
  switch(G__19707) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__19710 = function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
  return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__19710) : Math.floor.call(null, G__19710);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__19712 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__19712) : f.call(null, G__19712);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__19714 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__19714) : cljs.core.atom.call(null, G__19714);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_() {
  var argseq__5318__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5318__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq19715) {
  var G__19716 = cljs.core.first(seq19715);
  var seq19715__$1 = cljs.core.next(seq19715);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__19716, seq19715__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_() {
  var G__19718 = arguments.length;
  switch(G__19718) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__19719 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19719) : cljs.core.deref.call(null, G__19719);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__4278__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__4278__auto__) {
    return or__4278__auto__;
  } else {
    var or__4278__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__4278__auto____$1) {
      return or__4278__auto____$1;
    } else {
      var and__4266__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__4266__auto__) {
        var and__4266__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__4266__auto____$1) {
          var and__4266__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__4266__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__19745 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                  var G__19742 = i;
                  return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__19742) : child.call(null, G__19742);
                }(), function() {
                  var G__19743 = i;
                  return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__19743) : parent.call(null, G__19743);
                }());
                var G__19746 = i + 1;
                ret = G__19745;
                i = G__19746;
                continue;
              }
              break;
            }
          } else {
            return and__4266__auto____$2;
          }
        } else {
          return and__4266__auto____$1;
        }
      } else {
        return and__4266__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents() {
  var G__19748 = arguments.length;
  switch(G__19748) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__19749 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19749) : cljs.core.deref.call(null, G__19749);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors() {
  var G__19752 = arguments.length;
  switch(G__19752) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__19753 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19753) : cljs.core.deref.call(null, G__19753);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants() {
  var G__19756 = arguments.length;
  switch(G__19756) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__19757 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19757) : cljs.core.deref.call(null, G__19757);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive() {
  var G__19760 = arguments.length;
  switch(G__19760) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
            var G__19761 = target;
            return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__19761) : targets.call(null, G__19761);
          }())));
        };
      }(tp, td, ta), m, cljs.core.cons(source, function() {
        var G__19762 = source;
        return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__19762) : sources.call(null, G__19762);
      }()));
    };
  }(tp, td, ta);
  var or__4278__auto__ = cljs.core.contains_QMARK_(function() {
    var G__19766 = tag;
    return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__19766) : tp.call(null, G__19766);
  }(), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(function() {
      var G__19767 = tag;
      return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__19767) : ta.call(null, G__19767);
    }(), parent)) {
      throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(function() {
      var G__19768 = parent;
      return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__19768) : ta.call(null, G__19768);
    }(), tag)) {
      throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__4278__auto__)) {
    return or__4278__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive() {
  var G__19774 = arguments.length;
  switch(G__19774) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(function() {
    var G__19775 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__19775) : parentMap.call(null, G__19775);
  }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
    var G__19776 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__19776) : parentMap.call(null, G__19776);
  }(), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__19770_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__19770_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__19770_SHARP_), cljs.core.second(p1__19770_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(function() {
    var G__19777 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__19777) : parentMap.call(null, G__19777);
  }(), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__19771_SHARP_, p2__19772_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__19771_SHARP_, p2__19772_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__19781 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19781) : cljs.core.deref.call(null, G__19781);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__19782 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19782) : cljs.core.deref.call(null, G__19782);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__19798 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19798) : cljs.core.deref.call(null, G__19798);
  }().call(null, x);
  var or__4278__auto__ = cljs.core.truth_(function() {
    var and__4266__auto__ = xprefs;
    if (cljs.core.truth_(and__4266__auto__)) {
      var G__19800 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__19800) : xprefs.call(null, G__19800);
    } else {
      return and__4266__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4278__auto__)) {
    return or__4278__auto__;
  } else {
    var or__4278__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__19801 = cljs.core.rest(ps);
          ps = G__19801;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4278__auto____$1)) {
      return or__4278__auto____$1;
    } else {
      var or__4278__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__19802 = cljs.core.rest(ps);
            ps = G__19802;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4278__auto____$2)) {
        return or__4278__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__4278__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4278__auto__)) {
    return or__4278__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__19816) {
    var vec__19817 = p__19816;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19817, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19817, 1, null);
    var e = vec__19817;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__19818 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19818) : cljs.core.deref.call(null, G__19818);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4278__auto__ = be == null;
        if (or__4278__auto__) {
          return or__4278__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__19819 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19819) : cljs.core.deref.call(null, G__19819);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__19820 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19820) : cljs.core.deref.call(null, G__19820);
    }(), function() {
      var G__19821 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__19821) : cljs.core.deref.call(null, G__19821);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj19823 = {};
  return obj19823;
}();
cljs.core._reset = function cljs$core$_reset(mf) {
  if (function() {
    var and__4266__auto__ = mf;
    if (and__4266__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4914__auto__ = mf == null ? null : mf;
    return function() {
      var or__4278__auto__ = cljs.core._reset[function() {
        var G__19827 = x__4914__auto__;
        return goog.typeOf(G__19827);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._reset["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (function() {
    var and__4266__auto__ = mf;
    if (and__4266__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4914__auto__ = mf == null ? null : mf;
    return function() {
      var or__4278__auto__ = cljs.core._add_method[function() {
        var G__19831 = x__4914__auto__;
        return goog.typeOf(G__19831);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._add_method["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (function() {
    var and__4266__auto__ = mf;
    if (and__4266__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4914__auto__ = mf == null ? null : mf;
    return function() {
      var or__4278__auto__ = cljs.core._remove_method[function() {
        var G__19835 = x__4914__auto__;
        return goog.typeOf(G__19835);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._remove_method["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__4266__auto__ = mf;
    if (and__4266__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4914__auto__ = mf == null ? null : mf;
    return function() {
      var or__4278__auto__ = cljs.core._prefer_method[function() {
        var G__19839 = x__4914__auto__;
        return goog.typeOf(G__19839);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._prefer_method["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (function() {
    var and__4266__auto__ = mf;
    if (and__4266__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4914__auto__ = mf == null ? null : mf;
    return function() {
      var or__4278__auto__ = cljs.core._get_method[function() {
        var G__19843 = x__4914__auto__;
        return goog.typeOf(G__19843);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._get_method["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (function() {
    var and__4266__auto__ = mf;
    if (and__4266__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4914__auto__ = mf == null ? null : mf;
    return function() {
      var or__4278__auto__ = cljs.core._methods[function() {
        var G__19847 = x__4914__auto__;
        return goog.typeOf(G__19847);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._methods["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (function() {
    var and__4266__auto__ = mf;
    if (and__4266__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4914__auto__ = mf == null ? null : mf;
    return function() {
      var or__4278__auto__ = cljs.core._prefers[function() {
        var G__19851 = x__4914__auto__;
        return goog.typeOf(G__19851);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._prefers["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (function() {
    var and__4266__auto__ = mf;
    if (and__4266__auto__) {
      return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__4914__auto__ = mf == null ? null : mf;
    return function() {
      var or__4278__auto__ = cljs.core._default_dispatch_val[function() {
        var G__19855 = x__4914__auto__;
        return goog.typeOf(G__19855);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._default_dispatch_val["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (function() {
    var and__4266__auto__ = mf;
    if (and__4266__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__4914__auto__ = mf == null ? null : mf;
    return function() {
      var or__4278__auto__ = cljs.core._dispatch_fn[function() {
        var G__19859 = x__4914__auto__;
        return goog.typeOf(G__19859);
      }()];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core._dispatch_fn["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__20708 = null;
  var G__20708__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__20708__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__19861 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__19861) : self__.dispatch_fn.call(null, G__19861);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__19862 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__19862) : target_fn.call(null, G__19862);
  };
  var G__20708__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__19863 = a;
      var G__19864 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__19863, G__19864) : self__.dispatch_fn.call(null, G__19863, G__19864);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__19865 = a;
    var G__19866 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__19865, G__19866) : target_fn.call(null, G__19865, G__19866);
  };
  var G__20708__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__19867 = a;
      var G__19868 = b;
      var G__19869 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__19867, G__19868, G__19869) : self__.dispatch_fn.call(null, G__19867, G__19868, G__19869);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__19870 = a;
    var G__19871 = b;
    var G__19872 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__19870, G__19871, G__19872) : target_fn.call(null, G__19870, G__19871, G__19872);
  };
  var G__20708__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__19873 = a;
      var G__19874 = b;
      var G__19875 = c;
      var G__19876 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__19873, G__19874, G__19875, G__19876) : self__.dispatch_fn.call(null, G__19873, G__19874, G__19875, G__19876);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__19877 = a;
    var G__19878 = b;
    var G__19879 = c;
    var G__19880 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__19877, G__19878, G__19879, G__19880) : target_fn.call(null, G__19877, G__19878, G__19879, G__19880);
  };
  var G__20708__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__19881 = a;
      var G__19882 = b;
      var G__19883 = c;
      var G__19884 = d;
      var G__19885 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__19881, G__19882, G__19883, G__19884, G__19885) : self__.dispatch_fn.call(null, G__19881, G__19882, G__19883, G__19884, G__19885);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__19886 = a;
    var G__19887 = b;
    var G__19888 = c;
    var G__19889 = d;
    var G__19890 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__19886, G__19887, G__19888, G__19889, G__19890) : target_fn.call(null, G__19886, G__19887, G__19888, G__19889, G__19890);
  };
  var G__20708__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__19891 = a;
      var G__19892 = b;
      var G__19893 = c;
      var G__19894 = d;
      var G__19895 = e;
      var G__19896 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__19891, G__19892, G__19893, G__19894, G__19895, G__19896) : self__.dispatch_fn.call(null, G__19891, G__19892, G__19893, G__19894, G__19895, G__19896);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__19897 = a;
    var G__19898 = b;
    var G__19899 = c;
    var G__19900 = d;
    var G__19901 = e;
    var G__19902 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__19897, G__19898, G__19899, G__19900, G__19901, G__19902) : target_fn.call(null, G__19897, G__19898, G__19899, G__19900, G__19901, G__19902);
  };
  var G__20708__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__19903 = a;
      var G__19904 = b;
      var G__19905 = c;
      var G__19906 = d;
      var G__19907 = e;
      var G__19908 = f;
      var G__19909 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__19903, G__19904, G__19905, G__19906, G__19907, G__19908, G__19909) : self__.dispatch_fn.call(null, G__19903, G__19904, G__19905, G__19906, G__19907, G__19908, G__19909);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__19910 = a;
    var G__19911 = b;
    var G__19912 = c;
    var G__19913 = d;
    var G__19914 = e;
    var G__19915 = f;
    var G__19916 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__19910, G__19911, G__19912, G__19913, G__19914, G__19915, G__19916) : target_fn.call(null, G__19910, G__19911, G__19912, G__19913, G__19914, G__19915, G__19916);
  };
  var G__20708__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__19917 = a;
      var G__19918 = b;
      var G__19919 = c;
      var G__19920 = d;
      var G__19921 = e;
      var G__19922 = f;
      var G__19923 = g;
      var G__19924 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__19917, G__19918, G__19919, G__19920, G__19921, G__19922, G__19923, G__19924) : self__.dispatch_fn.call(null, G__19917, G__19918, G__19919, G__19920, G__19921, G__19922, G__19923, G__19924);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__19925 = a;
    var G__19926 = b;
    var G__19927 = c;
    var G__19928 = d;
    var G__19929 = e;
    var G__19930 = f;
    var G__19931 = g;
    var G__19932 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__19925, G__19926, G__19927, G__19928, G__19929, G__19930, G__19931, G__19932) : target_fn.call(null, G__19925, G__19926, G__19927, G__19928, G__19929, G__19930, G__19931, G__19932);
  };
  var G__20708__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__19933 = a;
      var G__19934 = b;
      var G__19935 = c;
      var G__19936 = d;
      var G__19937 = e;
      var G__19938 = f;
      var G__19939 = g;
      var G__19940 = h;
      var G__19941 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__19933, G__19934, G__19935, G__19936, G__19937, G__19938, G__19939, G__19940, G__19941) : self__.dispatch_fn.call(null, G__19933, G__19934, G__19935, G__19936, G__19937, G__19938, G__19939, G__19940, G__19941);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__19942 = a;
    var G__19943 = b;
    var G__19944 = c;
    var G__19945 = d;
    var G__19946 = e;
    var G__19947 = f;
    var G__19948 = g;
    var G__19949 = h;
    var G__19950 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__19942, G__19943, G__19944, G__19945, G__19946, G__19947, G__19948, G__19949, G__19950) : target_fn.call(null, G__19942, G__19943, G__19944, G__19945, G__19946, G__19947, G__19948, G__19949, G__19950);
  };
  var G__20708__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__19951 = a;
      var G__19952 = b;
      var G__19953 = c;
      var G__19954 = d;
      var G__19955 = e;
      var G__19956 = f;
      var G__19957 = g;
      var G__19958 = h;
      var G__19959 = i;
      var G__19960 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__19951, G__19952, G__19953, G__19954, G__19955, G__19956, G__19957, G__19958, G__19959, G__19960) : self__.dispatch_fn.call(null, G__19951, G__19952, G__19953, G__19954, G__19955, G__19956, G__19957, G__19958, G__19959, G__19960);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__19961 = a;
    var G__19962 = b;
    var G__19963 = c;
    var G__19964 = d;
    var G__19965 = e;
    var G__19966 = f;
    var G__19967 = g;
    var G__19968 = h;
    var G__19969 = i;
    var G__19970 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__19961, G__19962, G__19963, G__19964, G__19965, G__19966, G__19967, G__19968, G__19969, G__19970) : target_fn.call(null, G__19961, G__19962, G__19963, G__19964, G__19965, G__19966, G__19967, G__19968, G__19969, G__19970);
  };
  var G__20708__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__19971 = a;
      var G__19972 = b;
      var G__19973 = c;
      var G__19974 = d;
      var G__19975 = e;
      var G__19976 = f;
      var G__19977 = g;
      var G__19978 = h;
      var G__19979 = i;
      var G__19980 = j;
      var G__19981 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__19971, G__19972, G__19973, G__19974, G__19975, G__19976, G__19977, G__19978, G__19979, G__19980, G__19981) : self__.dispatch_fn.call(null, G__19971, G__19972, G__19973, G__19974, G__19975, G__19976, G__19977, G__19978, G__19979, G__19980, G__19981);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__19982 = a;
    var G__19983 = b;
    var G__19984 = c;
    var G__19985 = d;
    var G__19986 = e;
    var G__19987 = f;
    var G__19988 = g;
    var G__19989 = h;
    var G__19990 = i;
    var G__19991 = j;
    var G__19992 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__19982, G__19983, G__19984, G__19985, G__19986, G__19987, G__19988, G__19989, G__19990, G__19991, G__19992) : target_fn.call(null, G__19982, G__19983, G__19984, G__19985, G__19986, G__19987, G__19988, G__19989, G__19990, G__19991, G__19992);
  };
  var G__20708__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__19993 = a;
      var G__19994 = b;
      var G__19995 = c;
      var G__19996 = d;
      var G__19997 = e;
      var G__19998 = f;
      var G__19999 = g;
      var G__20000 = h;
      var G__20001 = i;
      var G__20002 = j;
      var G__20003 = k;
      var G__20004 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__19993, G__19994, G__19995, G__19996, G__19997, G__19998, G__19999, G__20000, G__20001, G__20002, G__20003, G__20004) : self__.dispatch_fn.call(null, G__19993, G__19994, G__19995, G__19996, G__19997, G__19998, G__19999, G__20000, G__20001, G__20002, G__20003, G__20004);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20005 = a;
    var G__20006 = b;
    var G__20007 = c;
    var G__20008 = d;
    var G__20009 = e;
    var G__20010 = f;
    var G__20011 = g;
    var G__20012 = h;
    var G__20013 = i;
    var G__20014 = j;
    var G__20015 = k;
    var G__20016 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__20005, G__20006, G__20007, G__20008, G__20009, G__20010, G__20011, G__20012, G__20013, G__20014, G__20015, G__20016) : target_fn.call(null, G__20005, G__20006, G__20007, G__20008, G__20009, G__20010, G__20011, G__20012, G__20013, G__20014, G__20015, G__20016);
  };
  var G__20708__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20017 = a;
      var G__20018 = b;
      var G__20019 = c;
      var G__20020 = d;
      var G__20021 = e;
      var G__20022 = f;
      var G__20023 = g;
      var G__20024 = h;
      var G__20025 = i;
      var G__20026 = j;
      var G__20027 = k;
      var G__20028 = l;
      var G__20029 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__20017, G__20018, G__20019, G__20020, G__20021, G__20022, G__20023, G__20024, G__20025, G__20026, G__20027, G__20028, G__20029) : self__.dispatch_fn.call(null, G__20017, G__20018, G__20019, G__20020, G__20021, G__20022, G__20023, G__20024, G__20025, G__20026, G__20027, G__20028, G__20029);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20030 = a;
    var G__20031 = b;
    var G__20032 = c;
    var G__20033 = d;
    var G__20034 = e;
    var G__20035 = f;
    var G__20036 = g;
    var G__20037 = h;
    var G__20038 = i;
    var G__20039 = j;
    var G__20040 = k;
    var G__20041 = l;
    var G__20042 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__20030, G__20031, G__20032, G__20033, G__20034, G__20035, G__20036, G__20037, G__20038, G__20039, G__20040, G__20041, G__20042) : target_fn.call(null, G__20030, G__20031, G__20032, G__20033, G__20034, G__20035, G__20036, G__20037, G__20038, G__20039, G__20040, G__20041, G__20042);
  };
  var G__20708__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20043 = a;
      var G__20044 = b;
      var G__20045 = c;
      var G__20046 = d;
      var G__20047 = e;
      var G__20048 = f;
      var G__20049 = g;
      var G__20050 = h;
      var G__20051 = i;
      var G__20052 = j;
      var G__20053 = k;
      var G__20054 = l;
      var G__20055 = m;
      var G__20056 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__20043, G__20044, G__20045, G__20046, G__20047, G__20048, G__20049, G__20050, G__20051, G__20052, G__20053, G__20054, G__20055, G__20056) : self__.dispatch_fn.call(null, G__20043, G__20044, G__20045, G__20046, G__20047, G__20048, G__20049, G__20050, G__20051, G__20052, G__20053, G__20054, G__20055, G__20056);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20057 = a;
    var G__20058 = b;
    var G__20059 = c;
    var G__20060 = d;
    var G__20061 = e;
    var G__20062 = f;
    var G__20063 = g;
    var G__20064 = h;
    var G__20065 = i;
    var G__20066 = j;
    var G__20067 = k;
    var G__20068 = l;
    var G__20069 = m;
    var G__20070 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__20057, G__20058, G__20059, G__20060, G__20061, G__20062, G__20063, G__20064, G__20065, G__20066, G__20067, G__20068, G__20069, G__20070) : target_fn.call(null, G__20057, G__20058, G__20059, G__20060, G__20061, G__20062, G__20063, G__20064, G__20065, G__20066, G__20067, G__20068, G__20069, G__20070);
  };
  var G__20708__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20071 = a;
      var G__20072 = b;
      var G__20073 = c;
      var G__20074 = d;
      var G__20075 = e;
      var G__20076 = f;
      var G__20077 = g;
      var G__20078 = h;
      var G__20079 = i;
      var G__20080 = j;
      var G__20081 = k;
      var G__20082 = l;
      var G__20083 = m;
      var G__20084 = n;
      var G__20085 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__20071, G__20072, G__20073, G__20074, G__20075, G__20076, G__20077, G__20078, G__20079, G__20080, G__20081, G__20082, G__20083, G__20084, G__20085) : self__.dispatch_fn.call(null, G__20071, G__20072, G__20073, G__20074, G__20075, G__20076, G__20077, G__20078, G__20079, G__20080, G__20081, G__20082, G__20083, G__20084, G__20085);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20086 = a;
    var G__20087 = b;
    var G__20088 = c;
    var G__20089 = d;
    var G__20090 = e;
    var G__20091 = f;
    var G__20092 = g;
    var G__20093 = h;
    var G__20094 = i;
    var G__20095 = j;
    var G__20096 = k;
    var G__20097 = l;
    var G__20098 = m;
    var G__20099 = n;
    var G__20100 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__20086, G__20087, G__20088, G__20089, G__20090, G__20091, G__20092, G__20093, G__20094, G__20095, G__20096, G__20097, G__20098, G__20099, G__20100) : target_fn.call(null, G__20086, G__20087, G__20088, G__20089, G__20090, G__20091, G__20092, G__20093, G__20094, G__20095, G__20096, G__20097, G__20098, G__20099, G__20100);
  };
  var G__20708__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20101 = a;
      var G__20102 = b;
      var G__20103 = c;
      var G__20104 = d;
      var G__20105 = e;
      var G__20106 = f;
      var G__20107 = g;
      var G__20108 = h;
      var G__20109 = i;
      var G__20110 = j;
      var G__20111 = k;
      var G__20112 = l;
      var G__20113 = m;
      var G__20114 = n;
      var G__20115 = o;
      var G__20116 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__20101, G__20102, G__20103, G__20104, G__20105, G__20106, G__20107, G__20108, G__20109, G__20110, G__20111, G__20112, G__20113, G__20114, G__20115, G__20116) : self__.dispatch_fn.call(null, G__20101, G__20102, G__20103, G__20104, G__20105, G__20106, G__20107, G__20108, G__20109, G__20110, G__20111, G__20112, G__20113, G__20114, G__20115, G__20116);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20117 = a;
    var G__20118 = b;
    var G__20119 = c;
    var G__20120 = d;
    var G__20121 = e;
    var G__20122 = f;
    var G__20123 = g;
    var G__20124 = h;
    var G__20125 = i;
    var G__20126 = j;
    var G__20127 = k;
    var G__20128 = l;
    var G__20129 = m;
    var G__20130 = n;
    var G__20131 = o;
    var G__20132 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__20117, G__20118, G__20119, G__20120, G__20121, G__20122, G__20123, G__20124, G__20125, G__20126, G__20127, G__20128, G__20129, G__20130, G__20131, G__20132) : target_fn.call(null, G__20117, G__20118, G__20119, G__20120, G__20121, G__20122, G__20123, G__20124, G__20125, G__20126, G__20127, G__20128, G__20129, G__20130, G__20131, G__20132);
  };
  var G__20708__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20133 = a;
      var G__20134 = b;
      var G__20135 = c;
      var G__20136 = d;
      var G__20137 = e;
      var G__20138 = f;
      var G__20139 = g;
      var G__20140 = h;
      var G__20141 = i;
      var G__20142 = j;
      var G__20143 = k;
      var G__20144 = l;
      var G__20145 = m;
      var G__20146 = n;
      var G__20147 = o;
      var G__20148 = p;
      var G__20149 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__20133, G__20134, G__20135, G__20136, G__20137, G__20138, G__20139, G__20140, G__20141, G__20142, G__20143, G__20144, G__20145, G__20146, G__20147, G__20148, G__20149) : self__.dispatch_fn.call(null, G__20133, G__20134, G__20135, G__20136, G__20137, G__20138, G__20139, G__20140, G__20141, G__20142, G__20143, G__20144, G__20145, G__20146, G__20147, G__20148, G__20149);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20150 = a;
    var G__20151 = b;
    var G__20152 = c;
    var G__20153 = d;
    var G__20154 = e;
    var G__20155 = f;
    var G__20156 = g;
    var G__20157 = h;
    var G__20158 = i;
    var G__20159 = j;
    var G__20160 = k;
    var G__20161 = l;
    var G__20162 = m;
    var G__20163 = n;
    var G__20164 = o;
    var G__20165 = p;
    var G__20166 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__20150, G__20151, G__20152, G__20153, G__20154, G__20155, G__20156, G__20157, G__20158, G__20159, G__20160, G__20161, G__20162, G__20163, G__20164, G__20165, G__20166) : target_fn.call(null, G__20150, G__20151, G__20152, G__20153, G__20154, G__20155, G__20156, G__20157, G__20158, G__20159, G__20160, G__20161, G__20162, G__20163, G__20164, G__20165, G__20166);
  };
  var G__20708__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20167 = a;
      var G__20168 = b;
      var G__20169 = c;
      var G__20170 = d;
      var G__20171 = e;
      var G__20172 = f;
      var G__20173 = g;
      var G__20174 = h;
      var G__20175 = i;
      var G__20176 = j;
      var G__20177 = k;
      var G__20178 = l;
      var G__20179 = m;
      var G__20180 = n;
      var G__20181 = o;
      var G__20182 = p;
      var G__20183 = q;
      var G__20184 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__20167, G__20168, G__20169, G__20170, G__20171, G__20172, G__20173, G__20174, G__20175, G__20176, G__20177, G__20178, G__20179, G__20180, G__20181, G__20182, G__20183, G__20184) : self__.dispatch_fn.call(null, G__20167, G__20168, G__20169, G__20170, G__20171, G__20172, G__20173, G__20174, G__20175, G__20176, G__20177, G__20178, G__20179, G__20180, G__20181, G__20182, G__20183, G__20184);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20185 = a;
    var G__20186 = b;
    var G__20187 = c;
    var G__20188 = d;
    var G__20189 = e;
    var G__20190 = f;
    var G__20191 = g;
    var G__20192 = h;
    var G__20193 = i;
    var G__20194 = j;
    var G__20195 = k;
    var G__20196 = l;
    var G__20197 = m;
    var G__20198 = n;
    var G__20199 = o;
    var G__20200 = p;
    var G__20201 = q;
    var G__20202 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__20185, G__20186, G__20187, G__20188, G__20189, G__20190, G__20191, G__20192, G__20193, G__20194, G__20195, G__20196, G__20197, G__20198, G__20199, G__20200, G__20201, G__20202) : target_fn.call(null, G__20185, G__20186, G__20187, G__20188, G__20189, G__20190, G__20191, G__20192, G__20193, G__20194, G__20195, G__20196, G__20197, G__20198, G__20199, G__20200, G__20201, G__20202);
  };
  var G__20708__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20203 = a;
      var G__20204 = b;
      var G__20205 = c;
      var G__20206 = d;
      var G__20207 = e;
      var G__20208 = f;
      var G__20209 = g;
      var G__20210 = h;
      var G__20211 = i;
      var G__20212 = j;
      var G__20213 = k;
      var G__20214 = l;
      var G__20215 = m;
      var G__20216 = n;
      var G__20217 = o;
      var G__20218 = p;
      var G__20219 = q;
      var G__20220 = r;
      var G__20221 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__20203, G__20204, G__20205, G__20206, G__20207, G__20208, G__20209, G__20210, G__20211, G__20212, G__20213, G__20214, G__20215, G__20216, G__20217, G__20218, G__20219, G__20220, G__20221) : self__.dispatch_fn.call(null, G__20203, G__20204, G__20205, G__20206, G__20207, G__20208, G__20209, G__20210, G__20211, G__20212, G__20213, G__20214, G__20215, G__20216, G__20217, G__20218, G__20219, 
      G__20220, G__20221);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20222 = a;
    var G__20223 = b;
    var G__20224 = c;
    var G__20225 = d;
    var G__20226 = e;
    var G__20227 = f;
    var G__20228 = g;
    var G__20229 = h;
    var G__20230 = i;
    var G__20231 = j;
    var G__20232 = k;
    var G__20233 = l;
    var G__20234 = m;
    var G__20235 = n;
    var G__20236 = o;
    var G__20237 = p;
    var G__20238 = q;
    var G__20239 = r;
    var G__20240 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__20222, G__20223, G__20224, G__20225, G__20226, G__20227, G__20228, G__20229, G__20230, G__20231, G__20232, G__20233, G__20234, G__20235, G__20236, G__20237, G__20238, G__20239, G__20240) : target_fn.call(null, G__20222, G__20223, G__20224, G__20225, G__20226, G__20227, G__20228, G__20229, G__20230, G__20231, G__20232, G__20233, G__20234, G__20235, G__20236, G__20237, G__20238, G__20239, G__20240);
  };
  var G__20708__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__20241 = a;
      var G__20242 = b;
      var G__20243 = c;
      var G__20244 = d;
      var G__20245 = e;
      var G__20246 = f;
      var G__20247 = g;
      var G__20248 = h;
      var G__20249 = i;
      var G__20250 = j;
      var G__20251 = k;
      var G__20252 = l;
      var G__20253 = m;
      var G__20254 = n;
      var G__20255 = o;
      var G__20256 = p;
      var G__20257 = q;
      var G__20258 = r;
      var G__20259 = s;
      var G__20260 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__20241, G__20242, G__20243, G__20244, G__20245, G__20246, G__20247, G__20248, G__20249, G__20250, G__20251, G__20252, G__20253, G__20254, G__20255, G__20256, G__20257, G__20258, G__20259, G__20260) : self__.dispatch_fn.call(null, G__20241, G__20242, G__20243, G__20244, G__20245, G__20246, G__20247, G__20248, G__20249, G__20250, G__20251, G__20252, G__20253, G__20254, G__20255, G__20256, 
      G__20257, G__20258, G__20259, G__20260);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__20261 = a;
    var G__20262 = b;
    var G__20263 = c;
    var G__20264 = d;
    var G__20265 = e;
    var G__20266 = f;
    var G__20267 = g;
    var G__20268 = h;
    var G__20269 = i;
    var G__20270 = j;
    var G__20271 = k;
    var G__20272 = l;
    var G__20273 = m;
    var G__20274 = n;
    var G__20275 = o;
    var G__20276 = p;
    var G__20277 = q;
    var G__20278 = r;
    var G__20279 = s;
    var G__20280 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__20261, G__20262, G__20263, G__20264, G__20265, G__20266, G__20267, G__20268, G__20269, G__20270, G__20271, G__20272, G__20273, G__20274, G__20275, G__20276, G__20277, G__20278, G__20279, G__20280) : target_fn.call(null, G__20261, G__20262, G__20263, G__20264, G__20265, G__20266, G__20267, G__20268, G__20269, G__20270, G__20271, G__20272, G__20273, G__20274, G__20275, G__20276, G__20277, G__20278, G__20279, 
    G__20280);
  };
  var G__20708__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__20708 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__20708__1.call(this, self__);
      case 2:
        return G__20708__2.call(this, self__, a);
      case 3:
        return G__20708__3.call(this, self__, a, b);
      case 4:
        return G__20708__4.call(this, self__, a, b, c);
      case 5:
        return G__20708__5.call(this, self__, a, b, c, d);
      case 6:
        return G__20708__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__20708__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__20708__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__20708__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__20708__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__20708__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__20708__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__20708__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__20708__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__20708__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__20708__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__20708__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__20708__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__20708__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__20708__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__20708__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__20708__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__20708.cljs$core$IFn$_invoke$arity$1 = G__20708__1;
  G__20708.cljs$core$IFn$_invoke$arity$2 = G__20708__2;
  G__20708.cljs$core$IFn$_invoke$arity$3 = G__20708__3;
  G__20708.cljs$core$IFn$_invoke$arity$4 = G__20708__4;
  G__20708.cljs$core$IFn$_invoke$arity$5 = G__20708__5;
  G__20708.cljs$core$IFn$_invoke$arity$6 = G__20708__6;
  G__20708.cljs$core$IFn$_invoke$arity$7 = G__20708__7;
  G__20708.cljs$core$IFn$_invoke$arity$8 = G__20708__8;
  G__20708.cljs$core$IFn$_invoke$arity$9 = G__20708__9;
  G__20708.cljs$core$IFn$_invoke$arity$10 = G__20708__10;
  G__20708.cljs$core$IFn$_invoke$arity$11 = G__20708__11;
  G__20708.cljs$core$IFn$_invoke$arity$12 = G__20708__12;
  G__20708.cljs$core$IFn$_invoke$arity$13 = G__20708__13;
  G__20708.cljs$core$IFn$_invoke$arity$14 = G__20708__14;
  G__20708.cljs$core$IFn$_invoke$arity$15 = G__20708__15;
  G__20708.cljs$core$IFn$_invoke$arity$16 = G__20708__16;
  G__20708.cljs$core$IFn$_invoke$arity$17 = G__20708__17;
  G__20708.cljs$core$IFn$_invoke$arity$18 = G__20708__18;
  G__20708.cljs$core$IFn$_invoke$arity$19 = G__20708__19;
  G__20708.cljs$core$IFn$_invoke$arity$20 = G__20708__20;
  G__20708.cljs$core$IFn$_invoke$arity$21 = G__20708__21;
  G__20708.cljs$core$IFn$_invoke$arity$22 = G__20708__22;
  return G__20708;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args19860) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args19860)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20281 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__20281) : self__.dispatch_fn.call(null, G__20281);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20282 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__20282) : target_fn.call(null, G__20282);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20283 = a;
    var G__20284 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__20283, G__20284) : self__.dispatch_fn.call(null, G__20283, G__20284);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20285 = a;
  var G__20286 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__20285, G__20286) : target_fn.call(null, G__20285, G__20286);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20287 = a;
    var G__20288 = b;
    var G__20289 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__20287, G__20288, G__20289) : self__.dispatch_fn.call(null, G__20287, G__20288, G__20289);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20290 = a;
  var G__20291 = b;
  var G__20292 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__20290, G__20291, G__20292) : target_fn.call(null, G__20290, G__20291, G__20292);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20293 = a;
    var G__20294 = b;
    var G__20295 = c;
    var G__20296 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__20293, G__20294, G__20295, G__20296) : self__.dispatch_fn.call(null, G__20293, G__20294, G__20295, G__20296);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20297 = a;
  var G__20298 = b;
  var G__20299 = c;
  var G__20300 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__20297, G__20298, G__20299, G__20300) : target_fn.call(null, G__20297, G__20298, G__20299, G__20300);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20301 = a;
    var G__20302 = b;
    var G__20303 = c;
    var G__20304 = d;
    var G__20305 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__20301, G__20302, G__20303, G__20304, G__20305) : self__.dispatch_fn.call(null, G__20301, G__20302, G__20303, G__20304, G__20305);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20306 = a;
  var G__20307 = b;
  var G__20308 = c;
  var G__20309 = d;
  var G__20310 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__20306, G__20307, G__20308, G__20309, G__20310) : target_fn.call(null, G__20306, G__20307, G__20308, G__20309, G__20310);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20311 = a;
    var G__20312 = b;
    var G__20313 = c;
    var G__20314 = d;
    var G__20315 = e;
    var G__20316 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__20311, G__20312, G__20313, G__20314, G__20315, G__20316) : self__.dispatch_fn.call(null, G__20311, G__20312, G__20313, G__20314, G__20315, G__20316);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20317 = a;
  var G__20318 = b;
  var G__20319 = c;
  var G__20320 = d;
  var G__20321 = e;
  var G__20322 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__20317, G__20318, G__20319, G__20320, G__20321, G__20322) : target_fn.call(null, G__20317, G__20318, G__20319, G__20320, G__20321, G__20322);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20323 = a;
    var G__20324 = b;
    var G__20325 = c;
    var G__20326 = d;
    var G__20327 = e;
    var G__20328 = f;
    var G__20329 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__20323, G__20324, G__20325, G__20326, G__20327, G__20328, G__20329) : self__.dispatch_fn.call(null, G__20323, G__20324, G__20325, G__20326, G__20327, G__20328, G__20329);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20330 = a;
  var G__20331 = b;
  var G__20332 = c;
  var G__20333 = d;
  var G__20334 = e;
  var G__20335 = f;
  var G__20336 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__20330, G__20331, G__20332, G__20333, G__20334, G__20335, G__20336) : target_fn.call(null, G__20330, G__20331, G__20332, G__20333, G__20334, G__20335, G__20336);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20337 = a;
    var G__20338 = b;
    var G__20339 = c;
    var G__20340 = d;
    var G__20341 = e;
    var G__20342 = f;
    var G__20343 = g;
    var G__20344 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__20337, G__20338, G__20339, G__20340, G__20341, G__20342, G__20343, G__20344) : self__.dispatch_fn.call(null, G__20337, G__20338, G__20339, G__20340, G__20341, G__20342, G__20343, G__20344);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20345 = a;
  var G__20346 = b;
  var G__20347 = c;
  var G__20348 = d;
  var G__20349 = e;
  var G__20350 = f;
  var G__20351 = g;
  var G__20352 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__20345, G__20346, G__20347, G__20348, G__20349, G__20350, G__20351, G__20352) : target_fn.call(null, G__20345, G__20346, G__20347, G__20348, G__20349, G__20350, G__20351, G__20352);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20353 = a;
    var G__20354 = b;
    var G__20355 = c;
    var G__20356 = d;
    var G__20357 = e;
    var G__20358 = f;
    var G__20359 = g;
    var G__20360 = h;
    var G__20361 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__20353, G__20354, G__20355, G__20356, G__20357, G__20358, G__20359, G__20360, G__20361) : self__.dispatch_fn.call(null, G__20353, G__20354, G__20355, G__20356, G__20357, G__20358, G__20359, G__20360, G__20361);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20362 = a;
  var G__20363 = b;
  var G__20364 = c;
  var G__20365 = d;
  var G__20366 = e;
  var G__20367 = f;
  var G__20368 = g;
  var G__20369 = h;
  var G__20370 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__20362, G__20363, G__20364, G__20365, G__20366, G__20367, G__20368, G__20369, G__20370) : target_fn.call(null, G__20362, G__20363, G__20364, G__20365, G__20366, G__20367, G__20368, G__20369, G__20370);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20371 = a;
    var G__20372 = b;
    var G__20373 = c;
    var G__20374 = d;
    var G__20375 = e;
    var G__20376 = f;
    var G__20377 = g;
    var G__20378 = h;
    var G__20379 = i;
    var G__20380 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__20371, G__20372, G__20373, G__20374, G__20375, G__20376, G__20377, G__20378, G__20379, G__20380) : self__.dispatch_fn.call(null, G__20371, G__20372, G__20373, G__20374, G__20375, G__20376, G__20377, G__20378, G__20379, G__20380);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20381 = a;
  var G__20382 = b;
  var G__20383 = c;
  var G__20384 = d;
  var G__20385 = e;
  var G__20386 = f;
  var G__20387 = g;
  var G__20388 = h;
  var G__20389 = i;
  var G__20390 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__20381, G__20382, G__20383, G__20384, G__20385, G__20386, G__20387, G__20388, G__20389, G__20390) : target_fn.call(null, G__20381, G__20382, G__20383, G__20384, G__20385, G__20386, G__20387, G__20388, G__20389, G__20390);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20391 = a;
    var G__20392 = b;
    var G__20393 = c;
    var G__20394 = d;
    var G__20395 = e;
    var G__20396 = f;
    var G__20397 = g;
    var G__20398 = h;
    var G__20399 = i;
    var G__20400 = j;
    var G__20401 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__20391, G__20392, G__20393, G__20394, G__20395, G__20396, G__20397, G__20398, G__20399, G__20400, G__20401) : self__.dispatch_fn.call(null, G__20391, G__20392, G__20393, G__20394, G__20395, G__20396, G__20397, G__20398, G__20399, G__20400, G__20401);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20402 = a;
  var G__20403 = b;
  var G__20404 = c;
  var G__20405 = d;
  var G__20406 = e;
  var G__20407 = f;
  var G__20408 = g;
  var G__20409 = h;
  var G__20410 = i;
  var G__20411 = j;
  var G__20412 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__20402, G__20403, G__20404, G__20405, G__20406, G__20407, G__20408, G__20409, G__20410, G__20411, G__20412) : target_fn.call(null, G__20402, G__20403, G__20404, G__20405, G__20406, G__20407, G__20408, G__20409, G__20410, G__20411, G__20412);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20413 = a;
    var G__20414 = b;
    var G__20415 = c;
    var G__20416 = d;
    var G__20417 = e;
    var G__20418 = f;
    var G__20419 = g;
    var G__20420 = h;
    var G__20421 = i;
    var G__20422 = j;
    var G__20423 = k;
    var G__20424 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__20413, G__20414, G__20415, G__20416, G__20417, G__20418, G__20419, G__20420, G__20421, G__20422, G__20423, G__20424) : self__.dispatch_fn.call(null, G__20413, G__20414, G__20415, G__20416, G__20417, G__20418, G__20419, G__20420, G__20421, G__20422, G__20423, G__20424);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20425 = a;
  var G__20426 = b;
  var G__20427 = c;
  var G__20428 = d;
  var G__20429 = e;
  var G__20430 = f;
  var G__20431 = g;
  var G__20432 = h;
  var G__20433 = i;
  var G__20434 = j;
  var G__20435 = k;
  var G__20436 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__20425, G__20426, G__20427, G__20428, G__20429, G__20430, G__20431, G__20432, G__20433, G__20434, G__20435, G__20436) : target_fn.call(null, G__20425, G__20426, G__20427, G__20428, G__20429, G__20430, G__20431, G__20432, G__20433, G__20434, G__20435, G__20436);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20437 = a;
    var G__20438 = b;
    var G__20439 = c;
    var G__20440 = d;
    var G__20441 = e;
    var G__20442 = f;
    var G__20443 = g;
    var G__20444 = h;
    var G__20445 = i;
    var G__20446 = j;
    var G__20447 = k;
    var G__20448 = l;
    var G__20449 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__20437, G__20438, G__20439, G__20440, G__20441, G__20442, G__20443, G__20444, G__20445, G__20446, G__20447, G__20448, G__20449) : self__.dispatch_fn.call(null, G__20437, G__20438, G__20439, G__20440, G__20441, G__20442, G__20443, G__20444, G__20445, G__20446, G__20447, G__20448, G__20449);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20450 = a;
  var G__20451 = b;
  var G__20452 = c;
  var G__20453 = d;
  var G__20454 = e;
  var G__20455 = f;
  var G__20456 = g;
  var G__20457 = h;
  var G__20458 = i;
  var G__20459 = j;
  var G__20460 = k;
  var G__20461 = l;
  var G__20462 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__20450, G__20451, G__20452, G__20453, G__20454, G__20455, G__20456, G__20457, G__20458, G__20459, G__20460, G__20461, G__20462) : target_fn.call(null, G__20450, G__20451, G__20452, G__20453, G__20454, G__20455, G__20456, G__20457, G__20458, G__20459, G__20460, G__20461, G__20462);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20463 = a;
    var G__20464 = b;
    var G__20465 = c;
    var G__20466 = d;
    var G__20467 = e;
    var G__20468 = f;
    var G__20469 = g;
    var G__20470 = h;
    var G__20471 = i;
    var G__20472 = j;
    var G__20473 = k;
    var G__20474 = l;
    var G__20475 = m;
    var G__20476 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__20463, G__20464, G__20465, G__20466, G__20467, G__20468, G__20469, G__20470, G__20471, G__20472, G__20473, G__20474, G__20475, G__20476) : self__.dispatch_fn.call(null, G__20463, G__20464, G__20465, G__20466, G__20467, G__20468, G__20469, G__20470, G__20471, G__20472, G__20473, G__20474, G__20475, G__20476);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20477 = a;
  var G__20478 = b;
  var G__20479 = c;
  var G__20480 = d;
  var G__20481 = e;
  var G__20482 = f;
  var G__20483 = g;
  var G__20484 = h;
  var G__20485 = i;
  var G__20486 = j;
  var G__20487 = k;
  var G__20488 = l;
  var G__20489 = m;
  var G__20490 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__20477, G__20478, G__20479, G__20480, G__20481, G__20482, G__20483, G__20484, G__20485, G__20486, G__20487, G__20488, G__20489, G__20490) : target_fn.call(null, G__20477, G__20478, G__20479, G__20480, G__20481, G__20482, G__20483, G__20484, G__20485, G__20486, G__20487, G__20488, G__20489, G__20490);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20491 = a;
    var G__20492 = b;
    var G__20493 = c;
    var G__20494 = d;
    var G__20495 = e;
    var G__20496 = f;
    var G__20497 = g;
    var G__20498 = h;
    var G__20499 = i;
    var G__20500 = j;
    var G__20501 = k;
    var G__20502 = l;
    var G__20503 = m;
    var G__20504 = n;
    var G__20505 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__20491, G__20492, G__20493, G__20494, G__20495, G__20496, G__20497, G__20498, G__20499, G__20500, G__20501, G__20502, G__20503, G__20504, G__20505) : self__.dispatch_fn.call(null, G__20491, G__20492, G__20493, G__20494, G__20495, G__20496, G__20497, G__20498, G__20499, G__20500, G__20501, G__20502, G__20503, G__20504, G__20505);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20506 = a;
  var G__20507 = b;
  var G__20508 = c;
  var G__20509 = d;
  var G__20510 = e;
  var G__20511 = f;
  var G__20512 = g;
  var G__20513 = h;
  var G__20514 = i;
  var G__20515 = j;
  var G__20516 = k;
  var G__20517 = l;
  var G__20518 = m;
  var G__20519 = n;
  var G__20520 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__20506, G__20507, G__20508, G__20509, G__20510, G__20511, G__20512, G__20513, G__20514, G__20515, G__20516, G__20517, G__20518, G__20519, G__20520) : target_fn.call(null, G__20506, G__20507, G__20508, G__20509, G__20510, G__20511, G__20512, G__20513, G__20514, G__20515, G__20516, G__20517, G__20518, G__20519, G__20520);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20521 = a;
    var G__20522 = b;
    var G__20523 = c;
    var G__20524 = d;
    var G__20525 = e;
    var G__20526 = f;
    var G__20527 = g;
    var G__20528 = h;
    var G__20529 = i;
    var G__20530 = j;
    var G__20531 = k;
    var G__20532 = l;
    var G__20533 = m;
    var G__20534 = n;
    var G__20535 = o;
    var G__20536 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__20521, G__20522, G__20523, G__20524, G__20525, G__20526, G__20527, G__20528, G__20529, G__20530, G__20531, G__20532, G__20533, G__20534, G__20535, G__20536) : self__.dispatch_fn.call(null, G__20521, G__20522, G__20523, G__20524, G__20525, G__20526, G__20527, G__20528, G__20529, G__20530, G__20531, G__20532, G__20533, G__20534, G__20535, G__20536);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20537 = a;
  var G__20538 = b;
  var G__20539 = c;
  var G__20540 = d;
  var G__20541 = e;
  var G__20542 = f;
  var G__20543 = g;
  var G__20544 = h;
  var G__20545 = i;
  var G__20546 = j;
  var G__20547 = k;
  var G__20548 = l;
  var G__20549 = m;
  var G__20550 = n;
  var G__20551 = o;
  var G__20552 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__20537, G__20538, G__20539, G__20540, G__20541, G__20542, G__20543, G__20544, G__20545, G__20546, G__20547, G__20548, G__20549, G__20550, G__20551, G__20552) : target_fn.call(null, G__20537, G__20538, G__20539, G__20540, G__20541, G__20542, G__20543, G__20544, G__20545, G__20546, G__20547, G__20548, G__20549, G__20550, G__20551, G__20552);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20553 = a;
    var G__20554 = b;
    var G__20555 = c;
    var G__20556 = d;
    var G__20557 = e;
    var G__20558 = f;
    var G__20559 = g;
    var G__20560 = h;
    var G__20561 = i;
    var G__20562 = j;
    var G__20563 = k;
    var G__20564 = l;
    var G__20565 = m;
    var G__20566 = n;
    var G__20567 = o;
    var G__20568 = p;
    var G__20569 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__20553, G__20554, G__20555, G__20556, G__20557, G__20558, G__20559, G__20560, G__20561, G__20562, G__20563, G__20564, G__20565, G__20566, G__20567, G__20568, G__20569) : self__.dispatch_fn.call(null, G__20553, G__20554, G__20555, G__20556, G__20557, G__20558, G__20559, G__20560, G__20561, G__20562, G__20563, G__20564, G__20565, G__20566, G__20567, G__20568, G__20569);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20570 = a;
  var G__20571 = b;
  var G__20572 = c;
  var G__20573 = d;
  var G__20574 = e;
  var G__20575 = f;
  var G__20576 = g;
  var G__20577 = h;
  var G__20578 = i;
  var G__20579 = j;
  var G__20580 = k;
  var G__20581 = l;
  var G__20582 = m;
  var G__20583 = n;
  var G__20584 = o;
  var G__20585 = p;
  var G__20586 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__20570, G__20571, G__20572, G__20573, G__20574, G__20575, G__20576, G__20577, G__20578, G__20579, G__20580, G__20581, G__20582, G__20583, G__20584, G__20585, G__20586) : target_fn.call(null, G__20570, G__20571, G__20572, G__20573, G__20574, G__20575, G__20576, G__20577, G__20578, G__20579, G__20580, G__20581, G__20582, G__20583, G__20584, G__20585, G__20586);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20587 = a;
    var G__20588 = b;
    var G__20589 = c;
    var G__20590 = d;
    var G__20591 = e;
    var G__20592 = f;
    var G__20593 = g;
    var G__20594 = h;
    var G__20595 = i;
    var G__20596 = j;
    var G__20597 = k;
    var G__20598 = l;
    var G__20599 = m;
    var G__20600 = n;
    var G__20601 = o;
    var G__20602 = p;
    var G__20603 = q;
    var G__20604 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__20587, G__20588, G__20589, G__20590, G__20591, G__20592, G__20593, G__20594, G__20595, G__20596, G__20597, G__20598, G__20599, G__20600, G__20601, G__20602, G__20603, G__20604) : self__.dispatch_fn.call(null, G__20587, G__20588, G__20589, G__20590, G__20591, G__20592, G__20593, G__20594, G__20595, G__20596, G__20597, G__20598, G__20599, G__20600, G__20601, G__20602, G__20603, G__20604);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20605 = a;
  var G__20606 = b;
  var G__20607 = c;
  var G__20608 = d;
  var G__20609 = e;
  var G__20610 = f;
  var G__20611 = g;
  var G__20612 = h;
  var G__20613 = i;
  var G__20614 = j;
  var G__20615 = k;
  var G__20616 = l;
  var G__20617 = m;
  var G__20618 = n;
  var G__20619 = o;
  var G__20620 = p;
  var G__20621 = q;
  var G__20622 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__20605, G__20606, G__20607, G__20608, G__20609, G__20610, G__20611, G__20612, G__20613, G__20614, G__20615, G__20616, G__20617, G__20618, G__20619, G__20620, G__20621, G__20622) : target_fn.call(null, G__20605, G__20606, G__20607, G__20608, G__20609, G__20610, G__20611, G__20612, G__20613, G__20614, G__20615, G__20616, G__20617, G__20618, G__20619, G__20620, G__20621, G__20622);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20623 = a;
    var G__20624 = b;
    var G__20625 = c;
    var G__20626 = d;
    var G__20627 = e;
    var G__20628 = f;
    var G__20629 = g;
    var G__20630 = h;
    var G__20631 = i;
    var G__20632 = j;
    var G__20633 = k;
    var G__20634 = l;
    var G__20635 = m;
    var G__20636 = n;
    var G__20637 = o;
    var G__20638 = p;
    var G__20639 = q;
    var G__20640 = r;
    var G__20641 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__20623, G__20624, G__20625, G__20626, G__20627, G__20628, G__20629, G__20630, G__20631, G__20632, G__20633, G__20634, G__20635, G__20636, G__20637, G__20638, G__20639, G__20640, G__20641) : self__.dispatch_fn.call(null, G__20623, G__20624, G__20625, G__20626, G__20627, G__20628, G__20629, G__20630, G__20631, G__20632, G__20633, G__20634, G__20635, G__20636, G__20637, G__20638, G__20639, 
    G__20640, G__20641);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20642 = a;
  var G__20643 = b;
  var G__20644 = c;
  var G__20645 = d;
  var G__20646 = e;
  var G__20647 = f;
  var G__20648 = g;
  var G__20649 = h;
  var G__20650 = i;
  var G__20651 = j;
  var G__20652 = k;
  var G__20653 = l;
  var G__20654 = m;
  var G__20655 = n;
  var G__20656 = o;
  var G__20657 = p;
  var G__20658 = q;
  var G__20659 = r;
  var G__20660 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__20642, G__20643, G__20644, G__20645, G__20646, G__20647, G__20648, G__20649, G__20650, G__20651, G__20652, G__20653, G__20654, G__20655, G__20656, G__20657, G__20658, G__20659, G__20660) : target_fn.call(null, G__20642, G__20643, G__20644, G__20645, G__20646, G__20647, G__20648, G__20649, G__20650, G__20651, G__20652, G__20653, G__20654, G__20655, G__20656, G__20657, G__20658, G__20659, G__20660);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__20661 = a;
    var G__20662 = b;
    var G__20663 = c;
    var G__20664 = d;
    var G__20665 = e;
    var G__20666 = f;
    var G__20667 = g;
    var G__20668 = h;
    var G__20669 = i;
    var G__20670 = j;
    var G__20671 = k;
    var G__20672 = l;
    var G__20673 = m;
    var G__20674 = n;
    var G__20675 = o;
    var G__20676 = p;
    var G__20677 = q;
    var G__20678 = r;
    var G__20679 = s;
    var G__20680 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__20661, G__20662, G__20663, G__20664, G__20665, G__20666, G__20667, G__20668, G__20669, G__20670, G__20671, G__20672, G__20673, G__20674, G__20675, G__20676, G__20677, G__20678, G__20679, G__20680) : self__.dispatch_fn.call(null, G__20661, G__20662, G__20663, G__20664, G__20665, G__20666, G__20667, G__20668, G__20669, G__20670, G__20671, G__20672, G__20673, G__20674, G__20675, G__20676, 
    G__20677, G__20678, G__20679, G__20680);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__20681 = a;
  var G__20682 = b;
  var G__20683 = c;
  var G__20684 = d;
  var G__20685 = e;
  var G__20686 = f;
  var G__20687 = g;
  var G__20688 = h;
  var G__20689 = i;
  var G__20690 = j;
  var G__20691 = k;
  var G__20692 = l;
  var G__20693 = m;
  var G__20694 = n;
  var G__20695 = o;
  var G__20696 = p;
  var G__20697 = q;
  var G__20698 = r;
  var G__20699 = s;
  var G__20700 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__20681, G__20682, G__20683, G__20684, G__20685, G__20686, G__20687, G__20688, G__20689, G__20690, G__20691, G__20692, G__20693, G__20694, G__20695, G__20696, G__20697, G__20698, G__20699, G__20700) : target_fn.call(null, G__20681, G__20682, G__20683, G__20684, G__20685, G__20686, G__20687, G__20688, G__20689, G__20690, G__20691, G__20692, G__20693, G__20694, G__20695, G__20696, G__20697, G__20698, G__20699, 
  G__20700);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__20701 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20701) : cljs.core.deref.call(null, G__20701);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__20702 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20702) : cljs.core.deref.call(null, G__20702);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__20704 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20704) : cljs.core.deref.call(null, G__20704);
  }(), function() {
    var G__20705 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20705) : cljs.core.deref.call(null, G__20705);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4423__auto__ = function() {
    var G__20706 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20706) : cljs.core.deref.call(null, G__20706);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var target_fn = temp__4423__auto__;
    return target_fn;
  } else {
    var temp__4423__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4423__auto____$1)) {
      var target_fn = temp__4423__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__20707 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__20707) : cljs.core.deref.call(null, G__20707);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__20703 = this$__$1;
  return goog.getUid(G__20703);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__20709 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__20709);
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__20710 = self__.uuid;
  var G__20711 = other.uuid;
  return goog.array.defaultCompare(G__20710, G__20711);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write(writer__4858__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error;
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info() {
  var G__20713 = arguments.length;
  switch(G__20713) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__20719 = x;
      var G__20720 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__20719, G__20720) : pred.call(null, G__20719, G__20720);
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(function() {
        var G__20721 = y;
        var G__20722 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__20721, G__20722) : pred.call(null, G__20721, G__20722);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function clojure$set$bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(max) {
    return function(p1__11952_SHARP_) {
      return max === p1__11952_SHARP_;
    };
  }(max), coll));
};
clojure.set.union = function clojure$set$union() {
  var G__11957 = arguments.length;
  switch(G__11957) {
    case 0:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
clojure.set.union.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
clojure.set.union.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.union.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
    return cljs.core.reduce.call(null, cljs.core.conj, s2, s1);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, s1, s2);
  }
};
clojure.set.union.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
  return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
};
clojure.set.union.cljs$lang$applyTo = function(seq11953) {
  var G__11954 = cljs.core.first.call(null, seq11953);
  var seq11953__$1 = cljs.core.next.call(null, seq11953);
  var G__11955 = cljs.core.first.call(null, seq11953__$1);
  var seq11953__$2 = cljs.core.next.call(null, seq11953__$1);
  return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(G__11954, G__11955, seq11953__$2);
};
clojure.set.union.cljs$lang$maxFixedArity = 2;
clojure.set.intersection = function clojure$set$intersection() {
  var G__11964 = arguments.length;
  switch(G__11964) {
    case 1:
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  while (true) {
    if (cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
      var G__11966 = s2;
      var G__11967 = s1;
      s1 = G__11966;
      s2 = G__11967;
      continue;
    } else {
      return cljs.core.reduce.call(null, function(s1, s2) {
        return function(result, item) {
          if (cljs.core.contains_QMARK_.call(null, s2, item)) {
            return result;
          } else {
            return cljs.core.disj.call(null, result, item);
          }
        };
      }(s1, s2), s1, s1);
    }
    break;
  }
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__11959_SHARP_) {
    return-cljs.core.count.call(null, p1__11959_SHARP_);
  }, cljs.core.conj.call(null, sets, s2, s1));
  return cljs.core.reduce.call(null, clojure.set.intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
};
clojure.set.intersection.cljs$lang$applyTo = function(seq11960) {
  var G__11961 = cljs.core.first.call(null, seq11960);
  var seq11960__$1 = cljs.core.next.call(null, seq11960);
  var G__11962 = cljs.core.first.call(null, seq11960__$1);
  var seq11960__$2 = cljs.core.next.call(null, seq11960__$1);
  return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(G__11961, G__11962, seq11960__$2);
};
clojure.set.intersection.cljs$lang$maxFixedArity = 2;
clojure.set.difference = function clojure$set$difference() {
  var G__11972 = arguments.length;
  switch(G__11972) {
    case 1:
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
    return cljs.core.reduce.call(null, function(result, item) {
      if (cljs.core.contains_QMARK_.call(null, s2, item)) {
        return cljs.core.disj.call(null, result, item);
      } else {
        return result;
      }
    }, s1, s1);
  } else {
    return cljs.core.reduce.call(null, cljs.core.disj, s1, s2);
  }
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  return cljs.core.reduce.call(null, clojure.set.difference, s1, cljs.core.conj.call(null, sets, s2));
};
clojure.set.difference.cljs$lang$applyTo = function(seq11968) {
  var G__11969 = cljs.core.first.call(null, seq11968);
  var seq11968__$1 = cljs.core.next.call(null, seq11968);
  var G__11970 = cljs.core.first.call(null, seq11968__$1);
  var seq11968__$2 = cljs.core.next.call(null, seq11968__$1);
  return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(G__11969, G__11970, seq11968__$2);
};
clojure.set.difference.cljs$lang$maxFixedArity = 2;
clojure.set.select = function clojure$set$select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if (cljs.core.truth_(pred.call(null, k))) {
      return s;
    } else {
      return cljs.core.disj.call(null, s, k);
    }
  }, xset, xset);
};
clojure.set.project = function clojure$set$project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__11974_SHARP_) {
    return cljs.core.select_keys.call(null, p1__11974_SHARP_, ks);
  }, xrel));
};
clojure.set.rename_keys = function clojure$set$rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__11977) {
    var vec__11978 = p__11977;
    var old = cljs.core.nth.call(null, vec__11978, 0, null);
    var new$ = cljs.core.nth.call(null, vec__11978, 1, null);
    if (cljs.core.contains_QMARK_.call(null, map, old)) {
      return cljs.core.assoc.call(null, m, new$, cljs.core.get.call(null, map, old));
    } else {
      return m;
    }
  }, cljs.core.apply.call(null, cljs.core.dissoc, map, cljs.core.keys.call(null, kmap)), kmap);
};
clojure.set.rename = function clojure$set$rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__11979_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__11979_SHARP_, kmap);
  }, xrel));
};
clojure.set.index = function clojure$set$index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core.get.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, xrel);
};
clojure.set.map_invert = function clojure$set$map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__11982) {
    var vec__11983 = p__11982;
    var k = cljs.core.nth.call(null, vec__11983, 0, null);
    var v = cljs.core.nth.call(null, vec__11983, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
clojure.set.join = function clojure$set$join() {
  var G__11989 = arguments.length;
  switch(G__11989) {
    case 2:
      return clojure.set.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.set.join.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.set.join.cljs$core$IFn$_invoke$arity$2 = function(xrel, yrel) {
  if (cljs.core.seq.call(null, xrel) && cljs.core.seq.call(null, yrel)) {
    var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
    var vec__11990 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel], null);
    var r = cljs.core.nth.call(null, vec__11990, 0, null);
    var s = cljs.core.nth.call(null, vec__11990, 1, null);
    var idx = clojure.set.index.call(null, r, ks);
    return cljs.core.reduce.call(null, function(ks, vec__11990, r, s, idx) {
      return function(ret, x) {
        var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
        if (cljs.core.truth_(found)) {
          return cljs.core.reduce.call(null, function(found, ks, vec__11990, r, s, idx) {
            return function(p1__11984_SHARP_, p2__11985_SHARP_) {
              return cljs.core.conj.call(null, p1__11984_SHARP_, cljs.core.merge.call(null, p2__11985_SHARP_, x));
            };
          }(found, ks, vec__11990, r, s, idx), ret, found);
        } else {
          return ret;
        }
      };
    }(ks, vec__11990, r, s, idx), cljs.core.PersistentHashSet.EMPTY, s);
  } else {
    return cljs.core.PersistentHashSet.EMPTY;
  }
};
clojure.set.join.cljs$core$IFn$_invoke$arity$3 = function(xrel, yrel, km) {
  var vec__11991 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel, clojure.set.map_invert.call(null, km)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel, km], null);
  var r = cljs.core.nth.call(null, vec__11991, 0, null);
  var s = cljs.core.nth.call(null, vec__11991, 1, null);
  var k = cljs.core.nth.call(null, vec__11991, 2, null);
  var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
  return cljs.core.reduce.call(null, function(vec__11991, r, s, k, idx) {
    return function(ret, x) {
      var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
      if (cljs.core.truth_(found)) {
        return cljs.core.reduce.call(null, function(found, vec__11991, r, s, k, idx) {
          return function(p1__11986_SHARP_, p2__11987_SHARP_) {
            return cljs.core.conj.call(null, p1__11986_SHARP_, cljs.core.merge.call(null, p2__11987_SHARP_, x));
          };
        }(found, vec__11991, r, s, k, idx), ret, found);
      } else {
        return ret;
      }
    };
  }(vec__11991, r, s, k, idx), cljs.core.PersistentHashSet.EMPTY, s);
};
clojure.set.join.cljs$lang$maxFixedArity = 3;
clojure.set.subset_QMARK_ = function clojure$set$subset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__11993_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set2, p1__11993_SHARP_);
  }, set1);
};
clojure.set.superset_QMARK_ = function clojure$set$superset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__11994_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set1, p1__11994_SHARP_);
  }, set2);
};
goog.provide("yinch.utils");
goog.require("cljs.core");
yinch.utils.\u03c0 = Math["PI"];
yinch.utils.cos = function yinch$utils$cos(x) {
  return Math.cos(x);
};
yinch.utils.sin = function yinch$utils$sin(x) {
  return Math.sin(x);
};
yinch.utils.abs = function yinch$utils$abs(x) {
  return Math.abs(x);
};
yinch.utils.signum = function yinch$utils$signum(x) {
  return Math.sign(x);
};
yinch.utils.half = function yinch$utils$half(x) {
  return x / 2;
};
yinch.utils.other = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "black", "black", 1294279647), new cljs.core.Keyword(null, "white", "white", -483998618), new cljs.core.Keyword(null, "white", "white", -483998618), new cljs.core.Keyword(null, "black", "black", 1294279647)], null);
yinch.utils.pnr = function yinch$utils$pnr(x) {
  cljs.core.println.call(null, x);
  return x;
};
goog.provide("yinch.board");
goog.require("cljs.core");
goog.require("yinch.utils");
yinch.board.axis_lengths = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, 6, 7, 8, 9, 8, 9, 8, 7, 6, 3], null);
yinch.board.axis_staggers = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0, 0, 0, 0, 1, 1, 2, 3, 4, 6], null);
yinch.board.major_names = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], null);
yinch.board.minor_names = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"], null);
yinch.board.for_cell = function yinch$board$for_cell(cb) {
  return cljs.core.doall.call(null, function() {
    var iter__5032__auto__ = function yinch$board$for_cell_$_iter__11769(s__11770) {
      return new cljs.core.LazySeq(null, function() {
        var s__11770__$1 = s__11770;
        while (true) {
          var temp__4425__auto__ = cljs.core.seq.call(null, s__11770__$1);
          if (temp__4425__auto__) {
            var s__11770__$2 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__11770__$2)) {
              var c__5030__auto__ = cljs.core.chunk_first.call(null, s__11770__$2);
              var size__5031__auto__ = cljs.core.count.call(null, c__5030__auto__);
              var b__11772 = cljs.core.chunk_buffer.call(null, size__5031__auto__);
              if (function() {
                var i__11771 = 0;
                while (true) {
                  if (i__11771 < size__5031__auto__) {
                    var major = cljs.core._nth.call(null, c__5030__auto__, i__11771);
                    cljs.core.chunk_append.call(null, b__11772, cljs.core.doall.call(null, function() {
                      var iter__5032__auto__ = function(i__11771, major, c__5030__auto__, size__5031__auto__, b__11772, s__11770__$2, temp__4425__auto__) {
                        return function yinch$board$for_cell_$_iter__11769_$_iter__11781(s__11782) {
                          return new cljs.core.LazySeq(null, function(i__11771, major, c__5030__auto__, size__5031__auto__, b__11772, s__11770__$2, temp__4425__auto__) {
                            return function() {
                              var s__11782__$1 = s__11782;
                              while (true) {
                                var temp__4425__auto____$1 = cljs.core.seq.call(null, s__11782__$1);
                                if (temp__4425__auto____$1) {
                                  var s__11782__$2 = temp__4425__auto____$1;
                                  if (cljs.core.chunked_seq_QMARK_.call(null, s__11782__$2)) {
                                    var c__5030__auto____$1 = cljs.core.chunk_first.call(null, s__11782__$2);
                                    var size__5031__auto____$1 = cljs.core.count.call(null, c__5030__auto____$1);
                                    var b__11784 = cljs.core.chunk_buffer.call(null, size__5031__auto____$1);
                                    if (function() {
                                      var i__11783 = 0;
                                      while (true) {
                                        if (i__11783 < size__5031__auto____$1) {
                                          var minor = cljs.core._nth.call(null, c__5030__auto____$1, i__11783);
                                          cljs.core.chunk_append.call(null, b__11784, cb.call(null, major, minor));
                                          var G__11789 = i__11783 + 1;
                                          i__11783 = G__11789;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11784), yinch$board$for_cell_$_iter__11769_$_iter__11781.call(null, cljs.core.chunk_rest.call(null, s__11782__$2)));
                                    } else {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11784), null);
                                    }
                                  } else {
                                    var minor = cljs.core.first.call(null, s__11782__$2);
                                    return cljs.core.cons.call(null, cb.call(null, major, minor), yinch$board$for_cell_$_iter__11769_$_iter__11781.call(null, cljs.core.rest.call(null, s__11782__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(i__11771, major, c__5030__auto__, size__5031__auto__, b__11772, s__11770__$2, temp__4425__auto__), null, null);
                        };
                      }(i__11771, major, c__5030__auto__, size__5031__auto__, b__11772, s__11770__$2, temp__4425__auto__);
                      return iter__5032__auto__.call(null, cljs.core.range.call(null, yinch.board.axis_staggers.call(null, major), yinch.board.axis_staggers.call(null, major) + yinch.board.axis_lengths.call(null, major) + 1));
                    }()));
                    var G__11790 = i__11771 + 1;
                    i__11771 = G__11790;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11772), yinch$board$for_cell_$_iter__11769.call(null, cljs.core.chunk_rest.call(null, s__11770__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11772), null);
              }
            } else {
              var major = cljs.core.first.call(null, s__11770__$2);
              return cljs.core.cons.call(null, cljs.core.doall.call(null, function() {
                var iter__5032__auto__ = function(major, s__11770__$2, temp__4425__auto__) {
                  return function yinch$board$for_cell_$_iter__11769_$_iter__11785(s__11786) {
                    return new cljs.core.LazySeq(null, function(major, s__11770__$2, temp__4425__auto__) {
                      return function() {
                        var s__11786__$1 = s__11786;
                        while (true) {
                          var temp__4425__auto____$1 = cljs.core.seq.call(null, s__11786__$1);
                          if (temp__4425__auto____$1) {
                            var s__11786__$2 = temp__4425__auto____$1;
                            if (cljs.core.chunked_seq_QMARK_.call(null, s__11786__$2)) {
                              var c__5030__auto__ = cljs.core.chunk_first.call(null, s__11786__$2);
                              var size__5031__auto__ = cljs.core.count.call(null, c__5030__auto__);
                              var b__11788 = cljs.core.chunk_buffer.call(null, size__5031__auto__);
                              if (function() {
                                var i__11787 = 0;
                                while (true) {
                                  if (i__11787 < size__5031__auto__) {
                                    var minor = cljs.core._nth.call(null, c__5030__auto__, i__11787);
                                    cljs.core.chunk_append.call(null, b__11788, cb.call(null, major, minor));
                                    var G__11791 = i__11787 + 1;
                                    i__11787 = G__11791;
                                    continue;
                                  } else {
                                    return true;
                                  }
                                  break;
                                }
                              }()) {
                                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11788), yinch$board$for_cell_$_iter__11769_$_iter__11785.call(null, cljs.core.chunk_rest.call(null, s__11786__$2)));
                              } else {
                                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11788), null);
                              }
                            } else {
                              var minor = cljs.core.first.call(null, s__11786__$2);
                              return cljs.core.cons.call(null, cb.call(null, major, minor), yinch$board$for_cell_$_iter__11769_$_iter__11785.call(null, cljs.core.rest.call(null, s__11786__$2)));
                            }
                          } else {
                            return null;
                          }
                          break;
                        }
                      };
                    }(major, s__11770__$2, temp__4425__auto__), null, null);
                  };
                }(major, s__11770__$2, temp__4425__auto__);
                return iter__5032__auto__.call(null, cljs.core.range.call(null, yinch.board.axis_staggers.call(null, major), yinch.board.axis_staggers.call(null, major) + yinch.board.axis_lengths.call(null, major) + 1));
              }()), yinch$board$for_cell_$_iter__11769.call(null, cljs.core.rest.call(null, s__11770__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5032__auto__.call(null, cljs.core.range.call(null, 11));
  }());
};
yinch.board.cells = cljs.core.reduce.call(null, cljs.core.partial.call(null, cljs.core.apply, cljs.core.conj), yinch.board.for_cell.call(null, function(maj, mn) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [maj, mn], null);
}));
yinch.board.cell_valid_QMARK_ = function yinch$board$cell_valid_QMARK_(major, minor) {
  return cljs.core.contains_QMARK_.call(null, yinch.board.axis_staggers, major) && cljs.core.contains_QMARK_.call(null, yinch.board.axis_staggers, minor) && minor >= yinch.board.axis_staggers.call(null, major) && minor <= yinch.board.axis_lengths.call(null, major) + yinch.board.axis_staggers.call(null, major);
};
yinch.board.check_cell = function yinch$board$check_cell(major, minor) {
  if (cljs.core.not.call(null, yinch.board.cell_valid_QMARK_.call(null, major, minor))) {
    throw[cljs.core.str("("), cljs.core.str(major), cljs.core.str(", "), cljs.core.str(minor), cljs.core.str(") is not a valid cell.")].join("");
  } else {
    return null;
  }
};
yinch.board.line_valid_QMARK_ = function yinch$board$line_valid_QMARK_(start, end) {
  var vec__11794 = start;
  var start_major = cljs.core.nth.call(null, vec__11794, 0, null);
  var start_minor = cljs.core.nth.call(null, vec__11794, 1, null);
  var vec__11795 = end;
  var end_major = cljs.core.nth.call(null, vec__11795, 0, null);
  var end_minor = cljs.core.nth.call(null, vec__11795, 1, null);
  var major_delta = end_major - start_major;
  var minor_delta = end_minor - start_minor;
  var and__4266__auto__ = cljs.core.apply.call(null, yinch.board.cell_valid_QMARK_, start);
  if (cljs.core.truth_(and__4266__auto__)) {
    var and__4266__auto____$1 = cljs.core.apply.call(null, yinch.board.cell_valid_QMARK_, end);
    if (cljs.core.truth_(and__4266__auto____$1)) {
      return!cljs.core._EQ_.call(null, start, end) && (major_delta === 0 || minor_delta === 0 || cljs.core._EQ_.call(null, major_delta, minor_delta) && cljs.core._EQ_.call(null, yinch.utils.signum.call(null, major_delta), yinch.utils.signum.call(null, minor_delta)));
    } else {
      return and__4266__auto____$1;
    }
  } else {
    return and__4266__auto__;
  }
};
yinch.board.cells_between = function yinch$board$cells_between(from, to) {
  if (cljs.core.not.call(null, yinch.board.line_valid_QMARK_.call(null, from, to))) {
    return null;
  } else {
    var vec__11798 = from;
    var from_major = cljs.core.nth.call(null, vec__11798, 0, null);
    var from_minor = cljs.core.nth.call(null, vec__11798, 1, null);
    var vec__11799 = to;
    var to_major = cljs.core.nth.call(null, vec__11799, 0, null);
    var to_minor = cljs.core.nth.call(null, vec__11799, 1, null);
    var major_step = yinch.utils.signum.call(null, to_major - from_major);
    var minor_step = yinch.utils.signum.call(null, to_minor - from_minor);
    var major = from_major;
    var minor = from_minor;
    var cells = cljs.core.List.EMPTY;
    while (true) {
      if (cljs.core._EQ_.call(null, major, to_major) && cljs.core._EQ_.call(null, minor, to_minor)) {
        return cljs.core.conj.call(null, cells, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null));
      } else {
        var G__11800 = major + major_step;
        var G__11801 = minor + minor_step;
        var G__11802 = cljs.core.conj.call(null, cells, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null));
        major = G__11800;
        minor = G__11801;
        cells = G__11802;
        continue;
      }
      break;
    }
  }
};
yinch.board.flip_cell = function yinch$board$flip_cell(board, major, minor) {
  yinch.board.check_cell.call(null, major, minor);
  var row = board.call(null, major);
  var cell = row.call(null, minor);
  var cell_type = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cell);
  if (cljs.core.not_EQ_.call(null, cell_type, new cljs.core.Keyword(null, "tile", "tile", 758132866))) {
    return[cljs.core.str("("), cljs.core.str(major), cljs.core.str(", "), cljs.core.str(minor), cljs.core.str(") is of type :"), cljs.core.str(cell_type), cljs.core.str("must be of type :tile.")].join("");
  } else {
    return cljs.core.assoc.call(null, board, major, cljs.core.assoc.call(null, row, minor, cljs.core.assoc.call(null, cell, new cljs.core.Keyword(null, "color", "color", 1011675173), cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "color", "color", 1011675173)).cljs$core$IFn$_invoke$arity$1(cell), new cljs.core.Keyword(null, "white", "white", -483998618)) ? new cljs.core.Keyword(null, "black", "black", 1294279647) : new cljs.core.Keyword(null, "white", "white", -483998618))));
  }
};
yinch.board.get_cell = function yinch$board$get_cell(board, major, minor) {
  return cljs.core.get_in.call(null, board, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null));
};
yinch.board.assoc_cell = function yinch$board$assoc_cell(board, major, minor, value) {
  yinch.board.check_cell.call(null, major, minor);
  return cljs.core.assoc_in.call(null, board, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null), value);
};
yinch.board.make_board = function yinch$board$make_board() {
  return cljs.core.vec.call(null, function() {
    var iter__5032__auto__ = function yinch$board$make_board_$_iter__11823(s__11824) {
      return new cljs.core.LazySeq(null, function() {
        var s__11824__$1 = s__11824;
        while (true) {
          var temp__4425__auto__ = cljs.core.seq.call(null, s__11824__$1);
          if (temp__4425__auto__) {
            var s__11824__$2 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__11824__$2)) {
              var c__5030__auto__ = cljs.core.chunk_first.call(null, s__11824__$2);
              var size__5031__auto__ = cljs.core.count.call(null, c__5030__auto__);
              var b__11826 = cljs.core.chunk_buffer.call(null, size__5031__auto__);
              if (function() {
                var i__11825 = 0;
                while (true) {
                  if (i__11825 < size__5031__auto__) {
                    var major = cljs.core._nth.call(null, c__5030__auto__, i__11825);
                    cljs.core.chunk_append.call(null, b__11826, cljs.core.vec.call(null, function() {
                      var iter__5032__auto__ = function(i__11825, major, c__5030__auto__, size__5031__auto__, b__11826, s__11824__$2, temp__4425__auto__) {
                        return function yinch$board$make_board_$_iter__11823_$_iter__11835(s__11836) {
                          return new cljs.core.LazySeq(null, function(i__11825, major, c__5030__auto__, size__5031__auto__, b__11826, s__11824__$2, temp__4425__auto__) {
                            return function() {
                              var s__11836__$1 = s__11836;
                              while (true) {
                                var temp__4425__auto____$1 = cljs.core.seq.call(null, s__11836__$1);
                                if (temp__4425__auto____$1) {
                                  var s__11836__$2 = temp__4425__auto____$1;
                                  if (cljs.core.chunked_seq_QMARK_.call(null, s__11836__$2)) {
                                    var c__5030__auto____$1 = cljs.core.chunk_first.call(null, s__11836__$2);
                                    var size__5031__auto____$1 = cljs.core.count.call(null, c__5030__auto____$1);
                                    var b__11838 = cljs.core.chunk_buffer.call(null, size__5031__auto____$1);
                                    if (function() {
                                      var i__11837 = 0;
                                      while (true) {
                                        if (i__11837 < size__5031__auto____$1) {
                                          var minor = cljs.core._nth.call(null, c__5030__auto____$1, i__11837);
                                          cljs.core.chunk_append.call(null, b__11838, minor >= yinch.board.axis_staggers.call(null, major) && minor <= yinch.board.axis_lengths.call(null, major) + yinch.board.axis_staggers.call(null, major) ? new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "empty", "empty", 767870958), new cljs.core.Keyword(null, "owner", "owner", -392611939), new cljs.core.Keyword(null, "nil", "nil", 
                                          99600501)], null) : null);
                                          var G__11843 = i__11837 + 1;
                                          i__11837 = G__11843;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11838), yinch$board$make_board_$_iter__11823_$_iter__11835.call(null, cljs.core.chunk_rest.call(null, s__11836__$2)));
                                    } else {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11838), null);
                                    }
                                  } else {
                                    var minor = cljs.core.first.call(null, s__11836__$2);
                                    return cljs.core.cons.call(null, minor >= yinch.board.axis_staggers.call(null, major) && minor <= yinch.board.axis_lengths.call(null, major) + yinch.board.axis_staggers.call(null, major) ? new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "empty", "empty", 767870958), new cljs.core.Keyword(null, "owner", "owner", -392611939), new cljs.core.Keyword(null, "nil", "nil", 99600501)], null) : 
                                    null, yinch$board$make_board_$_iter__11823_$_iter__11835.call(null, cljs.core.rest.call(null, s__11836__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(i__11825, major, c__5030__auto__, size__5031__auto__, b__11826, s__11824__$2, temp__4425__auto__), null, null);
                        };
                      }(i__11825, major, c__5030__auto__, size__5031__auto__, b__11826, s__11824__$2, temp__4425__auto__);
                      return iter__5032__auto__.call(null, cljs.core.range.call(null, 11));
                    }()));
                    var G__11844 = i__11825 + 1;
                    i__11825 = G__11844;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11826), yinch$board$make_board_$_iter__11823.call(null, cljs.core.chunk_rest.call(null, s__11824__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11826), null);
              }
            } else {
              var major = cljs.core.first.call(null, s__11824__$2);
              return cljs.core.cons.call(null, cljs.core.vec.call(null, function() {
                var iter__5032__auto__ = function(major, s__11824__$2, temp__4425__auto__) {
                  return function yinch$board$make_board_$_iter__11823_$_iter__11839(s__11840) {
                    return new cljs.core.LazySeq(null, function(major, s__11824__$2, temp__4425__auto__) {
                      return function() {
                        var s__11840__$1 = s__11840;
                        while (true) {
                          var temp__4425__auto____$1 = cljs.core.seq.call(null, s__11840__$1);
                          if (temp__4425__auto____$1) {
                            var s__11840__$2 = temp__4425__auto____$1;
                            if (cljs.core.chunked_seq_QMARK_.call(null, s__11840__$2)) {
                              var c__5030__auto__ = cljs.core.chunk_first.call(null, s__11840__$2);
                              var size__5031__auto__ = cljs.core.count.call(null, c__5030__auto__);
                              var b__11842 = cljs.core.chunk_buffer.call(null, size__5031__auto__);
                              if (function() {
                                var i__11841 = 0;
                                while (true) {
                                  if (i__11841 < size__5031__auto__) {
                                    var minor = cljs.core._nth.call(null, c__5030__auto__, i__11841);
                                    cljs.core.chunk_append.call(null, b__11842, minor >= yinch.board.axis_staggers.call(null, major) && minor <= yinch.board.axis_lengths.call(null, major) + yinch.board.axis_staggers.call(null, major) ? new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "empty", "empty", 767870958), new cljs.core.Keyword(null, "owner", "owner", -392611939), new cljs.core.Keyword(null, "nil", "nil", 99600501)], 
                                    null) : null);
                                    var G__11845 = i__11841 + 1;
                                    i__11841 = G__11845;
                                    continue;
                                  } else {
                                    return true;
                                  }
                                  break;
                                }
                              }()) {
                                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11842), yinch$board$make_board_$_iter__11823_$_iter__11839.call(null, cljs.core.chunk_rest.call(null, s__11840__$2)));
                              } else {
                                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11842), null);
                              }
                            } else {
                              var minor = cljs.core.first.call(null, s__11840__$2);
                              return cljs.core.cons.call(null, minor >= yinch.board.axis_staggers.call(null, major) && minor <= yinch.board.axis_lengths.call(null, major) + yinch.board.axis_staggers.call(null, major) ? new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "empty", "empty", 767870958), new cljs.core.Keyword(null, "owner", "owner", -392611939), new cljs.core.Keyword(null, "nil", "nil", 99600501)], null) : null, 
                              yinch$board$make_board_$_iter__11823_$_iter__11839.call(null, cljs.core.rest.call(null, s__11840__$2)));
                            }
                          } else {
                            return null;
                          }
                          break;
                        }
                      };
                    }(major, s__11824__$2, temp__4425__auto__), null, null);
                  };
                }(major, s__11824__$2, temp__4425__auto__);
                return iter__5032__auto__.call(null, cljs.core.range.call(null, 11));
              }()), yinch$board$make_board_$_iter__11823.call(null, cljs.core.rest.call(null, s__11824__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5032__auto__.call(null, cljs.core.range.call(null, 11));
  }());
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join() {
  var G__12630 = arguments.length;
  switch(G__12630) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (coll__$1) {
      var G__12632 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var G__12633 = cljs.core.next.call(null, coll__$1);
      sb = G__12632;
      coll__$1 = G__12633;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (coll__$1) {
      sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__12634 = sb;
      var G__12635 = coll__$2;
      sb = G__12634;
      coll__$1 = G__12635;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__12636 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__12636;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__12640 = cljs.core._EQ_;
    var expr__12641 = limit;
    if (cljs.core.truth_(pred__12640.call(null, 1, expr__12641))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__12640.call(null, 2, expr__12641))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split() {
  var G__12644 = arguments.length;
  switch(G__12644) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (cljs.core._EQ_.call(null, limit__$1, 1)) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var temp__4423__auto__ = cljs.core.re_find.call(null, re, s__$1);
        if (cljs.core.truth_(temp__4423__auto__)) {
          var m = temp__4423__auto__;
          var index = s__$1.indexOf(m);
          var G__12646 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__12647 = limit__$1 - 1;
          var G__12648 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__12646;
          limit__$1 = G__12647;
          parts = G__12648;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__12649 = index - 1;
        index = G__12649;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4423__auto___12650 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4423__auto___12650)) {
        var replacement_12651 = temp__4423__auto___12650;
        buffer.append([cljs.core.str(replacement_12651)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__12652 = index + 1;
      index = G__12652;
      continue;
    }
    break;
  }
};
goog.provide("pathetic.core");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("goog.Uri");
goog.require("goog.string");
pathetic.core.separator = "/";
pathetic.core.separator_pattern = cljs.core.re_pattern.call(null, pathetic.core.separator);
pathetic.core.common_prefix = function pathetic$core$common_prefix(coll1, coll2) {
  return cljs.core.map.call(null, cljs.core.first, cljs.core.take_while.call(null, function(p1__20754_SHARP_) {
    return cljs.core._EQ_.call(null, cljs.core.first.call(null, p1__20754_SHARP_), cljs.core.second.call(null, p1__20754_SHARP_));
  }, cljs.core.map.call(null, function(p1__20755_SHARP_, p2__20756_SHARP_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__20755_SHARP_, p2__20756_SHARP_], null);
  }, coll1, coll2)));
};
pathetic.core.unique_suffix = function pathetic$core$unique_suffix(uninteresting_coll, interesting_coll) {
  var common_parts = pathetic.core.common_prefix.call(null, uninteresting_coll, interesting_coll);
  return cljs.core.drop.call(null, cljs.core.count.call(null, common_parts), interesting_coll);
};
pathetic.core.split = function pathetic$core$split(path) {
  if (cljs.core._EQ_.call(null, path, pathetic.core.separator)) {
    return cljs.core.PersistentVector.EMPTY;
  } else {
    return clojure.string.split.call(null, [cljs.core.str(path)].join(""), pathetic.core.separator_pattern);
  }
};
pathetic.core.parse_path = function pathetic$core$parse_path(path) {
  if (cljs.core.empty_QMARK_.call(null, [cljs.core.str(path)].join(""))) {
    return null;
  } else {
    var path_pieces = pathetic.core.split.call(null, path);
    if (cljs.core._EQ_.call(null, 0, cljs.core.count.call(null, path_pieces))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "root", "root", -448657453)], null);
    } else {
      var G__20758 = cljs.core.first.call(null, path_pieces);
      switch(G__20758) {
        case "":
          return cljs.core.apply.call(null, cljs.core.vector, new cljs.core.Keyword(null, "root", "root", -448657453), cljs.core.rest.call(null, path_pieces));
          break;
        case ".":
          return cljs.core.apply.call(null, cljs.core.vector, new cljs.core.Keyword(null, "cwd", "cwd", 14056523), cljs.core.rest.call(null, path_pieces));
          break;
        default:
          return cljs.core.apply.call(null, cljs.core.vector, new cljs.core.Keyword(null, "cwd", "cwd", 14056523), path_pieces);
      }
    }
  }
};
pathetic.core.render_path = function pathetic$core$render_path(path_pieces) {
  var G__20761 = cljs.core.first.call(null, path_pieces) instanceof cljs.core.Keyword ? cljs.core.first.call(null, path_pieces).fqn : null;
  switch(G__20761) {
    case "root":
      return[cljs.core.str(pathetic.core.separator), cljs.core.str(clojure.string.join.call(null, pathetic.core.separator, cljs.core.rest.call(null, path_pieces)))].join("");
      break;
    case "cwd":
      if (cljs.core.next.call(null, path_pieces)) {
        return clojure.string.join.call(null, pathetic.core.separator, cljs.core.rest.call(null, path_pieces));
      } else {
        return ".";
      }
      break;
    default:
      return clojure.string.join.call(null, pathetic.core.separator, path_pieces);
  }
};
pathetic.core.starts_with = function pathetic$core$starts_with(s, prefix) {
  return goog.string.startsWith(s, prefix);
};
pathetic.core.absolute_path_QMARK_ = function pathetic$core$absolute_path_QMARK_(path) {
  return pathetic.core.starts_with.call(null, path, pathetic.core.separator);
};
pathetic.core.up_dir = function pathetic$core$up_dir(path_pieces) {
  var G__20764 = cljs.core.last.call(null, path_pieces);
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "cwd", "cwd", 14056523), G__20764)) {
    return cljs.core.conj.call(null, path_pieces, "..");
  } else {
    if (cljs.core._EQ_.call(null, "..", G__20764)) {
      return cljs.core.conj.call(null, path_pieces, "..");
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "root", "root", -448657453), G__20764)) {
        return path_pieces;
      } else {
        return cljs.core.pop.call(null, path_pieces);
      }
    }
  }
};
pathetic.core.normalize_STAR_ = function pathetic$core$normalize_STAR_(path_pieces) {
  var result = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, path_pieces)], null);
  var remaining_path = cljs.core.rest.call(null, path_pieces);
  while (true) {
    var vec__20769 = remaining_path;
    var curr = cljs.core.nth.call(null, vec__20769, 0, null);
    var remainder = cljs.core.nthnext.call(null, vec__20769, 1);
    var pred__20770 = cljs.core._EQ_;
    var expr__20771 = curr;
    if (cljs.core.truth_(pred__20770.call(null, null, expr__20771))) {
      return result;
    } else {
      if (cljs.core.truth_(pred__20770.call(null, "", expr__20771))) {
        var G__20773 = result;
        var G__20774 = remainder;
        result = G__20773;
        remaining_path = G__20774;
        continue;
      } else {
        if (cljs.core.truth_(pred__20770.call(null, ".", expr__20771))) {
          var G__20775 = result;
          var G__20776 = remainder;
          result = G__20775;
          remaining_path = G__20776;
          continue;
        } else {
          if (cljs.core.truth_(pred__20770.call(null, "..", expr__20771))) {
            var G__20777 = pathetic.core.up_dir.call(null, result);
            var G__20778 = remainder;
            result = G__20777;
            remaining_path = G__20778;
            continue;
          } else {
            var G__20779 = cljs.core.conj.call(null, result, curr);
            var G__20780 = remainder;
            result = G__20779;
            remaining_path = G__20780;
            continue;
          }
        }
      }
    }
    break;
  }
};
pathetic.core.normalize = function pathetic$core$normalize(path) {
  return pathetic.core.render_path.call(null, pathetic.core.normalize_STAR_.call(null, pathetic.core.parse_path.call(null, path)));
};
pathetic.core.relativize_STAR_ = function pathetic$core$relativize_STAR_(base_path, dest_path) {
  var common_path = pathetic.core.common_prefix.call(null, base_path, dest_path);
  var base_suffix = cljs.core.drop.call(null, cljs.core.count.call(null, common_path), base_path);
  var dest_suffix = cljs.core.drop.call(null, cljs.core.count.call(null, common_path), dest_path);
  if (common_path == null) {
    throw cljs.core.ex_info.call(null, "Paths contain no common components.", cljs.core.PersistentArrayMap.EMPTY);
  } else {
  }
  return cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "cwd", "cwd", 14056523)], null), cljs.core.repeat.call(null, cljs.core.count.call(null, base_suffix), ".."), function() {
    var suffix = cljs.core.PersistentVector.EMPTY;
    var remainder = dest_suffix;
    while (true) {
      var curr = cljs.core.first.call(null, remainder);
      var pred__20784 = cljs.core._EQ_;
      var expr__20785 = curr;
      if (cljs.core.truth_(pred__20784.call(null, null, expr__20785))) {
        return suffix;
      } else {
        if (cljs.core.truth_(pred__20784.call(null, "", expr__20785))) {
          var G__20787 = suffix;
          var G__20788 = cljs.core.rest.call(null, remainder);
          suffix = G__20787;
          remainder = G__20788;
          continue;
        } else {
          if (cljs.core.truth_(pred__20784.call(null, ".", expr__20785))) {
            var G__20789 = suffix;
            var G__20790 = cljs.core.rest.call(null, remainder);
            suffix = G__20789;
            remainder = G__20790;
            continue;
          } else {
            if (cljs.core.truth_(pred__20784.call(null, "..", expr__20785))) {
              var G__20791 = cljs.core.conj.call(null, suffix, "..");
              var G__20792 = cljs.core.rest.call(null, remainder);
              suffix = G__20791;
              remainder = G__20792;
              continue;
            } else {
              var G__20793 = cljs.core.conj.call(null, suffix, curr);
              var G__20794 = cljs.core.rest.call(null, remainder);
              suffix = G__20793;
              remainder = G__20794;
              continue;
            }
          }
        }
      }
      break;
    }
  }());
};
pathetic.core.relativize = function pathetic$core$relativize(base_path, dest_path) {
  var base_path__$1 = pathetic.core.normalize_STAR_.call(null, pathetic.core.parse_path.call(null, base_path));
  var dest_path__$1 = pathetic.core.normalize_STAR_.call(null, pathetic.core.parse_path.call(null, dest_path));
  return pathetic.core.render_path.call(null, pathetic.core.relativize_STAR_.call(null, base_path__$1, dest_path__$1));
};
pathetic.core.resolve_STAR_ = function pathetic$core$resolve_STAR_(base_path, other_path) {
  if (other_path == null) {
    return base_path;
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "root", "root", -448657453), cljs.core.first.call(null, other_path))) {
      return other_path;
    } else {
      var base_components = pathetic.core.normalize_STAR_.call(null, base_path);
      var other_components = cljs.core.rest.call(null, pathetic.core.normalize_STAR_.call(null, other_path));
      return cljs.core.concat.call(null, base_components, other_components);
    }
  }
};
pathetic.core.resolve = function pathetic$core$resolve(base_path, other_path) {
  return pathetic.core.render_path.call(null, pathetic.core.resolve_STAR_.call(null, pathetic.core.parse_path.call(null, base_path), pathetic.core.parse_path.call(null, other_path)));
};
pathetic.core.ends_with = function pathetic$core$ends_with(s, suffix) {
  return goog.string.endsWith(s, suffix);
};
pathetic.core.ensure_trailing_separator = function pathetic$core$ensure_trailing_separator(path) {
  if (cljs.core.truth_(pathetic.core.ends_with.call(null, path, pathetic.core.separator))) {
    return path;
  } else {
    return[cljs.core.str(path), cljs.core.str(pathetic.core.separator)].join("");
  }
};
pathetic.core.as_url = function pathetic$core$as_url(url_or_string) {
  if (url_or_string instanceof goog.Uri) {
    return url_or_string;
  } else {
    return new goog.Uri(url_or_string);
  }
};
pathetic.core.split_url_on_path = function pathetic$core$split_url_on_path(url_or_string) {
  var url = pathetic.core.as_url.call(null, url_or_string);
  var url_string = [cljs.core.str(url)].join("");
  var path = url.getPath();
  var path_idx = url_string.lastIndexOf(path);
  var pre_path = url_string.substring(0, path_idx);
  var post_path = url_string.substring(path_idx + cljs.core.count.call(null, path));
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [pre_path, path, post_path], null);
};
pathetic.core.url_normalize = function pathetic$core$url_normalize(url_or_string) {
  var vec__20796 = pathetic.core.split_url_on_path.call(null, url_or_string);
  var pre_path = cljs.core.nth.call(null, vec__20796, 0, null);
  var path = cljs.core.nth.call(null, vec__20796, 1, null);
  var post_path = cljs.core.nth.call(null, vec__20796, 2, null);
  return[cljs.core.str(pre_path), cljs.core.str(pathetic.core.normalize.call(null, path)), cljs.core.str(post_path)].join("");
};
pathetic.core.url_ensure_trailing_separator = function pathetic$core$url_ensure_trailing_separator(url_or_string) {
  var vec__20798 = pathetic.core.split_url_on_path.call(null, url_or_string);
  var pre_path = cljs.core.nth.call(null, vec__20798, 0, null);
  var path = cljs.core.nth.call(null, vec__20798, 1, null);
  var post_path = cljs.core.nth.call(null, vec__20798, 2, null);
  return[cljs.core.str(pre_path), cljs.core.str(pathetic.core.ensure_trailing_separator.call(null, path)), cljs.core.str(post_path)].join("");
};
goog.provide("cemerick.url");
goog.require("cljs.core");
goog.require("pathetic.core");
goog.require("clojure.string");
goog.require("goog.Uri");
cemerick.url.url_encode = function cemerick$url$url_encode(string) {
  var G__20726 = string;
  var G__20726__$1 = G__20726 == null ? null : [cljs.core.str(G__20726)].join("");
  var G__20726__$2 = G__20726__$1 == null ? null : encodeURIComponent(G__20726__$1);
  var G__20726__$3 = G__20726__$2 == null ? null : G__20726__$2.replace("+", "%20");
  return G__20726__$3;
};
cemerick.url.url_decode = function cemerick$url$url_decode(string) {
  var G__20728 = string;
  var G__20728__$1 = G__20728 == null ? null : [cljs.core.str(G__20728)].join("");
  var G__20728__$2 = G__20728__$1 == null ? null : decodeURIComponent(G__20728__$1);
  return G__20728__$2;
};
cemerick.url.map__GT_query = function cemerick$url$map__GT_query(m) {
  var G__20732 = cljs.core.seq.call(null, m);
  var G__20732__$1 = G__20732 == null ? null : cljs.core.sort.call(null, G__20732);
  var G__20732__$2 = G__20732__$1 == null ? null : cljs.core.map.call(null, function(G__20732, G__20732__$1) {
    return function(p__20733) {
      var vec__20734 = p__20733;
      var k = cljs.core.nth.call(null, vec__20734, 0, null);
      var v = cljs.core.nth.call(null, vec__20734, 1, null);
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cemerick.url.url_encode.call(null, cljs.core.name.call(null, k)), "\x3d", cemerick.url.url_encode.call(null, [cljs.core.str(v)].join(""))], null);
    };
  }(G__20732, G__20732__$1), G__20732__$1);
  var G__20732__$3 = G__20732__$2 == null ? null : cljs.core.interpose.call(null, "\x26", G__20732__$2);
  var G__20732__$4 = G__20732__$3 == null ? null : cljs.core.flatten.call(null, G__20732__$3);
  var G__20732__$5 = G__20732__$4 == null ? null : cljs.core.apply.call(null, cljs.core.str, G__20732__$4);
  return G__20732__$5;
};
cemerick.url.split_param = function cemerick$url$split_param(param) {
  return cljs.core.take.call(null, 2, cljs.core.concat.call(null, clojure.string.split.call(null, param, /=/), cljs.core.repeat.call(null, "")));
};
cemerick.url.query__GT_map = function cemerick$url$query__GT_map(qstr) {
  if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, qstr))) {
    var G__20736 = clojure.string.split.call(null, qstr, /&/);
    var G__20736__$1 = G__20736 == null ? null : cljs.core.seq.call(null, G__20736);
    var G__20736__$2 = G__20736__$1 == null ? null : cljs.core.mapcat.call(null, cemerick.url.split_param, G__20736__$1);
    var G__20736__$3 = G__20736__$2 == null ? null : cljs.core.map.call(null, cemerick.url.url_decode, G__20736__$2);
    var G__20736__$4 = G__20736__$3 == null ? null : cljs.core.apply.call(null, cljs.core.hash_map, G__20736__$3);
    return G__20736__$4;
  } else {
    return null;
  }
};
cemerick.url.port_str = function cemerick$url$port_str(protocol, port) {
  if (cljs.core.not_EQ_.call(null, null, port) && cljs.core.not_EQ_.call(null, -1, port) && !(port === 80 && cljs.core._EQ_.call(null, protocol, "http")) && !(port === 443 && cljs.core._EQ_.call(null, protocol, "https"))) {
    return[cljs.core.str(":"), cljs.core.str(port)].join("");
  } else {
    return null;
  }
};
cemerick.url.url_creds = function cemerick$url$url_creds(username, password) {
  if (cljs.core.truth_(username)) {
    return[cljs.core.str(username), cljs.core.str(":"), cljs.core.str(password)].join("");
  } else {
    return null;
  }
};
cemerick.url.URL = function(protocol, username, password, host, port, path, query, anchor, __meta, __extmap, __hash) {
  this.protocol = protocol;
  this.username = username;
  this.password = password;
  this.host = host;
  this.port = port;
  this.path = path;
  this.query = query;
  this.anchor = anchor;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cemerick.url.URL.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  var creds = cemerick.url.url_creds.call(null, self__.username, self__.password);
  return[cljs.core.str(self__.protocol), cljs.core.str("://"), cljs.core.str(creds), cljs.core.str(cljs.core.truth_(creds) ? "@" : null), cljs.core.str(self__.host), cljs.core.str(cemerick.url.port_str.call(null, self__.protocol, self__.port)), cljs.core.str(self__.path), cljs.core.str(cljs.core.seq.call(null, self__.query) ? [cljs.core.str("?"), cljs.core.str(typeof self__.query === "string" ? self__.query : cemerick.url.map__GT_query.call(null, self__.query))].join("") : null), cljs.core.str(cljs.core.truth_(self__.anchor) ? 
  [cljs.core.str("#"), cljs.core.str(self__.anchor)].join("") : null)].join("");
};
cemerick.url.URL.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4873__auto__, k__4874__auto__) {
  var self__ = this;
  var this__4873__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4873__auto____$1, k__4874__auto__, null);
};
cemerick.url.URL.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4875__auto__, k20738, else__4876__auto__) {
  var self__ = this;
  var this__4875__auto____$1 = this;
  var G__20740 = k20738 instanceof cljs.core.Keyword ? k20738.fqn : null;
  switch(G__20740) {
    case "protocol":
      return self__.protocol;
      break;
    case "username":
      return self__.username;
      break;
    case "password":
      return self__.password;
      break;
    case "host":
      return self__.host;
      break;
    case "port":
      return self__.port;
      break;
    case "path":
      return self__.path;
      break;
    case "query":
      return self__.query;
      break;
    case "anchor":
      return self__.anchor;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k20738, else__4876__auto__);
  }
};
cemerick.url.URL.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4887__auto__, writer__4888__auto__, opts__4889__auto__) {
  var self__ = this;
  var this__4887__auto____$1 = this;
  var pr_pair__4890__auto__ = function(this__4887__auto____$1) {
    return function(keyval__4891__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4888__auto__, cljs.core.pr_writer, "", " ", "", opts__4889__auto__, keyval__4891__auto__);
    };
  }(this__4887__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4888__auto__, pr_pair__4890__auto__, "#cemerick.url.URL{", ", ", "}", opts__4889__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "protocol", "protocol", 652470118), self__.protocol], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "username", "username", 1605666410), self__.username], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 417022471), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "host", "host", -1558485167), self__.host], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "port", "port", 1534937262), self__.port], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "path", "path", -188191168), self__.path], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "query", "query", -1288509510), self__.query], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "anchor", "anchor", 1549638489), self__.anchor], null)], null), self__.__extmap));
};
cemerick.url.URL.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4871__auto__) {
  var self__ = this;
  var this__4871__auto____$1 = this;
  return self__.__meta;
};
cemerick.url.URL.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4867__auto__) {
  var self__ = this;
  var this__4867__auto____$1 = this;
  return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, self__.port, self__.path, self__.query, self__.anchor, self__.__meta, self__.__extmap, self__.__hash);
};
cemerick.url.URL.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4877__auto__) {
  var self__ = this;
  var this__4877__auto____$1 = this;
  return 8 + cljs.core.count.call(null, self__.__extmap);
};
cemerick.url.URL.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4868__auto__) {
  var self__ = this;
  var this__4868__auto____$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_imap.call(null, this__4868__auto____$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cemerick.url.URL.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4869__auto__, other__4870__auto__) {
  var self__ = this;
  var this__4869__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4266__auto__ = other__4870__auto__;
    if (cljs.core.truth_(and__4266__auto__)) {
      var and__4266__auto____$1 = this__4869__auto____$1.constructor === other__4870__auto__.constructor;
      if (and__4266__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4869__auto____$1, other__4870__auto__);
      } else {
        return and__4266__auto____$1;
      }
    } else {
      return and__4266__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cemerick.url.URL.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4882__auto__, k__4883__auto__) {
  var self__ = this;
  var this__4882__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "path", "path", -188191168), null, new cljs.core.Keyword(null, "protocol", "protocol", 652470118), null, new cljs.core.Keyword(null, "password", "password", 417022471), null, new cljs.core.Keyword(null, "username", "username", 1605666410), null, new cljs.core.Keyword(null, "port", "port", 1534937262), null, new cljs.core.Keyword(null, "host", "host", 
  -1558485167), null, new cljs.core.Keyword(null, "anchor", "anchor", 1549638489), null, new cljs.core.Keyword(null, "query", "query", -1288509510), null], null), null), k__4883__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4882__auto____$1), self__.__meta), k__4883__auto__);
  } else {
    return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, self__.port, self__.path, self__.query, self__.anchor, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4883__auto__)), null);
  }
};
cemerick.url.URL.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4880__auto__, k__4881__auto__, G__20737) {
  var self__ = this;
  var this__4880__auto____$1 = this;
  var pred__20741 = cljs.core.keyword_identical_QMARK_;
  var expr__20742 = k__4881__auto__;
  if (cljs.core.truth_(pred__20741.call(null, new cljs.core.Keyword(null, "protocol", "protocol", 652470118), expr__20742))) {
    return new cemerick.url.URL(G__20737, self__.username, self__.password, self__.host, self__.port, self__.path, self__.query, self__.anchor, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__20741.call(null, new cljs.core.Keyword(null, "username", "username", 1605666410), expr__20742))) {
      return new cemerick.url.URL(self__.protocol, G__20737, self__.password, self__.host, self__.port, self__.path, self__.query, self__.anchor, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__20741.call(null, new cljs.core.Keyword(null, "password", "password", 417022471), expr__20742))) {
        return new cemerick.url.URL(self__.protocol, self__.username, G__20737, self__.host, self__.port, self__.path, self__.query, self__.anchor, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__20741.call(null, new cljs.core.Keyword(null, "host", "host", -1558485167), expr__20742))) {
          return new cemerick.url.URL(self__.protocol, self__.username, self__.password, G__20737, self__.port, self__.path, self__.query, self__.anchor, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__20741.call(null, new cljs.core.Keyword(null, "port", "port", 1534937262), expr__20742))) {
            return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, G__20737, self__.path, self__.query, self__.anchor, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__20741.call(null, new cljs.core.Keyword(null, "path", "path", -188191168), expr__20742))) {
              return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, self__.port, G__20737, self__.query, self__.anchor, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__20741.call(null, new cljs.core.Keyword(null, "query", "query", -1288509510), expr__20742))) {
                return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, self__.port, self__.path, G__20737, self__.anchor, self__.__meta, self__.__extmap, null);
              } else {
                if (cljs.core.truth_(pred__20741.call(null, new cljs.core.Keyword(null, "anchor", "anchor", 1549638489), expr__20742))) {
                  return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, self__.port, self__.path, self__.query, G__20737, self__.__meta, self__.__extmap, null);
                } else {
                  return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, self__.port, self__.path, self__.query, self__.anchor, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4881__auto__, G__20737), null);
                }
              }
            }
          }
        }
      }
    }
  }
};
cemerick.url.URL.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4885__auto__) {
  var self__ = this;
  var this__4885__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "protocol", "protocol", 652470118), self__.protocol], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "username", "username", 1605666410), self__.username], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 417022471), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "host", "host", -1558485167), self__.host], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "port", "port", 1534937262), self__.port], null), new cljs.core.PersistentVector(null, 2, 5, 
  cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "path", "path", -188191168), self__.path], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "query", "query", -1288509510), self__.query], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "anchor", "anchor", 1549638489), self__.anchor], null)], null), self__.__extmap));
};
cemerick.url.URL.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4872__auto__, G__20737) {
  var self__ = this;
  var this__4872__auto____$1 = this;
  return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, self__.port, self__.path, self__.query, self__.anchor, G__20737, self__.__extmap, self__.__hash);
};
cemerick.url.URL.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4878__auto__, entry__4879__auto__) {
  var self__ = this;
  var this__4878__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4879__auto__)) {
    return cljs.core._assoc.call(null, this__4878__auto____$1, cljs.core._nth.call(null, entry__4879__auto__, 0), cljs.core._nth.call(null, entry__4879__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4878__auto____$1, entry__4879__auto__);
  }
};
cemerick.url.URL.cljs$lang$type = true;
cemerick.url.URL.cljs$lang$ctorPrSeq = function(this__4907__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cemerick.url/URL");
};
cemerick.url.URL.cljs$lang$ctorPrWriter = function(this__4907__auto__, writer__4908__auto__) {
  return cljs.core._write.call(null, writer__4908__auto__, "cemerick.url/URL");
};
cemerick.url.__GT_URL = function cemerick$url$__GT_URL(protocol, username, password, host, port, path, query, anchor) {
  return new cemerick.url.URL(protocol, username, password, host, port, path, query, anchor, null, null, null);
};
cemerick.url.map__GT_URL = function cemerick$url$map__GT_URL(G__20739) {
  return new cemerick.url.URL((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(G__20739), (new cljs.core.Keyword(null, "username", "username", 1605666410)).cljs$core$IFn$_invoke$arity$1(G__20739), (new cljs.core.Keyword(null, "password", "password", 417022471)).cljs$core$IFn$_invoke$arity$1(G__20739), (new cljs.core.Keyword(null, "host", "host", -1558485167)).cljs$core$IFn$_invoke$arity$1(G__20739), (new cljs.core.Keyword(null, "port", "port", 1534937262)).cljs$core$IFn$_invoke$arity$1(G__20739), 
  (new cljs.core.Keyword(null, "path", "path", -188191168)).cljs$core$IFn$_invoke$arity$1(G__20739), (new cljs.core.Keyword(null, "query", "query", -1288509510)).cljs$core$IFn$_invoke$arity$1(G__20739), (new cljs.core.Keyword(null, "anchor", "anchor", 1549638489)).cljs$core$IFn$_invoke$arity$1(G__20739), null, cljs.core.dissoc.call(null, G__20739, new cljs.core.Keyword(null, "protocol", "protocol", 652470118), new cljs.core.Keyword(null, "username", "username", 1605666410), new cljs.core.Keyword(null, 
  "password", "password", 417022471), new cljs.core.Keyword(null, "host", "host", -1558485167), new cljs.core.Keyword(null, "port", "port", 1534937262), new cljs.core.Keyword(null, "path", "path", -188191168), new cljs.core.Keyword(null, "query", "query", -1288509510), new cljs.core.Keyword(null, "anchor", "anchor", 1549638489)), null);
};
cemerick.url.translate_default = function cemerick$url$translate_default(s, old_default, new_default) {
  if (cljs.core._EQ_.call(null, s, old_default)) {
    return new_default;
  } else {
    return s;
  }
};
cemerick.url.url_STAR_ = function cemerick$url$url_STAR_(url) {
  var url__$1 = new goog.Uri(url);
  var vec__20746 = clojure.string.split.call(null, function() {
    var or__4278__auto__ = url__$1.getUserInfo();
    if (cljs.core.truth_(or__4278__auto__)) {
      return or__4278__auto__;
    } else {
      return "";
    }
  }(), /:/, 2);
  var user = cljs.core.nth.call(null, vec__20746, 0, null);
  var pass = cljs.core.nth.call(null, vec__20746, 1, null);
  return new cemerick.url.URL(url__$1.getScheme(), function() {
    var and__4266__auto__ = cljs.core.seq.call(null, user);
    if (and__4266__auto__) {
      return user;
    } else {
      return and__4266__auto__;
    }
  }(), function() {
    var and__4266__auto__ = cljs.core.seq.call(null, pass);
    if (and__4266__auto__) {
      return pass;
    } else {
      return and__4266__auto__;
    }
  }(), url__$1.getDomain(), cemerick.url.translate_default.call(null, url__$1.getPort(), null, -1), pathetic.core.normalize.call(null, url__$1.getPath()), cemerick.url.query__GT_map.call(null, cemerick.url.translate_default.call(null, url__$1.getQuery(), "", null)), cemerick.url.translate_default.call(null, url__$1.getFragment(), "", null), null, null, null);
};
cemerick.url.url = function cemerick$url$url() {
  var G__20750 = arguments.length;
  switch(G__20750) {
    case 1:
      return cemerick.url.url.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cemerick.url.url.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5329__auto__);
  }
};
cemerick.url.url.cljs$core$IFn$_invoke$arity$1 = function(url) {
  if (url instanceof cemerick.url.URL) {
    return url;
  } else {
    return cemerick.url.url_STAR_.call(null, url);
  }
};
cemerick.url.url.cljs$core$IFn$_invoke$arity$variadic = function(base_url, path_segments) {
  var base_url__$1 = base_url instanceof cemerick.url.URL ? base_url : cemerick.url.url.call(null, base_url);
  return cljs.core.assoc.call(null, base_url__$1, new cljs.core.Keyword(null, "path", "path", -188191168), pathetic.core.normalize.call(null, cljs.core.reduce.call(null, pathetic.core.resolve, (new cljs.core.Keyword(null, "path", "path", -188191168)).cljs$core$IFn$_invoke$arity$1(base_url__$1), path_segments)));
};
cemerick.url.url.cljs$lang$applyTo = function(seq20747) {
  var G__20748 = cljs.core.first.call(null, seq20747);
  var seq20747__$1 = cljs.core.next.call(null, seq20747);
  return cemerick.url.url.cljs$core$IFn$_invoke$arity$variadic(G__20748, seq20747__$1);
};
cemerick.url.url.cljs$lang$maxFixedArity = 1;
goog.provide("yinch.game");
goog.require("cljs.core");
goog.require("clojure.set");
goog.require("cemerick.url");
goog.require("yinch.board");
goog.require("yinch.utils");
yinch.game.line_blocked_QMARK_ = function yinch$game$line_blocked_QMARK_(game, p__11848) {
  var vec__11851 = p__11848;
  var target_major = cljs.core.nth.call(null, vec__11851, 0, null);
  var target_minor = cljs.core.nth.call(null, vec__11851, 1, null);
  var vec__11852 = (new cljs.core.Keyword(null, "highlight-cell", "highlight-cell", -1286629833)).cljs$core$IFn$_invoke$arity$1(game);
  var source_major = cljs.core.nth.call(null, vec__11852, 0, null);
  var source_minor = cljs.core.nth.call(null, vec__11852, 1, null);
  var board = (new cljs.core.Keyword(null, "board", "board", -1907017633)).cljs$core$IFn$_invoke$arity$1(game);
  var major_step = yinch.utils.signum.call(null, target_major - source_major);
  var minor_step = yinch.utils.signum.call(null, target_minor - source_minor);
  var major = source_major + major_step;
  var minor = source_minor + minor_step;
  var hopped = false;
  var last_occupied = false;
  while (true) {
    if (cljs.core._EQ_.call(null, cljs.core.get_in.call(null, board, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor, new cljs.core.Keyword(null, "type", "type", 1174270348)], null)), new cljs.core.Keyword(null, "ring", "ring", -974350330))) {
      return true;
    } else {
      if (cljs.core._EQ_.call(null, cljs.core.get_in.call(null, board, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor, new cljs.core.Keyword(null, "type", "type", 1174270348)], null)), new cljs.core.Keyword(null, "empty", "empty", 767870958)) && !last_occupied && hopped) {
        return true;
      } else {
        if (cljs.core._EQ_.call(null, major, target_major) && cljs.core._EQ_.call(null, minor, target_minor)) {
          return false;
        } else {
          var G__11853 = major + major_step;
          var G__11854 = minor + minor_step;
          var G__11855 = hopped || cljs.core.not_EQ_.call(null, cljs.core.get_in.call(null, board, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor, new cljs.core.Keyword(null, "type", "type", 1174270348)], null)), new cljs.core.Keyword(null, "empty", "empty", 767870958));
          var G__11856 = cljs.core.not_EQ_.call(null, cljs.core.get_in.call(null, board, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor, new cljs.core.Keyword(null, "type", "type", 1174270348)], null)), new cljs.core.Keyword(null, "empty", "empty", 767870958));
          major = G__11853;
          minor = G__11854;
          hopped = G__11855;
          last_occupied = G__11856;
          continue;
        }
      }
    }
    break;
  }
};
yinch.game.flip_between = function yinch$game$flip_between(game, cell_1, cell_2) {
  return cljs.core.assoc.call(null, game, new cljs.core.Keyword(null, "board", "board", -1907017633), cljs.core.reduce.call(null, function(board, p__11859) {
    var vec__11860 = p__11859;
    var major = cljs.core.nth.call(null, vec__11860, 0, null);
    var minor = cljs.core.nth.call(null, vec__11860, 1, null);
    return cljs.core.update_in.call(null, board, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null), function(vec__11860, major, minor) {
      return function(cell) {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cell), new cljs.core.Keyword(null, "tile", "tile", 758132866))) {
          return cljs.core.assoc.call(null, cell, new cljs.core.Keyword(null, "color", "color", 1011675173), yinch.utils.other.call(null, (new cljs.core.Keyword(null, "color", "color", 1011675173)).cljs$core$IFn$_invoke$arity$1(cell)));
        } else {
          return cell;
        }
      };
    }(vec__11860, major, minor));
  }, (new cljs.core.Keyword(null, "board", "board", -1907017633)).cljs$core$IFn$_invoke$arity$1(game), yinch.board.cells_between.call(null, cell_1, cell_2)));
};
yinch.game.axial_steps = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 0], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1], null)], null);
yinch.game.best_run = function yinch$game$best_run(runs, major, minor) {
  var sorted_runs = cljs.core.sort_by.call(null, cljs.core.first, cljs.core.map.call(null, function(p__11867) {
    var vec__11868 = p__11867;
    var vec__11869 = cljs.core.nth.call(null, vec__11868, 0, null);
    var maj1 = cljs.core.nth.call(null, vec__11869, 0, null);
    var mn1 = cljs.core.nth.call(null, vec__11869, 1, null);
    var vec__11870 = cljs.core.nth.call(null, vec__11868, 1, null);
    var maj2 = cljs.core.nth.call(null, vec__11870, 0, null);
    var mn2 = cljs.core.nth.call(null, vec__11870, 1, null);
    var maj_center = (maj1 + maj2) / 2;
    var mn_center = (mn1 + mn2) / 2;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yinch.utils.abs.call(null, maj_center - major) + yinch.utils.abs.call(null, mn_center - minor), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [maj1, mn1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [maj2, mn2], null)], null)], null);
  }, runs));
  var vec__11866 = cljs.core.first.call(null, sorted_runs);
  var best_dist = cljs.core.nth.call(null, vec__11866, 0, null);
  var best_run__$1 = cljs.core.nth.call(null, vec__11866, 1, null);
  if (cljs.core._EQ_.call(null, best_dist, cljs.core.first.call(null, cljs.core.second.call(null, sorted_runs)))) {
    return null;
  } else {
    return best_run__$1;
  }
};
yinch.game.cast_ray = function yinch$game$cast_ray(board, p__11871, p__11872) {
  var vec__11875 = p__11871;
  var test_major = cljs.core.nth.call(null, vec__11875, 0, null);
  var test_minor = cljs.core.nth.call(null, vec__11875, 1, null);
  var vec__11876 = p__11872;
  var major_step = cljs.core.nth.call(null, vec__11876, 0, null);
  var minor_step = cljs.core.nth.call(null, vec__11876, 1, null);
  var color = cljs.core.get_in.call(null, board, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [test_major, test_minor, new cljs.core.Keyword(null, "color", "color", 1011675173)], null));
  var major = test_major;
  var minor = test_minor;
  var extremum = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [test_major, test_minor], null);
  while (true) {
    if (cljs.core.not.call(null, yinch.board.cell_valid_QMARK_.call(null, major, minor))) {
      return extremum;
    } else {
      if (cljs.core.not_EQ_.call(null, new cljs.core.Keyword(null, "tile", "tile", 758132866), cljs.core.get_in.call(null, board, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor, new cljs.core.Keyword(null, "type", "type", 1174270348)], null)))) {
        return extremum;
      } else {
        if (cljs.core._EQ_.call(null, color, cljs.core.get_in.call(null, board, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor, new cljs.core.Keyword(null, "color", "color", 1011675173)], null)))) {
          var G__11877 = major + major_step;
          var G__11878 = minor + minor_step;
          var G__11879 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null);
          major = G__11877;
          minor = G__11878;
          extremum = G__11879;
          continue;
        } else {
          return extremum;
        }
      }
    }
    break;
  }
};
yinch.game.find_runs_STAR_ = function yinch$game$find_runs_STAR_(board, p__11880) {
  var vec__11893 = p__11880;
  var test_major = cljs.core.nth.call(null, vec__11893, 0, null);
  var test_minor = cljs.core.nth.call(null, vec__11893, 1, null);
  var G__11896 = yinch.game.axial_steps;
  var vec__11897 = G__11896;
  var vec__11898 = cljs.core.nth.call(null, vec__11897, 0, null);
  var major_step = cljs.core.nth.call(null, vec__11898, 0, null);
  var minor_step = cljs.core.nth.call(null, vec__11898, 1, null);
  var remaining_axes = cljs.core.nthnext.call(null, vec__11897, 1);
  var runs = cljs.core.PersistentHashSet.EMPTY;
  var G__11896__$1 = G__11896;
  var runs__$1 = runs;
  while (true) {
    var vec__11899 = G__11896__$1;
    var vec__11900 = cljs.core.nth.call(null, vec__11899, 0, null);
    var major_step__$1 = cljs.core.nth.call(null, vec__11900, 0, null);
    var minor_step__$1 = cljs.core.nth.call(null, vec__11900, 1, null);
    var remaining_axes__$1 = cljs.core.nthnext.call(null, vec__11899, 1);
    var runs__$2 = runs__$1;
    var maximum = yinch.game.cast_ray.call(null, board, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [test_major, test_minor], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major_step__$1, minor_step__$1], null));
    var minimum = yinch.game.cast_ray.call(null, board, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [test_major, test_minor], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [-1 * major_step__$1, -1 * minor_step__$1], null));
    var run_length = function() {
      var x__4590__auto__ = maximum.call(null, 0) - minimum.call(null, 0) - -1;
      var y__4591__auto__ = maximum.call(null, 1) - minimum.call(null, 1) - -1;
      return x__4590__auto__ > y__4591__auto__ ? x__4590__auto__ : y__4591__auto__;
    }();
    var run_count = run_length - 4;
    var updated_runs = cljs.core.into.call(null, runs__$2, function() {
      var iter__5032__auto__ = function(G__11896__$1, runs__$1, maximum, minimum, run_length, run_count, vec__11899, vec__11900, major_step__$1, minor_step__$1, remaining_axes__$1, runs__$2, G__11896, vec__11897, vec__11898, major_step, minor_step, remaining_axes, runs, vec__11893, test_major, test_minor) {
        return function yinch$game$find_runs_STAR__$_iter__11901(s__11902) {
          return new cljs.core.LazySeq(null, function(G__11896__$1, runs__$1, maximum, minimum, run_length, run_count, vec__11899, vec__11900, major_step__$1, minor_step__$1, remaining_axes__$1, runs__$2, G__11896, vec__11897, vec__11898, major_step, minor_step, remaining_axes, runs, vec__11893, test_major, test_minor) {
            return function() {
              var s__11902__$1 = s__11902;
              while (true) {
                var temp__4425__auto__ = cljs.core.seq.call(null, s__11902__$1);
                if (temp__4425__auto__) {
                  var s__11902__$2 = temp__4425__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__11902__$2)) {
                    var c__5030__auto__ = cljs.core.chunk_first.call(null, s__11902__$2);
                    var size__5031__auto__ = cljs.core.count.call(null, c__5030__auto__);
                    var b__11904 = cljs.core.chunk_buffer.call(null, size__5031__auto__);
                    if (function() {
                      var i__11903 = 0;
                      while (true) {
                        if (i__11903 < size__5031__auto__) {
                          var offset = cljs.core._nth.call(null, c__5030__auto__, i__11903);
                          cljs.core.chunk_append.call(null, b__11904, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [minimum.call(null, 0) + offset * major_step__$1, minimum.call(null, 1) + offset * minor_step__$1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [minimum.call(null, 0) + offset * major_step__$1 + major_step__$1 * 4, minimum.call(null, 
                          1) + offset * minor_step__$1 + minor_step__$1 * 4], null)], null));
                          var G__11905 = i__11903 + 1;
                          i__11903 = G__11905;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11904), yinch$game$find_runs_STAR__$_iter__11901.call(null, cljs.core.chunk_rest.call(null, s__11902__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11904), null);
                    }
                  } else {
                    var offset = cljs.core.first.call(null, s__11902__$2);
                    return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [minimum.call(null, 0) + offset * major_step__$1, minimum.call(null, 1) + offset * minor_step__$1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [minimum.call(null, 0) + offset * major_step__$1 + major_step__$1 * 4, minimum.call(null, 1) + 
                    offset * minor_step__$1 + minor_step__$1 * 4], null)], null), yinch$game$find_runs_STAR__$_iter__11901.call(null, cljs.core.rest.call(null, s__11902__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(G__11896__$1, runs__$1, maximum, minimum, run_length, run_count, vec__11899, vec__11900, major_step__$1, minor_step__$1, remaining_axes__$1, runs__$2, G__11896, vec__11897, vec__11898, major_step, minor_step, remaining_axes, runs, vec__11893, test_major, test_minor), null, null);
        };
      }(G__11896__$1, runs__$1, maximum, minimum, run_length, run_count, vec__11899, vec__11900, major_step__$1, minor_step__$1, remaining_axes__$1, runs__$2, G__11896, vec__11897, vec__11898, major_step, minor_step, remaining_axes, runs, vec__11893, test_major, test_minor);
      return iter__5032__auto__.call(null, cljs.core.range.call(null, function() {
        var x__4590__auto__ = 0;
        var y__4591__auto__ = run_count;
        return x__4590__auto__ > y__4591__auto__ ? x__4590__auto__ : y__4591__auto__;
      }()));
    }());
    if (cljs.core.seq.call(null, remaining_axes__$1)) {
      var G__11906 = remaining_axes__$1;
      var G__11907 = updated_runs;
      G__11896__$1 = G__11906;
      runs__$1 = G__11907;
      continue;
    } else {
      return updated_runs;
    }
    break;
  }
};
yinch.game.find_runs = function yinch$game$find_runs(board, cells_to_consider) {
  return cljs.core.apply.call(null, clojure.set.union, cljs.core.map.call(null, cljs.core.partial.call(null, yinch.game.find_runs_STAR_, board), cells_to_consider));
};
yinch.game.mutually_exclusive_QMARK_ = function yinch$game$mutually_exclusive_QMARK_(runs) {
  var run_membership = cljs.core.reduce.call(null, function(acc, p__11910) {
    var vec__11911 = p__11910;
    var from = cljs.core.nth.call(null, vec__11911, 0, null);
    var to = cljs.core.nth.call(null, vec__11911, 1, null);
    return clojure.set.union.call(null, acc, cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, yinch.board.cells_between.call(null, from, to)));
  }, cljs.core.PersistentHashSet.EMPTY, runs);
  return cljs.core._EQ_.call(null, cljs.core.count.call(null, run_membership), 5 * cljs.core.count.call(null, runs));
};
yinch.game.check_victory = function yinch$game$check_victory(game, player) {
  var ring_count = player.call(null, (new cljs.core.Keyword(null, "rings-remaining", "rings-remaining", 742473055)).cljs$core$IFn$_invoke$arity$1(game));
  var effective_ring_count = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "turn", "turn", 75759344)).cljs$core$IFn$_invoke$arity$1(game), player) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "phase", "phase", 575722892)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "ring-removal", "ring-removal", 1265560688)) ? ring_count - 1 : ring_count;
  if (effective_ring_count < 3) {
    return cljs.core.assoc.call(null, cljs.core.assoc.call(null, game, new cljs.core.Keyword(null, "phase", "phase", 575722892), new cljs.core.Keyword(null, "victory", "victory", 782027403)), new cljs.core.Keyword(null, "winner", "winner", 714604679), player);
  } else {
    return game;
  }
};
yinch.game.clear_adtl_runs = function yinch$game$clear_adtl_runs(game, player) {
  return yinch.game.clear_runs.call(null, game, yinch.board.cells, player);
};
yinch.game.clear_run = function yinch$game$clear_run() {
  var G__11914 = arguments.length;
  switch(G__11914) {
    case 2:
      return yinch.game.clear_run.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return yinch.game.clear_run.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
yinch.game.clear_run.cljs$core$IFn$_invoke$arity$2 = function(game, run) {
  return yinch.game.clear_run.call(null, game, run, null);
};
yinch.game.clear_run.cljs$core$IFn$_invoke$arity$3 = function(game, p__11915, click_position) {
  var vec__11916 = p__11915;
  var run_start = cljs.core.nth.call(null, vec__11916, 0, null);
  var run_end = cljs.core.nth.call(null, vec__11916, 1, null);
  var run_color = cljs.core.get_in.call(null, game, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "board", "board", -1907017633), run_start.call(null, 0), run_start.call(null, 1), new cljs.core.Keyword(null, "color", "color", 1011675173)], null));
  return cljs.core.reduce.call(null, function(run_color, vec__11916, run_start, run_end) {
    return function(game__$1, p__11917) {
      var vec__11918 = p__11917;
      var major = cljs.core.nth.call(null, vec__11918, 0, null);
      var minor = cljs.core.nth.call(null, vec__11918, 1, null);
      return cljs.core.assoc_in.call(null, game__$1, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "board", "board", -1907017633), major, minor], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "empty", "empty", 767870958)], null));
    };
  }(run_color, vec__11916, run_start, run_end), cljs.core.update_in.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, game, new cljs.core.Keyword(null, "turn", "turn", 75759344), run_color), new cljs.core.Keyword(null, "phase", "phase", 575722892), new cljs.core.Keyword(null, "ring-removal", "ring-removal", 1265560688)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "history", "history", -247395220)], null), function(run_color, 
  vec__11916, run_start, run_end) {
    return function(p1__11912_SHARP_) {
      return cljs.core.conj.call(null, p1__11912_SHARP_, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "action", "action", -811238024), new cljs.core.Keyword(null, "clear-run", "clear-run", 830783369), new cljs.core.Keyword(null, "player", "player", -97687400), (new cljs.core.Keyword(null, "turn", "turn", 75759344)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "run-start", "run-start", 1984981840), run_start, new cljs.core.Keyword(null, "run-end", "run-end", 
      1293087716), run_end, new cljs.core.Keyword(null, "click-position", "click-position", -966093927), click_position], null));
    };
  }(run_color, vec__11916, run_start, run_end)), yinch.board.cells_between.call(null, run_start, run_end));
};
yinch.game.clear_run.cljs$lang$maxFixedArity = 3;
yinch.game.clear_runs_for_player = function yinch$game$clear_runs_for_player(game, player, runs) {
  var first_run = cljs.core.first.call(null, runs);
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, runs), 0)) {
    return game;
  } else {
    if (cljs.core.truth_(yinch.game.mutually_exclusive_QMARK_.call(null, runs))) {
      return yinch.game.check_victory.call(null, yinch.game.clear_run.call(null, game, first_run), player);
    } else {
      return yinch.game.check_victory.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, game, new cljs.core.Keyword(null, "phase", "phase", 575722892), new cljs.core.Keyword(null, "run-pick", "run-pick", -1842216705)), new cljs.core.Keyword(null, "turn", "turn", 75759344), player), player);
    }
  }
};
yinch.game.clear_runs = function yinch$game$clear_runs() {
  var G__11921 = arguments.length;
  switch(G__11921) {
    case 2:
      return yinch.game.clear_runs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return yinch.game.clear_runs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
yinch.game.clear_runs.cljs$core$IFn$_invoke$arity$2 = function(game, cells_to_consider) {
  return yinch.game.clear_runs.call(null, game, cells_to_consider, (new cljs.core.Keyword(null, "turn", "turn", 75759344)).cljs$core$IFn$_invoke$arity$1(game));
};
yinch.game.clear_runs.cljs$core$IFn$_invoke$arity$3 = function(game, cells_to_consider, first_player) {
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "white", "white", -483998618), null, new cljs.core.Keyword(null, "black", "black", 1294279647), null], null), null), first_player)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "white", "white", -483998618), null, new cljs.core.Keyword(null, "black", "black", 1294279647), null], null), null), new cljs.core.Symbol(null, "first-player", "first-player", -1737016922, null))))].join(""));
  }
  var runs = yinch.game.find_runs.call(null, (new cljs.core.Keyword(null, "board", "board", -1907017633)).cljs$core$IFn$_invoke$arity$1(game), cells_to_consider);
  var p_runs = cljs.core.group_by.call(null, function(runs) {
    return function(p__11922) {
      var vec__11923 = p__11922;
      var vec__11924 = cljs.core.nth.call(null, vec__11923, 0, null);
      var maj = cljs.core.nth.call(null, vec__11924, 0, null);
      var mn = cljs.core.nth.call(null, vec__11924, 1, null);
      var _ = cljs.core.nthnext.call(null, vec__11923, 1);
      return cljs.core.get_in.call(null, game, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "board", "board", -1907017633), maj, mn, new cljs.core.Keyword(null, "color", "color", 1011675173)], null));
    };
  }(runs), runs);
  if (cljs.core.seq.call(null, p_runs.call(null, first_player))) {
    return yinch.game.clear_runs_for_player.call(null, game, first_player, p_runs.call(null, first_player));
  } else {
    if (cljs.core.seq.call(null, p_runs.call(null, yinch.utils.other.call(null, first_player)))) {
      return yinch.game.clear_runs_for_player.call(null, game, yinch.utils.other.call(null, first_player), p_runs.call(null, yinch.utils.other.call(null, first_player)));
    } else {
      return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, game, new cljs.core.Keyword(null, "turn", "turn", 75759344), (new cljs.core.Keyword(null, "next-ring-picker", "next-ring-picker", 1195671905)).cljs$core$IFn$_invoke$arity$1(game)), new cljs.core.Keyword(null, "next-ring-picker", "next-ring-picker", 1195671905));
    }
  }
};
yinch.game.clear_runs.cljs$lang$maxFixedArity = 3;
yinch.game.urlize = function yinch$game$urlize() {
  var G__11927 = arguments.length;
  switch(G__11927) {
    case 1:
      return yinch.game.urlize.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return yinch.game.urlize.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
yinch.game.urlize.cljs$core$IFn$_invoke$arity$1 = function(game) {
  return yinch.game.urlize.call(null, game, "http://localhost:3000");
};
yinch.game.urlize.cljs$core$IFn$_invoke$arity$2 = function(game, base) {
  return[cljs.core.str(cljs.core.assoc.call(null, cemerick.url.url.call(null, base, "index.html"), new cljs.core.Keyword(null, "anchor", "anchor", 1549638489), cemerick.url.url_encode.call(null, cljs.core.prn_str.call(null, game))))].join("");
};
yinch.game.urlize.cljs$lang$maxFixedArity = 2;
yinch.game.gipf_pad = function yinch$game$gipf_pad(s) {
  return cljs.core.apply.call(null, cljs.core.str, s, cljs.core.map.call(null, cljs.core.constantly.call(null, " "), cljs.core.range.call(null, 26 - cljs.core.count.call(null, s))));
};
yinch.game.gipf_sep = function yinch$game$gipf_sep(move) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "player", "player", -97687400)).cljs$core$IFn$_invoke$arity$1(move), new cljs.core.Keyword(null, "white", "white", -483998618))) {
    return "\t";
  } else {
    return "\n";
  }
};
yinch.game.game__GT_script = function yinch$game$game__GT_script(p__11929) {
  var map__11932 = p__11929;
  var map__11932__$1 = cljs.core.seq_QMARK_.call(null, map__11932) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11932) : map__11932;
  var history = cljs.core.get.call(null, map__11932__$1, new cljs.core.Keyword(null, "history", "history", -247395220));
  return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.reduce.call(null, function(map__11932, map__11932__$1, history) {
    return function(script, move) {
      var G__11933 = (new cljs.core.Keyword(null, "action", "action", -811238024)).cljs$core$IFn$_invoke$arity$1(move) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "action", "action", -811238024)).cljs$core$IFn$_invoke$arity$1(move).fqn : null;
      switch(G__11933) {
        case "place-ring":
          return cljs.core.conj.call(null, script, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "player", "player", -97687400)).cljs$core$IFn$_invoke$arity$1(move), (new cljs.core.Keyword(null, "position", "position", -2011731912)).cljs$core$IFn$_invoke$arity$1(move).call(null, 0), (new cljs.core.Keyword(null, "position", "position", -2011731912)).cljs$core$IFn$_invoke$arity$1(move).call(null, 1)], null));
          break;
        case "ring-move":
          return cljs.core.conj.call(null, script, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "player", "player", -97687400)).cljs$core$IFn$_invoke$arity$1(move), (new cljs.core.Keyword(null, "stop", "stop", -2140911342)).cljs$core$IFn$_invoke$arity$1(move).call(null, 0), (new cljs.core.Keyword(null, "stop", "stop", -2140911342)).cljs$core$IFn$_invoke$arity$1(move).call(null, 1)], null), new cljs.core.PersistentVector(null, 3, 5, 
          cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "player", "player", -97687400)).cljs$core$IFn$_invoke$arity$1(move), (new cljs.core.Keyword(null, "start", "start", -355208981)).cljs$core$IFn$_invoke$arity$1(move).call(null, 0), (new cljs.core.Keyword(null, "start", "start", -355208981)).cljs$core$IFn$_invoke$arity$1(move).call(null, 1)], null));
          break;
        case "clear-run":
          if ((new cljs.core.Keyword(null, "click-position", "click-position", -966093927)).cljs$core$IFn$_invoke$arity$1(move) == null) {
            return script;
          } else {
            return cljs.core.conj.call(null, script, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "player", "player", -97687400)).cljs$core$IFn$_invoke$arity$1(move), (new cljs.core.Keyword(null, "click-position", "click-position", -966093927)).cljs$core$IFn$_invoke$arity$1(move).call(null, 0), (new cljs.core.Keyword(null, "click-position", "click-position", -966093927)).cljs$core$IFn$_invoke$arity$1(move).call(null, 1)], null));
          }
          break;
        case "remove-ring":
          return cljs.core.conj.call(null, script, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "player", "player", -97687400)).cljs$core$IFn$_invoke$arity$1(move), (new cljs.core.Keyword(null, "ring-position", "ring-position", -495482370)).cljs$core$IFn$_invoke$arity$1(move).call(null, 0), (new cljs.core.Keyword(null, "ring-position", "ring-position", -495482370)).cljs$core$IFn$_invoke$arity$1(move).call(null, 1)], null));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str((new cljs.core.Keyword(null, "action", "action", -811238024)).cljs$core$IFn$_invoke$arity$1(move))].join(""));;
      }
    };
  }(map__11932, map__11932__$1, history), null, history));
};
yinch.game.new_game = function yinch$game$new_game() {
  var G__11936 = arguments.length;
  switch(G__11936) {
    case 0:
      return yinch.game.new_game.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return yinch.game.new_game.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
yinch.game.new_game.cljs$core$IFn$_invoke$arity$0 = function() {
  return yinch.game.new_game.call(null, true);
};
yinch.game.new_game.cljs$core$IFn$_invoke$arity$1 = function(track_history) {
  return new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "board", "board", -1907017633), yinch.board.make_board.call(null), new cljs.core.Keyword(null, "phase", "phase", 575722892), new cljs.core.Keyword(null, "ring-placement", "ring-placement", 939233636), new cljs.core.Keyword(null, "turn", "turn", 75759344), new cljs.core.Keyword(null, "white", "white", -483998618), new cljs.core.Keyword(null, "rings-placed", "rings-placed", -1246402930), 0, new cljs.core.Keyword(null, "highlight-cell", 
  "highlight-cell", -1286629833), null, new cljs.core.Keyword(null, "rings-remaining", "rings-remaining", 742473055), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "black", "black", 1294279647), 5, new cljs.core.Keyword(null, "white", "white", -483998618), 5], null), new cljs.core.Keyword(null, "track-history", "track-history", -250159393), track_history, new cljs.core.Keyword(null, "history", "history", -247395220), null], null);
};
yinch.game.new_game.cljs$lang$maxFixedArity = 1;
yinch.game.place_ring = function yinch$game$place_ring(game, player, major, minor) {
  var cell = yinch.board.get_cell.call(null, (new cljs.core.Keyword(null, "board", "board", -1907017633)).cljs$core$IFn$_invoke$arity$1(game), major, minor);
  if (cljs.core.not_EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cell), new cljs.core.Keyword(null, "empty", "empty", 767870958))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "reason", "reason", -2070751759), "You can not place a ring in an occupied cell."], null), game], null);
  } else {
    var updated_game = cljs.core.assoc_in.call(null, cljs.core.update_in.call(null, game, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "rings-placed", "rings-placed", -1246402930)], null), cljs.core.inc), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "board", "board", -1907017633), major, minor], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
    "type", "type", 1174270348), new cljs.core.Keyword(null, "ring", "ring", -974350330), new cljs.core.Keyword(null, "color", "color", 1011675173), player], null));
    var status = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "history", "history", -247395220), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "action", "action", -811238024), new cljs.core.Keyword(null, "place-ring", "place-ring", -1640618086), new cljs.core.Keyword(null, "position", 
    "position", -2011731912), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null), new cljs.core.Keyword(null, "player", "player", -97687400), player], null))], null);
    if ((new cljs.core.Keyword(null, "rings-placed", "rings-placed", -1246402930)).cljs$core$IFn$_invoke$arity$1(updated_game) >= 10) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [status, cljs.core.assoc.call(null, cljs.core.assoc.call(null, updated_game, new cljs.core.Keyword(null, "phase", "phase", 575722892), new cljs.core.Keyword(null, "ring-pick", "ring-pick", 65558159)), new cljs.core.Keyword(null, "turn", "turn", 75759344), new cljs.core.Keyword(null, "black", "black", 1294279647))], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [status, cljs.core.assoc.call(null, updated_game, new cljs.core.Keyword(null, "turn", "turn", 75759344), yinch.utils.other.call(null, player))], null);
    }
  }
};
yinch.game.pick_ring = function yinch$game$pick_ring(game, player, major, minor) {
  var cell = yinch.board.get_cell.call(null, (new cljs.core.Keyword(null, "board", "board", -1907017633)).cljs$core$IFn$_invoke$arity$1(game), major, minor);
  if (cljs.core.not_EQ_.call(null, cell, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "ring", "ring", -974350330), new cljs.core.Keyword(null, "color", "color", 1011675173), player], null))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "reason", "reason", -2070751759), "You can only move rings of your own color."], null), game], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "success", "success", 1890645906)], null), cljs.core.assoc.call(null, cljs.core.assoc.call(null, game, new cljs.core.Keyword(null, "highlight-cell", "highlight-cell", -1286629833), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], 
    null)), new cljs.core.Keyword(null, "phase", "phase", 575722892), new cljs.core.Keyword(null, "ring-drop", "ring-drop", 1096995993))], null);
  }
};
yinch.game.drop_ring = function yinch$game$drop_ring(game, player, major, minor) {
  var vec__11940 = (new cljs.core.Keyword(null, "highlight-cell", "highlight-cell", -1286629833)).cljs$core$IFn$_invoke$arity$1(game);
  var from_major = cljs.core.nth.call(null, vec__11940, 0, null);
  var from_minor = cljs.core.nth.call(null, vec__11940, 1, null);
  if (cljs.core.truth_(function() {
    var or__4278__auto__ = cljs.core.not.call(null, yinch.board.line_valid_QMARK_.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [from_major, from_minor], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null)));
    if (or__4278__auto__) {
      return or__4278__auto__;
    } else {
      var or__4278__auto____$1 = cljs.core.not_EQ_.call(null, cljs.core.get_in.call(null, game, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "board", "board", -1907017633), major, minor, new cljs.core.Keyword(null, "type", "type", 1174270348)], null)), new cljs.core.Keyword(null, "empty", "empty", 767870958));
      if (or__4278__auto____$1) {
        return or__4278__auto____$1;
      } else {
        return yinch.game.line_blocked_QMARK_.call(null, game, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null));
      }
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "reason", "reason", -2070751759), "Not a valid move."], null), game], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "success", "success", 1890645906)], null), yinch.game.clear_runs.call(null, cljs.core.update_in.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc_in.call(null, yinch.game.flip_between.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, 
    game, new cljs.core.Keyword(null, "next-ring-picker", "next-ring-picker", 1195671905), yinch.utils.other.call(null, (new cljs.core.Keyword(null, "turn", "turn", 75759344)).cljs$core$IFn$_invoke$arity$1(game))), new cljs.core.Keyword(null, "highlight-cell", "highlight-cell", -1286629833), null), new cljs.core.Keyword(null, "phase", "phase", 575722892), new cljs.core.Keyword(null, "ring-pick", "ring-pick", 65558159)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [from_major, from_minor], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null)), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "board", "board", -1907017633), from_major, from_minor, new cljs.core.Keyword(null, "type", "type", 1174270348)], null), new cljs.core.Keyword(null, "tile", "tile", 758132866)), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [new cljs.core.Keyword(null, "board", "board", -1907017633), major, minor], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "ring", "ring", -974350330), new cljs.core.Keyword(null, "color", "color", 1011675173), (new cljs.core.Keyword(null, "turn", "turn", 75759344)).cljs$core$IFn$_invoke$arity$1(game)], null)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
    "history", "history", -247395220)], null), function(vec__11940, from_major, from_minor) {
      return function(p1__11938_SHARP_) {
        return cljs.core.conj.call(null, p1__11938_SHARP_, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "action", "action", -811238024), new cljs.core.Keyword(null, "ring-move", "ring-move", 122464084), new cljs.core.Keyword(null, "player", "player", -97687400), player, new cljs.core.Keyword(null, "start", "start", -355208981), (new cljs.core.Keyword(null, "highlight-cell", "highlight-cell", -1286629833)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "stop", 
        "stop", -2140911342), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null)], null));
      };
    }(vec__11940, from_major, from_minor)), yinch.board.cells_between.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [from_major, from_minor], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null)), (new cljs.core.Keyword(null, "turn", "turn", 75759344)).cljs$core$IFn$_invoke$arity$1(game))], null);
  }
};
yinch.game.pick_run = function yinch$game$pick_run(game, player, major, minor) {
  var run = yinch.game.best_run.call(null, yinch.game.find_runs.call(null, (new cljs.core.Keyword(null, "board", "board", -1907017633)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null)], null)), major, minor);
  if (run == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "reason", "reason", -2070751759), "That cell isn't a part of any run."], null), game], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "success", "success", 1890645906)], null), yinch.game.clear_run.call(null, game, run, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null))], null);
  }
};
yinch.game.remove_ring = function yinch$game$remove_ring(game, player, major, minor) {
  var cell = yinch.board.get_cell.call(null, (new cljs.core.Keyword(null, "board", "board", -1907017633)).cljs$core$IFn$_invoke$arity$1(game), major, minor);
  if (cljs.core.not_EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cell), new cljs.core.Keyword(null, "ring", "ring", -974350330))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "reason", "reason", -2070751759), "You must pick a ring to remove from the board."], null), game], null);
  } else {
    if (cljs.core.not_EQ_.call(null, (new cljs.core.Keyword(null, "color", "color", 1011675173)).cljs$core$IFn$_invoke$arity$1(cell), player)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "reason", "reason", -2070751759), "You must pick a ring of your own color to remove."], null), game], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "history", "history", -247395220), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "action", "action", -811238024), new cljs.core.Keyword(null, 
      "remove-ring", "remove-ring", -329228090), new cljs.core.Keyword(null, "player", "player", -97687400), player, new cljs.core.Keyword(null, "ring-position", "ring-position", -495482370), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null)], null))], null), yinch.game.clear_adtl_runs.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, cljs.core.update_in.call(null, cljs.core.assoc_in.call(null, game, new cljs.core.PersistentVector(null, 
      3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "board", "board", -1907017633), major, minor], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "empty", "empty", 767870958)], null)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "rings-remaining", "rings-remaining", 742473055), player], null), cljs.core.dec), new cljs.core.Keyword(null, 
      "turn", "turn", 75759344), yinch.utils.other.call(null, player)), new cljs.core.Keyword(null, "phase", "phase", 575722892), new cljs.core.Keyword(null, "ring-pick", "ring-pick", 65558159)), player)], null);
    }
  }
};
yinch.game.intrepret_click = function yinch$game$intrepret_click(game, player, major, minor) {
  if (cljs.core.not.call(null, yinch.board.cell_valid_QMARK_.call(null, major, minor))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "reason", "reason", -2070751759), "Not a valid board position."], null), game], null);
  } else {
    if (cljs.core.not_EQ_.call(null, player, (new cljs.core.Keyword(null, "turn", "turn", 75759344)).cljs$core$IFn$_invoke$arity$1(game))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "reason", "reason", -2070751759), "Not your turn."], null), game], null);
    } else {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "phase", "phase", 575722892)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "ring-placement", "ring-placement", 939233636))) {
        return yinch.game.place_ring.call(null, game, player, major, minor);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "phase", "phase", 575722892)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "ring-pick", "ring-pick", 65558159))) {
          return yinch.game.pick_ring.call(null, game, player, major, minor);
        } else {
          if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "phase", "phase", 575722892)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "ring-drop", "ring-drop", 1096995993))) {
            return yinch.game.drop_ring.call(null, game, player, major, minor);
          } else {
            if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "phase", "phase", 575722892)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "run-pick", "run-pick", -1842216705))) {
              return yinch.game.pick_run.call(null, game, player, major, minor);
            } else {
              if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "phase", "phase", 575722892)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "ring-removal", "ring-removal", 1265560688))) {
                return yinch.game.remove_ring.call(null, game, player, major, minor);
              } else {
                if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "phase", "phase", 575722892)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "victory", "victory", 782027403))) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "reason", "reason", -2070751759), "The game is over, no futher moves allowed."], null), game], null);
                } else {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "reason", "reason", -2070751759), "Game appears to be in an invalid state.", new cljs.core.Keyword(null, "game-phase", "game-phase", 456680589), (new cljs.core.Keyword(null, "phase", "phase", 575722892)).cljs$core$IFn$_invoke$arity$1(game)], 
                  null), null], null);
                }
              }
            }
          }
        }
      }
    }
  }
};
yinch.game.intrepret_move = function yinch$game$intrepret_move(game, move) {
  var _PERCENT_ = function() {
    var vec__11945 = function() {
      var G__11946 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(move) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(move).fqn : null;
      switch(G__11946) {
        case "grid-click":
          return cljs.core.apply.call(null, yinch.game.intrepret_click, game, (new cljs.core.Keyword(null, "click-info", "click-info", 1742344538)).cljs$core$IFn$_invoke$arity$1(move));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str((new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(move))].join(""));;
      }
    }();
    var status = cljs.core.nth.call(null, vec__11945, 0, null);
    var new_game = cljs.core.nth.call(null, vec__11945, 1, null);
    if (cljs.core.truth_(function() {
      var and__4266__auto__ = (new cljs.core.Keyword(null, "track-history", "track-history", -250159393)).cljs$core$IFn$_invoke$arity$1(game);
      if (cljs.core.truth_(and__4266__auto__)) {
        return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "status", "status", -1997798413)).cljs$core$IFn$_invoke$arity$1(status), new cljs.core.Keyword(null, "success", "success", 1890645906));
      } else {
        return and__4266__auto__;
      }
    }())) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [status, cljs.core.update_in.call(null, new_game, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "history", "history", -247395220)], null), function(vec__11945, status, new_game) {
        return function(p1__11941_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.conj, p1__11941_SHARP_, (new cljs.core.Keyword(null, "history", "history", -247395220)).cljs$core$IFn$_invoke$arity$1(status));
        };
      }(vec__11945, status, new_game))], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [status, new_game], null);
    }
  }();
  if (cljs.core.truth_(function() {
    var G__11947 = cljs.core.get_in.call(null, _PERCENT_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, new cljs.core.Keyword(null, "status", "status", -1997798413)], null)) instanceof cljs.core.Keyword ? cljs.core.get_in.call(null, _PERCENT_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, new cljs.core.Keyword(null, "status", "status", -1997798413)], null)).fqn : null;
    switch(G__11947) {
      case "success":
        return true;
        break;
      case "failure":
        return cljs.core._EQ_.call(null, _PERCENT_.call(null, 1), game);
        break;
      case "error":
        return _PERCENT_ == null;
        break;
      default:
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(cljs.core.get_in.call(null, _PERCENT_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, new cljs.core.Keyword(null, "status", "status", -1997798413)], null)))].join(""));;
    }
  }())) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "case", "case", -1510733573, null), cljs.core.list(new cljs.core.Symbol(null, "get-in", "get-in", -1965644065, null), new cljs.core.Symbol(null, "%", "%", -950237169, null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, new cljs.core.Keyword(null, "status", "status", -1997798413)], null)), new cljs.core.Keyword(null, "success", 
    "success", 1890645906), true, new cljs.core.Keyword(null, "failure", "failure", 720415879), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), cljs.core.list(new cljs.core.Symbol(null, "%", "%", -950237169, null), 1), new cljs.core.Symbol(null, "game", "game", 1199007694, null)), new cljs.core.Keyword(null, "error", "error", -978969032), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "%", "%", -950237169, null)))))].join(""));
  }
  return _PERCENT_;
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj15383 = {};
  return obj15383;
}();
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (function() {
    var and__4266__auto__ = port;
    if (and__4266__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4914__auto__ = port == null ? null : port;
    return function() {
      var or__4278__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj15385 = {};
  return obj15385;
}();
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__4266__auto__ = port;
    if (and__4266__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4914__auto__ = port == null ? null : port;
    return function() {
      var or__4278__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj15387 = {};
  return obj15387;
}();
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (function() {
    var and__4266__auto__ = chan;
    if (and__4266__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4914__auto__ = chan == null ? null : chan;
    return function() {
      var or__4278__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (function() {
    var and__4266__auto__ = chan;
    if (and__4266__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4914__auto__ = chan == null ? null : chan;
    return function() {
      var or__4278__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj15389 = {};
  return obj15389;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (function() {
    var and__4266__auto__ = h;
    if (and__4266__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4914__auto__ = h == null ? null : h;
    return function() {
      var or__4278__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.blockable_QMARK_ = function cljs$core$async$impl$protocols$blockable_QMARK_(h) {
  if (function() {
    var and__4266__auto__ = h;
    if (and__4266__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1(h);
  } else {
    var x__4914__auto__ = h == null ? null : h;
    return function() {
      var or__4278__auto__ = cljs.core.async.impl.protocols.blockable_QMARK_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.impl.protocols.blockable_QMARK_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.blockable?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (function() {
    var and__4266__auto__ = h;
    if (and__4266__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4914__auto__ = h == null ? null : h;
    return function() {
      var or__4278__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj15391 = {};
  return obj15391;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (function() {
    var and__4266__auto__ = b;
    if (and__4266__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4914__auto__ = b == null ? null : b;
    return function() {
      var or__4278__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (function() {
    var and__4266__auto__ = b;
    if (and__4266__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4914__auto__ = b == null ? null : b;
    return function() {
      var or__4278__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (function() {
    var and__4266__auto__ = b;
    if (and__4266__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4914__auto__ = b == null ? null : b;
    return function() {
      var or__4278__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.close_buf_BANG_ = function cljs$core$async$impl$protocols$close_buf_BANG_(b) {
  if (function() {
    var and__4266__auto__ = b;
    if (and__4266__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1(b);
  } else {
    var x__4914__auto__ = b == null ? null : b;
    return function() {
      var or__4278__auto__ = cljs.core.async.impl.protocols.close_buf_BANG_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.impl.protocols.close_buf_BANG_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.close-buf!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function cljs$core$async$impl$protocols$add_BANG_() {
  var G__15393 = arguments.length;
  switch(G__15393) {
    case 1:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1 = function(b) {
  return b;
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2 = function(b, itm) {
  if (!(itm == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
  }
  return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
};
cljs.core.async.impl.protocols.add_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj15396 = {};
  return obj15396;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__15399 = cnt + 1;
      cnt = G__15399;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__5163__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__5163__auto__) {
      var v_15400 = this$.pop();
      if (keep_QMARK_.call(null, v_15400)) {
        this$.unshift(v_15400);
      } else {
      }
      var G__15401 = x + 1;
      x = G__15401;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
if (typeof cljs.core.async.impl.buffers.NO_VAL !== "undefined") {
} else {
  cljs.core.async.impl.buffers.NO_VAL = new Object;
}
cljs.core.async.impl.buffers.undelivered_QMARK_ = function cljs$core$async$impl$buffers$undelivered_QMARK_(val) {
  return cljs.core.async.impl.buffers.NO_VAL === val;
};
cljs.core.async.impl.buffers.PromiseBuffer = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return false;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    self__.val = itm;
  } else {
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    return self__.val = null;
  } else {
    return null;
  }
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    return 0;
  } else {
    return 1;
  }
};
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/PromiseBuffer";
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async.impl.buffers/PromiseBuffer");
};
cljs.core.async.impl.buffers.__GT_PromiseBuffer = function cljs$core$async$impl$buffers$__GT_PromiseBuffer(val) {
  return new cljs.core.async.impl.buffers.PromiseBuffer(val);
};
cljs.core.async.impl.buffers.promise_buffer = function cljs$core$async$impl$buffers$promise_buffer() {
  return new cljs.core.async.impl.buffers.PromiseBuffer(cljs.core.async.impl.buffers.NO_VAL);
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.functions");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener) {
    Channel = function() {
      var iframe = document.createElement("iframe");
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (e.origin != origin && e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined") {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      head = head.next;
      var cb = head.cb;
      head.cb = null;
      cb();
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement("script")) {
    return function(cb) {
      var script = document.createElement("script");
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("goog.async.nextTick");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_15404 = 0;
  while (true) {
    var m_15405 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_15405 == null) {
    } else {
      m_15405.call(null);
      if (count_15404 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__15406 = count_15404 + 1;
        count_15404 = G__15406;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__4266__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__4266__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__4266__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs.core.async.impl.channels.t15412 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t15412 = function(box, val, meta15413) {
      this.box = box;
      this.val = val;
      this.meta15413 = meta15413;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.channels.t15412.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15414, meta15413__$1) {
      var self__ = this;
      var _15414__$1 = this;
      return new cljs.core.async.impl.channels.t15412(self__.box, self__.val, meta15413__$1);
    };
    cljs.core.async.impl.channels.t15412.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15414) {
      var self__ = this;
      var _15414__$1 = this;
      return self__.meta15413;
    };
    cljs.core.async.impl.channels.t15412.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t15412.cljs$lang$type = true;
    cljs.core.async.impl.channels.t15412.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t15412";
    cljs.core.async.impl.channels.t15412.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
      return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async.impl.channels/t15412");
    };
    cljs.core.async.impl.channels.__GT_t15412 = function cljs$core$async$impl$channels$box_$___GT_t15412(box__$1, val__$1, meta15413) {
      return new cljs.core.async.impl.channels.t15412(box__$1, val__$1, meta15413);
    };
  }
  return new cljs.core.async.impl.channels.t15412(cljs$core$async$impl$channels$box, val, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj15416 = {};
  return obj15416;
}();
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_15417 = self__.puts.pop();
    if (putter_15417 == null) {
    } else {
      var put_handler_15418 = putter_15417.handler;
      var val_15419 = putter_15417.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_15418)) {
        var put_cb_15420 = cljs.core.async.impl.protocols.commit.call(null, put_handler_15418);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_15420, put_handler_15418, val_15419, putter_15417, this$__$1) {
          return function() {
            return put_cb_15420.call(null, true);
          };
        }(put_cb_15420, put_handler_15418, val_15419, putter_15417, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__4266__auto__ = self__.buf;
      if (cljs.core.truth_(and__4266__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__4266__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_15421 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_15421)) {
            var take_cb_15422 = cljs.core.async.impl.protocols.commit.call(null, taker_15421);
            var val_15423__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_15422, val_15423__$1, taker_15421, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_15422.call(null, val_15423__$1);
              };
            }(take_cb_15422, val_15423__$1, taker_15421, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (cljs.core.truth_(cljs.core.async.impl.protocols.blockable_QMARK_.call(null, handler))) {
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        } else {
        }
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_15424 = self__.puts.pop();
          if (putter_15424 == null) {
          } else {
            var put_handler_15425 = putter_15424.handler;
            var val_15426 = putter_15424.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_15425)) {
              var put_cb_15427 = cljs.core.async.impl.protocols.commit.call(null, put_handler_15425);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_15427, put_handler_15425, val_15426, putter_15424, _, retval, this$__$1) {
                return function() {
                  return put_cb_15427.call(null, true);
                };
              }(put_cb_15427, put_handler_15425, val_15426, putter_15424, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_15426))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__4266__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__4266__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__4266__auto__;
            }
          }())) {
            var has_val = function() {
              var and__4266__auto__ = self__.buf;
              if (cljs.core.truth_(and__4266__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__4266__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (cljs.core.truth_(cljs.core.async.impl.protocols.blockable_QMARK_.call(null, handler))) {
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, 
              "takes", "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
          } else {
          }
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__4266__auto__ = self__.buf;
      if (cljs.core.truth_(and__4266__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__4266__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_15428 = self__.takes.pop();
      if (taker_15428 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_15428)) {
          var take_cb_15429 = cljs.core.async.impl.protocols.commit.call(null, taker_15428);
          var val_15430 = cljs.core.truth_(function() {
            var and__4266__auto__ = self__.buf;
            if (cljs.core.truth_(and__4266__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__4266__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_15429, val_15430, taker_15428, this$__$1) {
            return function() {
              return take_cb_15429.call(null, val_15430);
            };
          }(take_cb_15429, val_15430, taker_15428, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    if (cljs.core.truth_(self__.buf)) {
      cljs.core.async.impl.protocols.close_buf_BANG_.call(null, self__.buf);
    } else {
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__4278__auto__ = exh;
    if (cljs.core.truth_(or__4278__auto__)) {
      return or__4278__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function cljs$core$async$impl$channels$chan() {
  var G__15432 = arguments.length;
  switch(G__15432) {
    case 1:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1 = function(buf) {
  return cljs.core.async.impl.channels.chan.call(null, buf, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2 = function(buf, xform) {
  return cljs.core.async.impl.channels.chan.call(null, buf, xform, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3 = function(buf, xform, exh) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
    var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
    return function(add_BANG_) {
      return function() {
        var G__15436 = null;
        var G__15436__1 = function(buf__$1) {
          try {
            return add_BANG_.call(null, buf__$1);
          } catch (e15433) {
            var t = e15433;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        var G__15436__2 = function(buf__$1, val) {
          try {
            return add_BANG_.call(null, buf__$1, val);
          } catch (e15434) {
            var t = e15434;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        G__15436 = function(buf__$1, val) {
          switch(arguments.length) {
            case 1:
              return G__15436__1.call(this, buf__$1);
            case 2:
              return G__15436__2.call(this, buf__$1, val);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__15436.cljs$core$IFn$_invoke$arity$1 = G__15436__1;
        G__15436.cljs$core$IFn$_invoke$arity$2 = G__15436__2;
        return G__15436;
      }();
    }(add_BANG_);
  }());
};
cljs.core.async.impl.channels.chan.cljs$lang$maxFixedArity = 3;
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t15341 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t15341 = function(fn_handler, f, meta15342) {
      this.fn_handler = fn_handler;
      this.f = f;
      this.meta15342 = meta15342;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.ioc_helpers.t15341.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15343, meta15342__$1) {
      var self__ = this;
      var _15343__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t15341(self__.fn_handler, self__.f, meta15342__$1);
    };
    cljs.core.async.impl.ioc_helpers.t15341.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15343) {
      var self__ = this;
      var _15343__$1 = this;
      return self__.meta15342;
    };
    cljs.core.async.impl.ioc_helpers.t15341.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t15341.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t15341.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t15341.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t15341.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t15341.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t15341";
    cljs.core.async.impl.ioc_helpers.t15341.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
      return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async.impl.ioc-helpers/t15341");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t15341 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t15341(fn_handler__$1, f__$1, meta15342) {
      return new cljs.core.async.impl.ioc_helpers.t15341(fn_handler__$1, f__$1, meta15342);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t15341(cljs$core$async$impl$ioc_helpers$fn_handler, f, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e15345) {
    if (e15345 instanceof Object) {
      var ex = e15345;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e15345;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__4423__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_15348_15350 = state;
    statearr_15348_15350[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_15348_15350[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var cb = temp__4423__auto__;
    var statearr_15349_15351 = state;
    statearr_15349_15351[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_15349_15351[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__4423__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_15354_15356 = state;
    statearr_15354_15356[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_15354_15356[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var cb = temp__4423__auto__;
    var statearr_15355_15357 = state;
    statearr_15355_15357[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_15355_15357[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4873__auto__, k__4874__auto__) {
  var self__ = this;
  var this__4873__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4873__auto____$1, k__4874__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4875__auto__, k15359, else__4876__auto__) {
  var self__ = this;
  var this__4875__auto____$1 = this;
  var G__15361 = k15359 instanceof cljs.core.Keyword ? k15359.fqn : null;
  switch(G__15361) {
    case "catch-block":
      return self__.catch_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "prev":
      return self__.prev;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k15359, else__4876__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4887__auto__, writer__4888__auto__, opts__4889__auto__) {
  var self__ = this;
  var this__4887__auto____$1 = this;
  var pr_pair__4890__auto__ = function(this__4887__auto____$1) {
    return function(keyval__4891__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4888__auto__, cljs.core.pr_writer, "", " ", "", opts__4889__auto__, keyval__4891__auto__);
    };
  }(this__4887__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4888__auto__, pr_pair__4890__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4889__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4871__auto__) {
  var self__ = this;
  var this__4871__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4867__auto__) {
  var self__ = this;
  var this__4867__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4877__auto__) {
  var self__ = this;
  var this__4877__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4868__auto__) {
  var self__ = this;
  var this__4868__auto____$1 = this;
  var h__4694__auto__ = self__.__hash;
  if (!(h__4694__auto__ == null)) {
    return h__4694__auto__;
  } else {
    var h__4694__auto____$1 = cljs.core.hash_imap.call(null, this__4868__auto____$1);
    self__.__hash = h__4694__auto____$1;
    return h__4694__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4869__auto__, other__4870__auto__) {
  var self__ = this;
  var this__4869__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4266__auto__ = other__4870__auto__;
    if (cljs.core.truth_(and__4266__auto__)) {
      var and__4266__auto____$1 = this__4869__auto____$1.constructor === other__4870__auto__.constructor;
      if (and__4266__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4869__auto____$1, other__4870__auto__);
      } else {
        return and__4266__auto____$1;
      }
    } else {
      return and__4266__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4882__auto__, k__4883__auto__) {
  var self__ = this;
  var this__4882__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4883__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4882__auto____$1), self__.__meta), k__4883__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4883__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4880__auto__, k__4881__auto__, G__15358) {
  var self__ = this;
  var this__4880__auto____$1 = this;
  var pred__15362 = cljs.core.keyword_identical_QMARK_;
  var expr__15363 = k__4881__auto__;
  if (cljs.core.truth_(pred__15362.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__15363))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__15358, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__15362.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__15363))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__15358, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__15362.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__15363))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__15358, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__15362.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__15363))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__15358, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__15362.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__15363))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__15358, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4881__auto__, G__15358), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4885__auto__) {
  var self__ = this;
  var this__4885__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4872__auto__, G__15358) {
  var self__ = this;
  var this__4872__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__15358, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4878__auto__, entry__4879__auto__) {
  var self__ = this;
  var this__4878__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4879__auto__)) {
    return cljs.core._assoc.call(null, this__4878__auto____$1, cljs.core._nth.call(null, entry__4879__auto__, 0), cljs.core._nth.call(null, entry__4879__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4878__auto____$1, entry__4879__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4907__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4907__auto__, writer__4908__auto__) {
  return cljs.core._write.call(null, writer__4908__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$__GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$map__GT_ExceptionFrame(G__15360) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__15360), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__15360), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__15360), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__15360), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__15360), null, cljs.core.dissoc.call(null, G__15360, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function cljs$core$async$impl$ioc_helpers$add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_15367 = state;
  statearr_15367[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_15367;
};
cljs.core.async.impl.ioc_helpers.process_exception = function cljs$core$async$impl$ioc_helpers$process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__4266__auto__ = exception;
      if (cljs.core.truth_(and__4266__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__4266__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__4266__auto__ = exception;
        if (cljs.core.truth_(and__4266__auto__)) {
          var and__4266__auto____$1 = catch_block;
          if (cljs.core.truth_(and__4266__auto____$1)) {
            return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "default", "default", -1987822328), catch_exception) || exception instanceof catch_exception;
          } else {
            return and__4266__auto____$1;
          }
        } else {
          return and__4266__auto__;
        }
      }())) {
        var statearr_15373 = state;
        statearr_15373[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_15373[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_15373[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_15373[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_15373;
      } else {
        if (cljs.core.truth_(function() {
          var and__4266__auto__ = exception;
          if (cljs.core.truth_(and__4266__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__4266__auto__;
          }
        }())) {
          var statearr_15374_15378 = state;
          statearr_15374_15378[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__15379 = state;
          state = G__15379;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__4266__auto__ = exception;
            if (cljs.core.truth_(and__4266__auto__)) {
              var and__4266__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__4266__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4266__auto____$1;
              }
            } else {
              return and__4266__auto__;
            }
          }())) {
            var statearr_15375 = state;
            statearr_15375[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_15375[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_15375;
          } else {
            if (cljs.core.truth_(function() {
              var and__4266__auto__ = cljs.core.not.call(null, exception);
              if (and__4266__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4266__auto__;
              }
            }())) {
              var statearr_15376 = state;
              statearr_15376[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_15376[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_15376;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_15377 = state;
                statearr_15377[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_15377[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_15377;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function cljs$core$async$impl$timers$random_level() {
  var G__15304 = arguments.length;
  switch(G__15304) {
    case 0:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.impl.timers.random_level.call(null, 0);
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1 = function(level) {
  while (true) {
    if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
      var G__15306 = level + 1;
      level = G__15306;
      continue;
    } else {
      return level;
    }
    break;
  }
};
cljs.core.async.impl.timers.random_level.cljs$lang$maxFixedArity = 1;
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function cljs$core$async$impl$timers$skip_list_node() {
  var G__15308 = arguments.length;
  switch(G__15308) {
    case 1:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1 = function(level) {
  return cljs.core.async.impl.timers.skip_list_node.call(null, null, null, level);
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3 = function(k, v, level) {
  var arr = new Array(level + 1);
  var i_15310 = 0;
  while (true) {
    if (i_15310 < arr.length) {
      arr[i_15310] = null;
      var G__15311 = i_15310 + 1;
      i_15310 = G__15311;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
};
cljs.core.async.impl.timers.skip_list_node.cljs$lang$maxFixedArity = 3;
cljs.core.async.impl.timers.least_greater_node = function cljs$core$async$impl$timers$least_greater_node() {
  var G__15313 = arguments.length;
  switch(G__15313) {
    case 3:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3 = function(x, k, level) {
  return cljs.core.async.impl.timers.least_greater_node.call(null, x, k, level, null);
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4 = function(x, k, level, update) {
  while (true) {
    if (!(level < 0)) {
      var x__$1 = function() {
        var x__$1 = x;
        while (true) {
          var temp__4423__auto__ = x__$1.forward[level];
          if (cljs.core.truth_(temp__4423__auto__)) {
            var x_SINGLEQUOTE_ = temp__4423__auto__;
            if (x_SINGLEQUOTE_.key < k) {
              var G__15315 = x_SINGLEQUOTE_;
              x__$1 = G__15315;
              continue;
            } else {
              return x__$1;
            }
          } else {
            return x__$1;
          }
          break;
        }
      }();
      if (update == null) {
      } else {
        update[level] = x__$1;
      }
      var G__15316 = x__$1;
      var G__15317 = k;
      var G__15318 = level - 1;
      var G__15319 = update;
      x = G__15316;
      k = G__15317;
      level = G__15318;
      update = G__15319;
      continue;
    } else {
      return x;
    }
    break;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$lang$maxFixedArity = 4;
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_15320 = self__.level + 1;
      while (true) {
        if (i_15320 <= new_level + 1) {
          update[i_15320] = self__.header;
          var G__15321 = i_15320 + 1;
          i_15320 = G__15321;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_15322 = 0;
    while (true) {
      if (i_15322 <= self__.level) {
        var links_15323 = update[i_15322].forward;
        if (links_15323[i_15322] === x__$1) {
          links_15323[i_15322] = x__$1.forward[i_15322];
          var G__15324 = i_15322 + 1;
          i_15322 = G__15324;
          continue;
        } else {
          var G__15325 = i_15322 + 1;
          i_15322 = G__15325;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__15326 = x_SINGLEQUOTE_;
              x__$1 = G__15326;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__15327 = nx;
        var G__15328 = level__$1 - 1;
        x = G__15327;
        level__$1 = G__15328;
        continue;
      } else {
        var G__15329 = x;
        var G__15330 = level__$1 - 1;
        x = G__15329;
        level__$1 = G__15330;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__15331 = x_SINGLEQUOTE_;
              x__$1 = G__15331;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__15332 = nx;
        var G__15333 = level__$1 - 1;
        x = G__15332;
        level__$1 = G__15333;
        continue;
      } else {
        var G__15334 = x;
        var G__15335 = level__$1 - 1;
        x = G__15334;
        level__$1 = G__15335;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function cljs$core$async$impl$timers$iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__4278__auto__ = cljs.core.truth_(function() {
    var and__4266__auto__ = me;
    if (cljs.core.truth_(and__4266__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__4266__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__4278__auto__)) {
    return or__4278__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__4278__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__4278__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler() {
  var G__12779 = arguments.length;
  switch(G__12779) {
    case 1:
      return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.async.fn_handler.call(null, f, true);
};
cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2 = function(f, blockable) {
  if (typeof cljs.core.async.t12780 !== "undefined") {
  } else {
    cljs.core.async.t12780 = function(f, blockable, meta12781) {
      this.f = f;
      this.blockable = blockable;
      this.meta12781 = meta12781;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t12780.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12782, meta12781__$1) {
      var self__ = this;
      var _12782__$1 = this;
      return new cljs.core.async.t12780(self__.f, self__.blockable, meta12781__$1);
    };
    cljs.core.async.t12780.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12782) {
      var self__ = this;
      var _12782__$1 = this;
      return self__.meta12781;
    };
    cljs.core.async.t12780.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12780.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t12780.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.blockable;
    };
    cljs.core.async.t12780.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t12780.cljs$lang$type = true;
    cljs.core.async.t12780.cljs$lang$ctorStr = "cljs.core.async/t12780";
    cljs.core.async.t12780.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
      return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async/t12780");
    };
    cljs.core.async.__GT_t12780 = function cljs$core$async$__GT_t12780(f__$1, blockable__$1, meta12781) {
      return new cljs.core.async.t12780(f__$1, blockable__$1, meta12781);
    };
  }
  return new cljs.core.async.t12780(f, blockable, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.fn_handler.cljs$lang$maxFixedArity = 2;
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  var G__12785 = buff;
  if (G__12785) {
    var bit__4952__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4278__auto__ = bit__4952__auto__;
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return G__12785.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__12785.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__12785);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__12785);
  }
};
cljs.core.async.chan = function cljs$core$async$chan() {
  var G__12787 = arguments.length;
  switch(G__12787) {
    case 0:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.chan.call(null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1 = function(buf_or_n) {
  return cljs.core.async.chan.call(null, buf_or_n, null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2 = function(buf_or_n, xform) {
  return cljs.core.async.chan.call(null, buf_or_n, xform, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3 = function(buf_or_n, xform, ex_handler) {
  var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
  if (cljs.core.truth_(xform)) {
    if (cljs.core.truth_(buf_or_n__$1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
    }
  } else {
  }
  return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
};
cljs.core.async.chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.promise_chan = function cljs$core$async$promise_chan() {
  var G__12790 = arguments.length;
  switch(G__12790) {
    case 0:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.promise_chan.call(null, null);
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1 = function(xform) {
  return cljs.core.async.promise_chan.call(null, xform, null);
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2 = function(xform, ex_handler) {
  return cljs.core.async.chan.call(null, cljs.core.async.impl.buffers.promise_buffer.call(null), xform, ex_handler);
};
cljs.core.async.promise_chan.cljs$lang$maxFixedArity = 2;
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function cljs$core$async$take_BANG_() {
  var G__12793 = arguments.length;
  switch(G__12793) {
    case 2:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, fn1) {
  return cljs.core.async.take_BANG_.call(null, port, fn1, true);
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, fn1, on_caller_QMARK_) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(ret)) {
    var val_12795 = cljs.core.deref.call(null, ret);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, val_12795);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(val_12795, ret) {
        return function() {
          return fn1.call(null, val_12795);
        };
      }(val_12795, ret));
    }
  } else {
  }
  return null;
};
cljs.core.async.take_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function cljs$core$async$put_BANG_() {
  var G__12797 = arguments.length;
  switch(G__12797) {
    case 2:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, val) {
  var temp__4423__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var ret = temp__4423__auto__;
    return cljs.core.deref.call(null, ret);
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, val, fn1) {
  return cljs.core.async.put_BANG_.call(null, port, val, fn1, true);
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4 = function(port, val, fn1, on_caller_QMARK_) {
  var temp__4423__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var retb = temp__4423__auto__;
    var ret = cljs.core.deref.call(null, retb);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, ret);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4423__auto__) {
        return function() {
          return fn1.call(null, ret);
        };
      }(ret, retb, temp__4423__auto__));
    }
    return ret;
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__5163__auto___12799 = n;
  var x_12800 = 0;
  while (true) {
    if (x_12800 < n__5163__auto___12799) {
      a[x_12800] = 0;
      var G__12801 = x_12800 + 1;
      x_12800 = G__12801;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__12802 = i + 1;
      i = G__12802;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t12806 !== "undefined") {
  } else {
    cljs.core.async.t12806 = function(alt_flag, flag, meta12807) {
      this.alt_flag = alt_flag;
      this.flag = flag;
      this.meta12807 = meta12807;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t12806.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_12808, meta12807__$1) {
        var self__ = this;
        var _12808__$1 = this;
        return new cljs.core.async.t12806(self__.alt_flag, self__.flag, meta12807__$1);
      };
    }(flag);
    cljs.core.async.t12806.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_12808) {
        var self__ = this;
        var _12808__$1 = this;
        return self__.meta12807;
      };
    }(flag);
    cljs.core.async.t12806.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12806.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t12806.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return true;
      };
    }(flag);
    cljs.core.async.t12806.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t12806.cljs$lang$type = true;
    cljs.core.async.t12806.cljs$lang$ctorStr = "cljs.core.async/t12806";
    cljs.core.async.t12806.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
        return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async/t12806");
      };
    }(flag);
    cljs.core.async.__GT_t12806 = function(flag) {
      return function cljs$core$async$alt_flag_$___GT_t12806(alt_flag__$1, flag__$1, meta12807) {
        return new cljs.core.async.t12806(alt_flag__$1, flag__$1, meta12807);
      };
    }(flag);
  }
  return new cljs.core.async.t12806(cljs$core$async$alt_flag, flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs.core.async.t12812 !== "undefined") {
  } else {
    cljs.core.async.t12812 = function(alt_handler, flag, cb, meta12813) {
      this.alt_handler = alt_handler;
      this.flag = flag;
      this.cb = cb;
      this.meta12813 = meta12813;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t12812.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12814, meta12813__$1) {
      var self__ = this;
      var _12814__$1 = this;
      return new cljs.core.async.t12812(self__.alt_handler, self__.flag, self__.cb, meta12813__$1);
    };
    cljs.core.async.t12812.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12814) {
      var self__ = this;
      var _12814__$1 = this;
      return self__.meta12813;
    };
    cljs.core.async.t12812.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t12812.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t12812.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t12812.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t12812.cljs$lang$type = true;
    cljs.core.async.t12812.cljs$lang$ctorStr = "cljs.core.async/t12812";
    cljs.core.async.t12812.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
      return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async/t12812");
    };
    cljs.core.async.__GT_t12812 = function cljs$core$async$alt_handler_$___GT_t12812(alt_handler__$1, flag__$1, cb__$1, meta12813) {
      return new cljs.core.async.t12812(alt_handler__$1, flag__$1, cb__$1, meta12813);
    };
  }
  return new cljs.core.async.t12812(cljs$core$async$alt_handler, flag, cb, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__12815_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__12815_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__12816_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__12816_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__4278__auto__ = wport;
            if (cljs.core.truth_(or__4278__auto__)) {
              return or__4278__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__12817 = i + 1;
          i = G__12817;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__4278__auto__ = ret;
  if (cljs.core.truth_(or__4278__auto__)) {
    return or__4278__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4425__auto__ = function() {
        var and__4266__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__4266__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__4266__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4425__auto__)) {
        var got = temp__4425__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function cljs$core$async$alts_BANG_() {
  var argseq__5318__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5318__auto__);
};
cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ports, p__12820) {
  var map__12821 = p__12820;
  var map__12821__$1 = cljs.core.seq_QMARK_.call(null, map__12821) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12821) : map__12821;
  var opts = map__12821__$1;
  throw new Error("alts! used not in (go ...) block");
};
cljs.core.async.alts_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.async.alts_BANG_.cljs$lang$applyTo = function(seq12818) {
  var G__12819 = cljs.core.first.call(null, seq12818);
  var seq12818__$1 = cljs.core.next.call(null, seq12818);
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12819, seq12818__$1);
};
cljs.core.async.offer_BANG_ = function cljs$core$async$offer_BANG_(port, val) {
  var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, cljs.core.async.nop, false));
  if (cljs.core.truth_(ret)) {
    return cljs.core.deref.call(null, ret);
  } else {
    return null;
  }
};
cljs.core.async.poll_BANG_ = function cljs$core$async$poll_BANG_(port) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, cljs.core.async.nop, false));
  if (cljs.core.truth_(ret)) {
    return cljs.core.deref.call(null, ret);
  } else {
    return null;
  }
};
cljs.core.async.pipe = function cljs$core$async$pipe() {
  var G__12823 = arguments.length;
  switch(G__12823) {
    case 2:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2 = function(from, to) {
  return cljs.core.async.pipe.call(null, from, to, true);
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3 = function(from, to, close_QMARK_) {
  var c__8284__auto___12872 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___12872) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___12872) {
          return function(state_12847) {
            var state_val_12848 = state_12847[1];
            if (state_val_12848 === 7) {
              var inst_12843 = state_12847[2];
              var state_12847__$1 = state_12847;
              var statearr_12849_12873 = state_12847__$1;
              statearr_12849_12873[2] = inst_12843;
              statearr_12849_12873[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12848 === 1) {
                var state_12847__$1 = state_12847;
                var statearr_12850_12874 = state_12847__$1;
                statearr_12850_12874[2] = null;
                statearr_12850_12874[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12848 === 4) {
                  var inst_12826 = state_12847[7];
                  var inst_12826__$1 = state_12847[2];
                  var inst_12827 = inst_12826__$1 == null;
                  var state_12847__$1 = function() {
                    var statearr_12851 = state_12847;
                    statearr_12851[7] = inst_12826__$1;
                    return statearr_12851;
                  }();
                  if (cljs.core.truth_(inst_12827)) {
                    var statearr_12852_12875 = state_12847__$1;
                    statearr_12852_12875[1] = 5;
                  } else {
                    var statearr_12853_12876 = state_12847__$1;
                    statearr_12853_12876[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12848 === 13) {
                    var state_12847__$1 = state_12847;
                    var statearr_12854_12877 = state_12847__$1;
                    statearr_12854_12877[2] = null;
                    statearr_12854_12877[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12848 === 6) {
                      var inst_12826 = state_12847[7];
                      var state_12847__$1 = state_12847;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12847__$1, 11, to, inst_12826);
                    } else {
                      if (state_val_12848 === 3) {
                        var inst_12845 = state_12847[2];
                        var state_12847__$1 = state_12847;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12847__$1, inst_12845);
                      } else {
                        if (state_val_12848 === 12) {
                          var state_12847__$1 = state_12847;
                          var statearr_12855_12878 = state_12847__$1;
                          statearr_12855_12878[2] = null;
                          statearr_12855_12878[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12848 === 2) {
                            var state_12847__$1 = state_12847;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12847__$1, 4, from);
                          } else {
                            if (state_val_12848 === 11) {
                              var inst_12836 = state_12847[2];
                              var state_12847__$1 = state_12847;
                              if (cljs.core.truth_(inst_12836)) {
                                var statearr_12856_12879 = state_12847__$1;
                                statearr_12856_12879[1] = 12;
                              } else {
                                var statearr_12857_12880 = state_12847__$1;
                                statearr_12857_12880[1] = 13;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12848 === 9) {
                                var state_12847__$1 = state_12847;
                                var statearr_12858_12881 = state_12847__$1;
                                statearr_12858_12881[2] = null;
                                statearr_12858_12881[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12848 === 5) {
                                  var state_12847__$1 = state_12847;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_12859_12882 = state_12847__$1;
                                    statearr_12859_12882[1] = 8;
                                  } else {
                                    var statearr_12860_12883 = state_12847__$1;
                                    statearr_12860_12883[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12848 === 14) {
                                    var inst_12841 = state_12847[2];
                                    var state_12847__$1 = state_12847;
                                    var statearr_12861_12884 = state_12847__$1;
                                    statearr_12861_12884[2] = inst_12841;
                                    statearr_12861_12884[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12848 === 10) {
                                      var inst_12833 = state_12847[2];
                                      var state_12847__$1 = state_12847;
                                      var statearr_12862_12885 = state_12847__$1;
                                      statearr_12862_12885[2] = inst_12833;
                                      statearr_12862_12885[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12848 === 8) {
                                        var inst_12830 = cljs.core.async.close_BANG_.call(null, to);
                                        var state_12847__$1 = state_12847;
                                        var statearr_12863_12886 = state_12847__$1;
                                        statearr_12863_12886[2] = inst_12830;
                                        statearr_12863_12886[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___12872);
        return function(switch__8222__auto__, c__8284__auto___12872) {
          return function() {
            var cljs$core$async$state_machine__8223__auto__ = null;
            var cljs$core$async$state_machine__8223__auto____0 = function() {
              var statearr_12867 = [null, null, null, null, null, null, null, null];
              statearr_12867[0] = cljs$core$async$state_machine__8223__auto__;
              statearr_12867[1] = 1;
              return statearr_12867;
            };
            var cljs$core$async$state_machine__8223__auto____1 = function(state_12847) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_12847);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e12868) {
                    if (e12868 instanceof Object) {
                      var ex__8226__auto__ = e12868;
                      var statearr_12869_12887 = state_12847;
                      statearr_12869_12887[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12847);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12868;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12888 = state_12847;
                  state_12847 = G__12888;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8223__auto__ = function(state_12847) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8223__auto____1.call(this, state_12847);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8223__auto____0;
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8223__auto____1;
            return cljs$core$async$state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___12872);
      }();
      var state__8286__auto__ = function() {
        var statearr_12870 = f__8285__auto__.call(null);
        statearr_12870[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___12872;
        return statearr_12870;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___12872));
  return to;
};
cljs.core.async.pipe.cljs$lang$maxFixedArity = 3;
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__13072) {
      var vec__13073 = p__13072;
      var v = cljs.core.nth.call(null, vec__13073, 0, null);
      var p = cljs.core.nth.call(null, vec__13073, 1, null);
      var job = vec__13073;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__8284__auto___13255 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___13255, res, vec__13073, v, p, job, jobs, results) {
          return function() {
            var f__8285__auto__ = function() {
              var switch__8222__auto__ = function(c__8284__auto___13255, res, vec__13073, v, p, job, jobs, results) {
                return function(state_13078) {
                  var state_val_13079 = state_13078[1];
                  if (state_val_13079 === 1) {
                    var state_13078__$1 = state_13078;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13078__$1, 2, res, v);
                  } else {
                    if (state_val_13079 === 2) {
                      var inst_13075 = state_13078[2];
                      var inst_13076 = cljs.core.async.close_BANG_.call(null, res);
                      var state_13078__$1 = function() {
                        var statearr_13080 = state_13078;
                        statearr_13080[7] = inst_13075;
                        return statearr_13080;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13078__$1, inst_13076);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__8284__auto___13255, res, vec__13073, v, p, job, jobs, results);
              return function(switch__8222__auto__, c__8284__auto___13255, res, vec__13073, v, p, job, jobs, results) {
                return function() {
                  var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__ = null;
                  var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0 = function() {
                    var statearr_13084 = [null, null, null, null, null, null, null, null];
                    statearr_13084[0] = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__;
                    statearr_13084[1] = 1;
                    return statearr_13084;
                  };
                  var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1 = function(state_13078) {
                    while (true) {
                      var ret_value__8224__auto__ = function() {
                        try {
                          while (true) {
                            var result__8225__auto__ = switch__8222__auto__.call(null, state_13078);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__8225__auto__;
                            }
                            break;
                          }
                        } catch (e13085) {
                          if (e13085 instanceof Object) {
                            var ex__8226__auto__ = e13085;
                            var statearr_13086_13256 = state_13078;
                            statearr_13086_13256[5] = ex__8226__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13078);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e13085;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__13257 = state_13078;
                        state_13078 = G__13257;
                        continue;
                      } else {
                        return ret_value__8224__auto__;
                      }
                      break;
                    }
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__ = function(state_13078) {
                    switch(arguments.length) {
                      case 0:
                        return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0.call(this);
                      case 1:
                        return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1.call(this, state_13078);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0;
                  cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1;
                  return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__;
                }();
              }(switch__8222__auto__, c__8284__auto___13255, res, vec__13073, v, p, job, jobs, results);
            }();
            var state__8286__auto__ = function() {
              var statearr_13087 = f__8285__auto__.call(null);
              statearr_13087[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___13255;
              return statearr_13087;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
          };
        }(c__8284__auto___13255, res, vec__13073, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__13088) {
      var vec__13089 = p__13088;
      var v = cljs.core.nth.call(null, vec__13089, 0, null);
      var p = cljs.core.nth.call(null, vec__13089, 1, null);
      var job = vec__13089;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__5163__auto___13258 = n;
  var __13259 = 0;
  while (true) {
    if (__13259 < n__5163__auto___13258) {
      var G__13090_13260 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__13090_13260) {
        case "compute":
          var c__8284__auto___13262 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__13259, c__8284__auto___13262, G__13090_13260, n__5163__auto___13258, jobs, results, process, async) {
            return function() {
              var f__8285__auto__ = function() {
                var switch__8222__auto__ = function(__13259, c__8284__auto___13262, G__13090_13260, n__5163__auto___13258, jobs, results, process, async) {
                  return function(state_13103) {
                    var state_val_13104 = state_13103[1];
                    if (state_val_13104 === 1) {
                      var state_13103__$1 = state_13103;
                      var statearr_13105_13263 = state_13103__$1;
                      statearr_13105_13263[2] = null;
                      statearr_13105_13263[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13104 === 2) {
                        var state_13103__$1 = state_13103;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13103__$1, 4, jobs);
                      } else {
                        if (state_val_13104 === 3) {
                          var inst_13101 = state_13103[2];
                          var state_13103__$1 = state_13103;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13103__$1, inst_13101);
                        } else {
                          if (state_val_13104 === 4) {
                            var inst_13093 = state_13103[2];
                            var inst_13094 = process.call(null, inst_13093);
                            var state_13103__$1 = state_13103;
                            if (cljs.core.truth_(inst_13094)) {
                              var statearr_13106_13264 = state_13103__$1;
                              statearr_13106_13264[1] = 5;
                            } else {
                              var statearr_13107_13265 = state_13103__$1;
                              statearr_13107_13265[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13104 === 5) {
                              var state_13103__$1 = state_13103;
                              var statearr_13108_13266 = state_13103__$1;
                              statearr_13108_13266[2] = null;
                              statearr_13108_13266[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13104 === 6) {
                                var state_13103__$1 = state_13103;
                                var statearr_13109_13267 = state_13103__$1;
                                statearr_13109_13267[2] = null;
                                statearr_13109_13267[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13104 === 7) {
                                  var inst_13099 = state_13103[2];
                                  var state_13103__$1 = state_13103;
                                  var statearr_13110_13268 = state_13103__$1;
                                  statearr_13110_13268[2] = inst_13099;
                                  statearr_13110_13268[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__13259, c__8284__auto___13262, G__13090_13260, n__5163__auto___13258, jobs, results, process, async);
                return function(__13259, switch__8222__auto__, c__8284__auto___13262, G__13090_13260, n__5163__auto___13258, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0 = function() {
                      var statearr_13114 = [null, null, null, null, null, null, null];
                      statearr_13114[0] = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__;
                      statearr_13114[1] = 1;
                      return statearr_13114;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1 = function(state_13103) {
                      while (true) {
                        var ret_value__8224__auto__ = function() {
                          try {
                            while (true) {
                              var result__8225__auto__ = switch__8222__auto__.call(null, state_13103);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__8225__auto__;
                              }
                              break;
                            }
                          } catch (e13115) {
                            if (e13115 instanceof Object) {
                              var ex__8226__auto__ = e13115;
                              var statearr_13116_13269 = state_13103;
                              statearr_13116_13269[5] = ex__8226__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13103);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e13115;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__13270 = state_13103;
                          state_13103 = G__13270;
                          continue;
                        } else {
                          return ret_value__8224__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__ = function(state_13103) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1.call(this, state_13103);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__;
                  }();
                }(__13259, switch__8222__auto__, c__8284__auto___13262, G__13090_13260, n__5163__auto___13258, jobs, results, process, async);
              }();
              var state__8286__auto__ = function() {
                var statearr_13117 = f__8285__auto__.call(null);
                statearr_13117[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___13262;
                return statearr_13117;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
            };
          }(__13259, c__8284__auto___13262, G__13090_13260, n__5163__auto___13258, jobs, results, process, async));
          break;
        case "async":
          var c__8284__auto___13271 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__13259, c__8284__auto___13271, G__13090_13260, n__5163__auto___13258, jobs, results, process, async) {
            return function() {
              var f__8285__auto__ = function() {
                var switch__8222__auto__ = function(__13259, c__8284__auto___13271, G__13090_13260, n__5163__auto___13258, jobs, results, process, async) {
                  return function(state_13130) {
                    var state_val_13131 = state_13130[1];
                    if (state_val_13131 === 1) {
                      var state_13130__$1 = state_13130;
                      var statearr_13132_13272 = state_13130__$1;
                      statearr_13132_13272[2] = null;
                      statearr_13132_13272[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13131 === 2) {
                        var state_13130__$1 = state_13130;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13130__$1, 4, jobs);
                      } else {
                        if (state_val_13131 === 3) {
                          var inst_13128 = state_13130[2];
                          var state_13130__$1 = state_13130;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13130__$1, inst_13128);
                        } else {
                          if (state_val_13131 === 4) {
                            var inst_13120 = state_13130[2];
                            var inst_13121 = async.call(null, inst_13120);
                            var state_13130__$1 = state_13130;
                            if (cljs.core.truth_(inst_13121)) {
                              var statearr_13133_13273 = state_13130__$1;
                              statearr_13133_13273[1] = 5;
                            } else {
                              var statearr_13134_13274 = state_13130__$1;
                              statearr_13134_13274[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13131 === 5) {
                              var state_13130__$1 = state_13130;
                              var statearr_13135_13275 = state_13130__$1;
                              statearr_13135_13275[2] = null;
                              statearr_13135_13275[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13131 === 6) {
                                var state_13130__$1 = state_13130;
                                var statearr_13136_13276 = state_13130__$1;
                                statearr_13136_13276[2] = null;
                                statearr_13136_13276[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13131 === 7) {
                                  var inst_13126 = state_13130[2];
                                  var state_13130__$1 = state_13130;
                                  var statearr_13137_13277 = state_13130__$1;
                                  statearr_13137_13277[2] = inst_13126;
                                  statearr_13137_13277[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__13259, c__8284__auto___13271, G__13090_13260, n__5163__auto___13258, jobs, results, process, async);
                return function(__13259, switch__8222__auto__, c__8284__auto___13271, G__13090_13260, n__5163__auto___13258, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0 = function() {
                      var statearr_13141 = [null, null, null, null, null, null, null];
                      statearr_13141[0] = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__;
                      statearr_13141[1] = 1;
                      return statearr_13141;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1 = function(state_13130) {
                      while (true) {
                        var ret_value__8224__auto__ = function() {
                          try {
                            while (true) {
                              var result__8225__auto__ = switch__8222__auto__.call(null, state_13130);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__8225__auto__;
                              }
                              break;
                            }
                          } catch (e13142) {
                            if (e13142 instanceof Object) {
                              var ex__8226__auto__ = e13142;
                              var statearr_13143_13278 = state_13130;
                              statearr_13143_13278[5] = ex__8226__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13130);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e13142;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__13279 = state_13130;
                          state_13130 = G__13279;
                          continue;
                        } else {
                          return ret_value__8224__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__ = function(state_13130) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1.call(this, state_13130);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__;
                  }();
                }(__13259, switch__8222__auto__, c__8284__auto___13271, G__13090_13260, n__5163__auto___13258, jobs, results, process, async);
              }();
              var state__8286__auto__ = function() {
                var statearr_13144 = f__8285__auto__.call(null);
                statearr_13144[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___13271;
                return statearr_13144;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
            };
          }(__13259, c__8284__auto___13271, G__13090_13260, n__5163__auto___13258, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__13280 = __13259 + 1;
      __13259 = G__13280;
      continue;
    } else {
    }
    break;
  }
  var c__8284__auto___13281 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___13281, jobs, results, process, async) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___13281, jobs, results, process, async) {
          return function(state_13166) {
            var state_val_13167 = state_13166[1];
            if (state_val_13167 === 1) {
              var state_13166__$1 = state_13166;
              var statearr_13168_13282 = state_13166__$1;
              statearr_13168_13282[2] = null;
              statearr_13168_13282[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13167 === 2) {
                var state_13166__$1 = state_13166;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13166__$1, 4, from);
              } else {
                if (state_val_13167 === 3) {
                  var inst_13164 = state_13166[2];
                  var state_13166__$1 = state_13166;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13166__$1, inst_13164);
                } else {
                  if (state_val_13167 === 4) {
                    var inst_13147 = state_13166[7];
                    var inst_13147__$1 = state_13166[2];
                    var inst_13148 = inst_13147__$1 == null;
                    var state_13166__$1 = function() {
                      var statearr_13169 = state_13166;
                      statearr_13169[7] = inst_13147__$1;
                      return statearr_13169;
                    }();
                    if (cljs.core.truth_(inst_13148)) {
                      var statearr_13170_13283 = state_13166__$1;
                      statearr_13170_13283[1] = 5;
                    } else {
                      var statearr_13171_13284 = state_13166__$1;
                      statearr_13171_13284[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13167 === 5) {
                      var inst_13150 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_13166__$1 = state_13166;
                      var statearr_13172_13285 = state_13166__$1;
                      statearr_13172_13285[2] = inst_13150;
                      statearr_13172_13285[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13167 === 6) {
                        var inst_13152 = state_13166[8];
                        var inst_13147 = state_13166[7];
                        var inst_13152__$1 = cljs.core.async.chan.call(null, 1);
                        var inst_13153 = cljs.core.PersistentVector.EMPTY_NODE;
                        var inst_13154 = [inst_13147, inst_13152__$1];
                        var inst_13155 = new cljs.core.PersistentVector(null, 2, 5, inst_13153, inst_13154, null);
                        var state_13166__$1 = function() {
                          var statearr_13173 = state_13166;
                          statearr_13173[8] = inst_13152__$1;
                          return statearr_13173;
                        }();
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13166__$1, 8, jobs, inst_13155);
                      } else {
                        if (state_val_13167 === 7) {
                          var inst_13162 = state_13166[2];
                          var state_13166__$1 = state_13166;
                          var statearr_13174_13286 = state_13166__$1;
                          statearr_13174_13286[2] = inst_13162;
                          statearr_13174_13286[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13167 === 8) {
                            var inst_13152 = state_13166[8];
                            var inst_13157 = state_13166[2];
                            var state_13166__$1 = function() {
                              var statearr_13175 = state_13166;
                              statearr_13175[9] = inst_13157;
                              return statearr_13175;
                            }();
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13166__$1, 9, results, inst_13152);
                          } else {
                            if (state_val_13167 === 9) {
                              var inst_13159 = state_13166[2];
                              var state_13166__$1 = function() {
                                var statearr_13176 = state_13166;
                                statearr_13176[10] = inst_13159;
                                return statearr_13176;
                              }();
                              var statearr_13177_13287 = state_13166__$1;
                              statearr_13177_13287[2] = null;
                              statearr_13177_13287[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___13281, jobs, results, process, async);
        return function(switch__8222__auto__, c__8284__auto___13281, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0 = function() {
              var statearr_13181 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_13181[0] = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__;
              statearr_13181[1] = 1;
              return statearr_13181;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1 = function(state_13166) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_13166);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e13182) {
                    if (e13182 instanceof Object) {
                      var ex__8226__auto__ = e13182;
                      var statearr_13183_13288 = state_13166;
                      statearr_13183_13288[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13166);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13182;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13289 = state_13166;
                  state_13166 = G__13289;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__ = function(state_13166) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1.call(this, state_13166);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___13281, jobs, results, process, async);
      }();
      var state__8286__auto__ = function() {
        var statearr_13184 = f__8285__auto__.call(null);
        statearr_13184[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___13281;
        return statearr_13184;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___13281, jobs, results, process, async));
  var c__8284__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto__, jobs, results, process, async) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto__, jobs, results, process, async) {
          return function(state_13222) {
            var state_val_13223 = state_13222[1];
            if (state_val_13223 === 7) {
              var inst_13218 = state_13222[2];
              var state_13222__$1 = state_13222;
              var statearr_13224_13290 = state_13222__$1;
              statearr_13224_13290[2] = inst_13218;
              statearr_13224_13290[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13223 === 20) {
                var state_13222__$1 = state_13222;
                var statearr_13225_13291 = state_13222__$1;
                statearr_13225_13291[2] = null;
                statearr_13225_13291[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13223 === 1) {
                  var state_13222__$1 = state_13222;
                  var statearr_13226_13292 = state_13222__$1;
                  statearr_13226_13292[2] = null;
                  statearr_13226_13292[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13223 === 4) {
                    var inst_13187 = state_13222[7];
                    var inst_13187__$1 = state_13222[2];
                    var inst_13188 = inst_13187__$1 == null;
                    var state_13222__$1 = function() {
                      var statearr_13227 = state_13222;
                      statearr_13227[7] = inst_13187__$1;
                      return statearr_13227;
                    }();
                    if (cljs.core.truth_(inst_13188)) {
                      var statearr_13228_13293 = state_13222__$1;
                      statearr_13228_13293[1] = 5;
                    } else {
                      var statearr_13229_13294 = state_13222__$1;
                      statearr_13229_13294[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13223 === 15) {
                      var inst_13200 = state_13222[8];
                      var state_13222__$1 = state_13222;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13222__$1, 18, to, inst_13200);
                    } else {
                      if (state_val_13223 === 21) {
                        var inst_13213 = state_13222[2];
                        var state_13222__$1 = state_13222;
                        var statearr_13230_13295 = state_13222__$1;
                        statearr_13230_13295[2] = inst_13213;
                        statearr_13230_13295[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13223 === 13) {
                          var inst_13215 = state_13222[2];
                          var state_13222__$1 = function() {
                            var statearr_13231 = state_13222;
                            statearr_13231[9] = inst_13215;
                            return statearr_13231;
                          }();
                          var statearr_13232_13296 = state_13222__$1;
                          statearr_13232_13296[2] = null;
                          statearr_13232_13296[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13223 === 6) {
                            var inst_13187 = state_13222[7];
                            var state_13222__$1 = state_13222;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13222__$1, 11, inst_13187);
                          } else {
                            if (state_val_13223 === 17) {
                              var inst_13208 = state_13222[2];
                              var state_13222__$1 = state_13222;
                              if (cljs.core.truth_(inst_13208)) {
                                var statearr_13233_13297 = state_13222__$1;
                                statearr_13233_13297[1] = 19;
                              } else {
                                var statearr_13234_13298 = state_13222__$1;
                                statearr_13234_13298[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13223 === 3) {
                                var inst_13220 = state_13222[2];
                                var state_13222__$1 = state_13222;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13222__$1, inst_13220);
                              } else {
                                if (state_val_13223 === 12) {
                                  var inst_13197 = state_13222[10];
                                  var state_13222__$1 = state_13222;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13222__$1, 14, inst_13197);
                                } else {
                                  if (state_val_13223 === 2) {
                                    var state_13222__$1 = state_13222;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13222__$1, 4, results);
                                  } else {
                                    if (state_val_13223 === 19) {
                                      var state_13222__$1 = state_13222;
                                      var statearr_13235_13299 = state_13222__$1;
                                      statearr_13235_13299[2] = null;
                                      statearr_13235_13299[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13223 === 11) {
                                        var inst_13197 = state_13222[2];
                                        var state_13222__$1 = function() {
                                          var statearr_13236 = state_13222;
                                          statearr_13236[10] = inst_13197;
                                          return statearr_13236;
                                        }();
                                        var statearr_13237_13300 = state_13222__$1;
                                        statearr_13237_13300[2] = null;
                                        statearr_13237_13300[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13223 === 9) {
                                          var state_13222__$1 = state_13222;
                                          var statearr_13238_13301 = state_13222__$1;
                                          statearr_13238_13301[2] = null;
                                          statearr_13238_13301[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13223 === 5) {
                                            var state_13222__$1 = state_13222;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_13239_13302 = state_13222__$1;
                                              statearr_13239_13302[1] = 8;
                                            } else {
                                              var statearr_13240_13303 = state_13222__$1;
                                              statearr_13240_13303[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13223 === 14) {
                                              var inst_13202 = state_13222[11];
                                              var inst_13200 = state_13222[8];
                                              var inst_13200__$1 = state_13222[2];
                                              var inst_13201 = inst_13200__$1 == null;
                                              var inst_13202__$1 = cljs.core.not.call(null, inst_13201);
                                              var state_13222__$1 = function() {
                                                var statearr_13241 = state_13222;
                                                statearr_13241[11] = inst_13202__$1;
                                                statearr_13241[8] = inst_13200__$1;
                                                return statearr_13241;
                                              }();
                                              if (inst_13202__$1) {
                                                var statearr_13242_13304 = state_13222__$1;
                                                statearr_13242_13304[1] = 15;
                                              } else {
                                                var statearr_13243_13305 = state_13222__$1;
                                                statearr_13243_13305[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13223 === 16) {
                                                var inst_13202 = state_13222[11];
                                                var state_13222__$1 = state_13222;
                                                var statearr_13244_13306 = state_13222__$1;
                                                statearr_13244_13306[2] = inst_13202;
                                                statearr_13244_13306[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13223 === 10) {
                                                  var inst_13194 = state_13222[2];
                                                  var state_13222__$1 = state_13222;
                                                  var statearr_13245_13307 = state_13222__$1;
                                                  statearr_13245_13307[2] = inst_13194;
                                                  statearr_13245_13307[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13223 === 18) {
                                                    var inst_13205 = state_13222[2];
                                                    var state_13222__$1 = state_13222;
                                                    var statearr_13246_13308 = state_13222__$1;
                                                    statearr_13246_13308[2] = inst_13205;
                                                    statearr_13246_13308[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13223 === 8) {
                                                      var inst_13191 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_13222__$1 = state_13222;
                                                      var statearr_13247_13309 = state_13222__$1;
                                                      statearr_13247_13309[2] = inst_13191;
                                                      statearr_13247_13309[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto__, jobs, results, process, async);
        return function(switch__8222__auto__, c__8284__auto__, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0 = function() {
              var statearr_13251 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13251[0] = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__;
              statearr_13251[1] = 1;
              return statearr_13251;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1 = function(state_13222) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_13222);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e13252) {
                    if (e13252 instanceof Object) {
                      var ex__8226__auto__ = e13252;
                      var statearr_13253_13310 = state_13222;
                      statearr_13253_13310[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13222);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13252;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13311 = state_13222;
                  state_13222 = G__13311;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__ = function(state_13222) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1.call(this, state_13222);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__8223__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto__, jobs, results, process, async);
      }();
      var state__8286__auto__ = function() {
        var statearr_13254 = f__8285__auto__.call(null);
        statearr_13254[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto__;
        return statearr_13254;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto__, jobs, results, process, async));
  return c__8284__auto__;
};
cljs.core.async.pipeline_async = function cljs$core$async$pipeline_async() {
  var G__13313 = arguments.length;
  switch(G__13313) {
    case 4:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4 = function(n, to, af, from) {
  return cljs.core.async.pipeline_async.call(null, n, to, af, from, true);
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5 = function(n, to, af, from, close_QMARK_) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
};
cljs.core.async.pipeline_async.cljs$lang$maxFixedArity = 5;
cljs.core.async.pipeline = function cljs$core$async$pipeline() {
  var G__13316 = arguments.length;
  switch(G__13316) {
    case 4:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4 = function(n, to, xf, from) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, true);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5 = function(n, to, xf, from, close_QMARK_) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, close_QMARK_, null);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
};
cljs.core.async.pipeline.cljs$lang$maxFixedArity = 6;
cljs.core.async.split = function cljs$core$async$split() {
  var G__13319 = arguments.length;
  switch(G__13319) {
    case 2:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.split.call(null, p, ch, null, null);
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
  var tc = cljs.core.async.chan.call(null, t_buf_or_n);
  var fc = cljs.core.async.chan.call(null, f_buf_or_n);
  var c__8284__auto___13371 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___13371, tc, fc) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___13371, tc, fc) {
          return function(state_13345) {
            var state_val_13346 = state_13345[1];
            if (state_val_13346 === 7) {
              var inst_13341 = state_13345[2];
              var state_13345__$1 = state_13345;
              var statearr_13347_13372 = state_13345__$1;
              statearr_13347_13372[2] = inst_13341;
              statearr_13347_13372[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13346 === 1) {
                var state_13345__$1 = state_13345;
                var statearr_13348_13373 = state_13345__$1;
                statearr_13348_13373[2] = null;
                statearr_13348_13373[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13346 === 4) {
                  var inst_13322 = state_13345[7];
                  var inst_13322__$1 = state_13345[2];
                  var inst_13323 = inst_13322__$1 == null;
                  var state_13345__$1 = function() {
                    var statearr_13349 = state_13345;
                    statearr_13349[7] = inst_13322__$1;
                    return statearr_13349;
                  }();
                  if (cljs.core.truth_(inst_13323)) {
                    var statearr_13350_13374 = state_13345__$1;
                    statearr_13350_13374[1] = 5;
                  } else {
                    var statearr_13351_13375 = state_13345__$1;
                    statearr_13351_13375[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13346 === 13) {
                    var state_13345__$1 = state_13345;
                    var statearr_13352_13376 = state_13345__$1;
                    statearr_13352_13376[2] = null;
                    statearr_13352_13376[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13346 === 6) {
                      var inst_13322 = state_13345[7];
                      var inst_13328 = p.call(null, inst_13322);
                      var state_13345__$1 = state_13345;
                      if (cljs.core.truth_(inst_13328)) {
                        var statearr_13353_13377 = state_13345__$1;
                        statearr_13353_13377[1] = 9;
                      } else {
                        var statearr_13354_13378 = state_13345__$1;
                        statearr_13354_13378[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13346 === 3) {
                        var inst_13343 = state_13345[2];
                        var state_13345__$1 = state_13345;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13345__$1, inst_13343);
                      } else {
                        if (state_val_13346 === 12) {
                          var state_13345__$1 = state_13345;
                          var statearr_13355_13379 = state_13345__$1;
                          statearr_13355_13379[2] = null;
                          statearr_13355_13379[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13346 === 2) {
                            var state_13345__$1 = state_13345;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13345__$1, 4, ch);
                          } else {
                            if (state_val_13346 === 11) {
                              var inst_13322 = state_13345[7];
                              var inst_13332 = state_13345[2];
                              var state_13345__$1 = state_13345;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13345__$1, 8, inst_13332, inst_13322);
                            } else {
                              if (state_val_13346 === 9) {
                                var state_13345__$1 = state_13345;
                                var statearr_13356_13380 = state_13345__$1;
                                statearr_13356_13380[2] = tc;
                                statearr_13356_13380[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13346 === 5) {
                                  var inst_13325 = cljs.core.async.close_BANG_.call(null, tc);
                                  var inst_13326 = cljs.core.async.close_BANG_.call(null, fc);
                                  var state_13345__$1 = function() {
                                    var statearr_13357 = state_13345;
                                    statearr_13357[8] = inst_13325;
                                    return statearr_13357;
                                  }();
                                  var statearr_13358_13381 = state_13345__$1;
                                  statearr_13358_13381[2] = inst_13326;
                                  statearr_13358_13381[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13346 === 14) {
                                    var inst_13339 = state_13345[2];
                                    var state_13345__$1 = state_13345;
                                    var statearr_13359_13382 = state_13345__$1;
                                    statearr_13359_13382[2] = inst_13339;
                                    statearr_13359_13382[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13346 === 10) {
                                      var state_13345__$1 = state_13345;
                                      var statearr_13360_13383 = state_13345__$1;
                                      statearr_13360_13383[2] = fc;
                                      statearr_13360_13383[1] = 11;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13346 === 8) {
                                        var inst_13334 = state_13345[2];
                                        var state_13345__$1 = state_13345;
                                        if (cljs.core.truth_(inst_13334)) {
                                          var statearr_13361_13384 = state_13345__$1;
                                          statearr_13361_13384[1] = 12;
                                        } else {
                                          var statearr_13362_13385 = state_13345__$1;
                                          statearr_13362_13385[1] = 13;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___13371, tc, fc);
        return function(switch__8222__auto__, c__8284__auto___13371, tc, fc) {
          return function() {
            var cljs$core$async$state_machine__8223__auto__ = null;
            var cljs$core$async$state_machine__8223__auto____0 = function() {
              var statearr_13366 = [null, null, null, null, null, null, null, null, null];
              statearr_13366[0] = cljs$core$async$state_machine__8223__auto__;
              statearr_13366[1] = 1;
              return statearr_13366;
            };
            var cljs$core$async$state_machine__8223__auto____1 = function(state_13345) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_13345);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e13367) {
                    if (e13367 instanceof Object) {
                      var ex__8226__auto__ = e13367;
                      var statearr_13368_13386 = state_13345;
                      statearr_13368_13386[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13345);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13367;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13387 = state_13345;
                  state_13345 = G__13387;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8223__auto__ = function(state_13345) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8223__auto____1.call(this, state_13345);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8223__auto____0;
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8223__auto____1;
            return cljs$core$async$state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___13371, tc, fc);
      }();
      var state__8286__auto__ = function() {
        var statearr_13369 = f__8285__auto__.call(null);
        statearr_13369[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___13371;
        return statearr_13369;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___13371, tc, fc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
};
cljs.core.async.split.cljs$lang$maxFixedArity = 4;
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__8284__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto__) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto__) {
          return function(state_13451) {
            var state_val_13452 = state_13451[1];
            if (state_val_13452 === 7) {
              var inst_13447 = state_13451[2];
              var state_13451__$1 = state_13451;
              var statearr_13453_13474 = state_13451__$1;
              statearr_13453_13474[2] = inst_13447;
              statearr_13453_13474[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13452 === 1) {
                var inst_13431 = init;
                var state_13451__$1 = function() {
                  var statearr_13454 = state_13451;
                  statearr_13454[7] = inst_13431;
                  return statearr_13454;
                }();
                var statearr_13455_13475 = state_13451__$1;
                statearr_13455_13475[2] = null;
                statearr_13455_13475[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13452 === 4) {
                  var inst_13434 = state_13451[8];
                  var inst_13434__$1 = state_13451[2];
                  var inst_13435 = inst_13434__$1 == null;
                  var state_13451__$1 = function() {
                    var statearr_13456 = state_13451;
                    statearr_13456[8] = inst_13434__$1;
                    return statearr_13456;
                  }();
                  if (cljs.core.truth_(inst_13435)) {
                    var statearr_13457_13476 = state_13451__$1;
                    statearr_13457_13476[1] = 5;
                  } else {
                    var statearr_13458_13477 = state_13451__$1;
                    statearr_13458_13477[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13452 === 6) {
                    var inst_13434 = state_13451[8];
                    var inst_13438 = state_13451[9];
                    var inst_13431 = state_13451[7];
                    var inst_13438__$1 = f.call(null, inst_13431, inst_13434);
                    var inst_13439 = cljs.core.reduced_QMARK_.call(null, inst_13438__$1);
                    var state_13451__$1 = function() {
                      var statearr_13459 = state_13451;
                      statearr_13459[9] = inst_13438__$1;
                      return statearr_13459;
                    }();
                    if (inst_13439) {
                      var statearr_13460_13478 = state_13451__$1;
                      statearr_13460_13478[1] = 8;
                    } else {
                      var statearr_13461_13479 = state_13451__$1;
                      statearr_13461_13479[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13452 === 3) {
                      var inst_13449 = state_13451[2];
                      var state_13451__$1 = state_13451;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13451__$1, inst_13449);
                    } else {
                      if (state_val_13452 === 2) {
                        var state_13451__$1 = state_13451;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13451__$1, 4, ch);
                      } else {
                        if (state_val_13452 === 9) {
                          var inst_13438 = state_13451[9];
                          var inst_13431 = inst_13438;
                          var state_13451__$1 = function() {
                            var statearr_13462 = state_13451;
                            statearr_13462[7] = inst_13431;
                            return statearr_13462;
                          }();
                          var statearr_13463_13480 = state_13451__$1;
                          statearr_13463_13480[2] = null;
                          statearr_13463_13480[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13452 === 5) {
                            var inst_13431 = state_13451[7];
                            var state_13451__$1 = state_13451;
                            var statearr_13464_13481 = state_13451__$1;
                            statearr_13464_13481[2] = inst_13431;
                            statearr_13464_13481[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13452 === 10) {
                              var inst_13445 = state_13451[2];
                              var state_13451__$1 = state_13451;
                              var statearr_13465_13482 = state_13451__$1;
                              statearr_13465_13482[2] = inst_13445;
                              statearr_13465_13482[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13452 === 8) {
                                var inst_13438 = state_13451[9];
                                var inst_13441 = cljs.core.deref.call(null, inst_13438);
                                var state_13451__$1 = state_13451;
                                var statearr_13466_13483 = state_13451__$1;
                                statearr_13466_13483[2] = inst_13441;
                                statearr_13466_13483[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto__);
        return function(switch__8222__auto__, c__8284__auto__) {
          return function() {
            var cljs$core$async$reduce_$_state_machine__8223__auto__ = null;
            var cljs$core$async$reduce_$_state_machine__8223__auto____0 = function() {
              var statearr_13470 = [null, null, null, null, null, null, null, null, null, null];
              statearr_13470[0] = cljs$core$async$reduce_$_state_machine__8223__auto__;
              statearr_13470[1] = 1;
              return statearr_13470;
            };
            var cljs$core$async$reduce_$_state_machine__8223__auto____1 = function(state_13451) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_13451);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e13471) {
                    if (e13471 instanceof Object) {
                      var ex__8226__auto__ = e13471;
                      var statearr_13472_13484 = state_13451;
                      statearr_13472_13484[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13451);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13471;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13485 = state_13451;
                  state_13451 = G__13485;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$reduce_$_state_machine__8223__auto__ = function(state_13451) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$reduce_$_state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$reduce_$_state_machine__8223__auto____1.call(this, state_13451);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$reduce_$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__8223__auto____0;
            cljs$core$async$reduce_$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__8223__auto____1;
            return cljs$core$async$reduce_$_state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto__);
      }();
      var state__8286__auto__ = function() {
        var statearr_13473 = f__8285__auto__.call(null);
        statearr_13473[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto__;
        return statearr_13473;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto__));
  return c__8284__auto__;
};
cljs.core.async.onto_chan = function cljs$core$async$onto_chan() {
  var G__13487 = arguments.length;
  switch(G__13487) {
    case 2:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2 = function(ch, coll) {
  return cljs.core.async.onto_chan.call(null, ch, coll, true);
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3 = function(ch, coll, close_QMARK_) {
  var c__8284__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto__) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto__) {
          return function(state_13512) {
            var state_val_13513 = state_13512[1];
            if (state_val_13513 === 7) {
              var inst_13494 = state_13512[2];
              var state_13512__$1 = state_13512;
              var statearr_13514_13538 = state_13512__$1;
              statearr_13514_13538[2] = inst_13494;
              statearr_13514_13538[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13513 === 1) {
                var inst_13488 = cljs.core.seq.call(null, coll);
                var inst_13489 = inst_13488;
                var state_13512__$1 = function() {
                  var statearr_13515 = state_13512;
                  statearr_13515[7] = inst_13489;
                  return statearr_13515;
                }();
                var statearr_13516_13539 = state_13512__$1;
                statearr_13516_13539[2] = null;
                statearr_13516_13539[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13513 === 4) {
                  var inst_13489 = state_13512[7];
                  var inst_13492 = cljs.core.first.call(null, inst_13489);
                  var state_13512__$1 = state_13512;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13512__$1, 7, ch, inst_13492);
                } else {
                  if (state_val_13513 === 13) {
                    var inst_13506 = state_13512[2];
                    var state_13512__$1 = state_13512;
                    var statearr_13517_13540 = state_13512__$1;
                    statearr_13517_13540[2] = inst_13506;
                    statearr_13517_13540[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13513 === 6) {
                      var inst_13497 = state_13512[2];
                      var state_13512__$1 = state_13512;
                      if (cljs.core.truth_(inst_13497)) {
                        var statearr_13518_13541 = state_13512__$1;
                        statearr_13518_13541[1] = 8;
                      } else {
                        var statearr_13519_13542 = state_13512__$1;
                        statearr_13519_13542[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13513 === 3) {
                        var inst_13510 = state_13512[2];
                        var state_13512__$1 = state_13512;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13512__$1, inst_13510);
                      } else {
                        if (state_val_13513 === 12) {
                          var state_13512__$1 = state_13512;
                          var statearr_13520_13543 = state_13512__$1;
                          statearr_13520_13543[2] = null;
                          statearr_13520_13543[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13513 === 2) {
                            var inst_13489 = state_13512[7];
                            var state_13512__$1 = state_13512;
                            if (cljs.core.truth_(inst_13489)) {
                              var statearr_13521_13544 = state_13512__$1;
                              statearr_13521_13544[1] = 4;
                            } else {
                              var statearr_13522_13545 = state_13512__$1;
                              statearr_13522_13545[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13513 === 11) {
                              var inst_13503 = cljs.core.async.close_BANG_.call(null, ch);
                              var state_13512__$1 = state_13512;
                              var statearr_13523_13546 = state_13512__$1;
                              statearr_13523_13546[2] = inst_13503;
                              statearr_13523_13546[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13513 === 9) {
                                var state_13512__$1 = state_13512;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_13524_13547 = state_13512__$1;
                                  statearr_13524_13547[1] = 11;
                                } else {
                                  var statearr_13525_13548 = state_13512__$1;
                                  statearr_13525_13548[1] = 12;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13513 === 5) {
                                  var inst_13489 = state_13512[7];
                                  var state_13512__$1 = state_13512;
                                  var statearr_13526_13549 = state_13512__$1;
                                  statearr_13526_13549[2] = inst_13489;
                                  statearr_13526_13549[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13513 === 10) {
                                    var inst_13508 = state_13512[2];
                                    var state_13512__$1 = state_13512;
                                    var statearr_13527_13550 = state_13512__$1;
                                    statearr_13527_13550[2] = inst_13508;
                                    statearr_13527_13550[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13513 === 8) {
                                      var inst_13489 = state_13512[7];
                                      var inst_13499 = cljs.core.next.call(null, inst_13489);
                                      var inst_13489__$1 = inst_13499;
                                      var state_13512__$1 = function() {
                                        var statearr_13528 = state_13512;
                                        statearr_13528[7] = inst_13489__$1;
                                        return statearr_13528;
                                      }();
                                      var statearr_13529_13551 = state_13512__$1;
                                      statearr_13529_13551[2] = null;
                                      statearr_13529_13551[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto__);
        return function(switch__8222__auto__, c__8284__auto__) {
          return function() {
            var cljs$core$async$state_machine__8223__auto__ = null;
            var cljs$core$async$state_machine__8223__auto____0 = function() {
              var statearr_13533 = [null, null, null, null, null, null, null, null];
              statearr_13533[0] = cljs$core$async$state_machine__8223__auto__;
              statearr_13533[1] = 1;
              return statearr_13533;
            };
            var cljs$core$async$state_machine__8223__auto____1 = function(state_13512) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_13512);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e13534) {
                    if (e13534 instanceof Object) {
                      var ex__8226__auto__ = e13534;
                      var statearr_13535_13552 = state_13512;
                      statearr_13535_13552[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13512);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13534;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13553 = state_13512;
                  state_13512 = G__13553;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8223__auto__ = function(state_13512) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8223__auto____1.call(this, state_13512);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8223__auto____0;
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8223__auto____1;
            return cljs$core$async$state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto__);
      }();
      var state__8286__auto__ = function() {
        var statearr_13536 = f__8285__auto__.call(null);
        statearr_13536[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto__;
        return statearr_13536;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto__));
  return c__8284__auto__;
};
cljs.core.async.onto_chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj13555 = {};
  return obj13555;
}();
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (function() {
    var and__4266__auto__ = _;
    if (and__4266__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4914__auto__ = _ == null ? null : _;
    return function() {
      var or__4278__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj13557 = {};
  return obj13557;
}();
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__4266__auto__ = m;
    if (and__4266__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4914__auto__ = m == null ? null : m;
    return function() {
      var or__4278__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (function() {
    var and__4266__auto__ = m;
    if (and__4266__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4914__auto__ = m == null ? null : m;
    return function() {
      var or__4278__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (function() {
    var and__4266__auto__ = m;
    if (and__4266__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4914__auto__ = m == null ? null : m;
    return function() {
      var or__4278__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t13779 !== "undefined") {
    } else {
      cljs.core.async.t13779 = function(mult, ch, cs, meta13780) {
        this.mult = mult;
        this.ch = ch;
        this.cs = cs;
        this.meta13780 = meta13780;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t13779.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_13781, meta13780__$1) {
          var self__ = this;
          var _13781__$1 = this;
          return new cljs.core.async.t13779(self__.mult, self__.ch, self__.cs, meta13780__$1);
        };
      }(cs);
      cljs.core.async.t13779.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_13781) {
          var self__ = this;
          var _13781__$1 = this;
          return self__.meta13780;
        };
      }(cs);
      cljs.core.async.t13779.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t13779.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t13779.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t13779.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t13779.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t13779.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t13779.cljs$lang$type = true;
      cljs.core.async.t13779.cljs$lang$ctorStr = "cljs.core.async/t13779";
      cljs.core.async.t13779.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
          return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async/t13779");
        };
      }(cs);
      cljs.core.async.__GT_t13779 = function(cs) {
        return function cljs$core$async$mult_$___GT_t13779(mult__$1, ch__$1, cs__$1, meta13780) {
          return new cljs.core.async.t13779(mult__$1, ch__$1, cs__$1, meta13780);
        };
      }(cs);
    }
    return new cljs.core.async.t13779(cljs$core$async$mult, ch, cs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__8284__auto___14000 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___14000, cs, m, dchan, dctr, done) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___14000, cs, m, dchan, dctr, done) {
          return function(state_13912) {
            var state_val_13913 = state_13912[1];
            if (state_val_13913 === 7) {
              var inst_13908 = state_13912[2];
              var state_13912__$1 = state_13912;
              var statearr_13914_14001 = state_13912__$1;
              statearr_13914_14001[2] = inst_13908;
              statearr_13914_14001[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13913 === 20) {
                var inst_13813 = state_13912[7];
                var inst_13823 = cljs.core.first.call(null, inst_13813);
                var inst_13824 = cljs.core.nth.call(null, inst_13823, 0, null);
                var inst_13825 = cljs.core.nth.call(null, inst_13823, 1, null);
                var state_13912__$1 = function() {
                  var statearr_13915 = state_13912;
                  statearr_13915[8] = inst_13824;
                  return statearr_13915;
                }();
                if (cljs.core.truth_(inst_13825)) {
                  var statearr_13916_14002 = state_13912__$1;
                  statearr_13916_14002[1] = 22;
                } else {
                  var statearr_13917_14003 = state_13912__$1;
                  statearr_13917_14003[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13913 === 27) {
                  var inst_13853 = state_13912[9];
                  var inst_13855 = state_13912[10];
                  var inst_13860 = state_13912[11];
                  var inst_13784 = state_13912[12];
                  var inst_13860__$1 = cljs.core._nth.call(null, inst_13853, inst_13855);
                  var inst_13861 = cljs.core.async.put_BANG_.call(null, inst_13860__$1, inst_13784, done);
                  var state_13912__$1 = function() {
                    var statearr_13918 = state_13912;
                    statearr_13918[11] = inst_13860__$1;
                    return statearr_13918;
                  }();
                  if (cljs.core.truth_(inst_13861)) {
                    var statearr_13919_14004 = state_13912__$1;
                    statearr_13919_14004[1] = 30;
                  } else {
                    var statearr_13920_14005 = state_13912__$1;
                    statearr_13920_14005[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13913 === 1) {
                    var state_13912__$1 = state_13912;
                    var statearr_13921_14006 = state_13912__$1;
                    statearr_13921_14006[2] = null;
                    statearr_13921_14006[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13913 === 24) {
                      var inst_13813 = state_13912[7];
                      var inst_13830 = state_13912[2];
                      var inst_13831 = cljs.core.next.call(null, inst_13813);
                      var inst_13793 = inst_13831;
                      var inst_13794 = null;
                      var inst_13795 = 0;
                      var inst_13796 = 0;
                      var state_13912__$1 = function() {
                        var statearr_13922 = state_13912;
                        statearr_13922[13] = inst_13794;
                        statearr_13922[14] = inst_13795;
                        statearr_13922[15] = inst_13793;
                        statearr_13922[16] = inst_13830;
                        statearr_13922[17] = inst_13796;
                        return statearr_13922;
                      }();
                      var statearr_13923_14007 = state_13912__$1;
                      statearr_13923_14007[2] = null;
                      statearr_13923_14007[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13913 === 39) {
                        var state_13912__$1 = state_13912;
                        var statearr_13927_14008 = state_13912__$1;
                        statearr_13927_14008[2] = null;
                        statearr_13927_14008[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13913 === 4) {
                          var inst_13784 = state_13912[12];
                          var inst_13784__$1 = state_13912[2];
                          var inst_13785 = inst_13784__$1 == null;
                          var state_13912__$1 = function() {
                            var statearr_13928 = state_13912;
                            statearr_13928[12] = inst_13784__$1;
                            return statearr_13928;
                          }();
                          if (cljs.core.truth_(inst_13785)) {
                            var statearr_13929_14009 = state_13912__$1;
                            statearr_13929_14009[1] = 5;
                          } else {
                            var statearr_13930_14010 = state_13912__$1;
                            statearr_13930_14010[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13913 === 15) {
                            var inst_13794 = state_13912[13];
                            var inst_13795 = state_13912[14];
                            var inst_13793 = state_13912[15];
                            var inst_13796 = state_13912[17];
                            var inst_13809 = state_13912[2];
                            var inst_13810 = inst_13796 + 1;
                            var tmp13924 = inst_13794;
                            var tmp13925 = inst_13795;
                            var tmp13926 = inst_13793;
                            var inst_13793__$1 = tmp13926;
                            var inst_13794__$1 = tmp13924;
                            var inst_13795__$1 = tmp13925;
                            var inst_13796__$1 = inst_13810;
                            var state_13912__$1 = function() {
                              var statearr_13931 = state_13912;
                              statearr_13931[13] = inst_13794__$1;
                              statearr_13931[14] = inst_13795__$1;
                              statearr_13931[15] = inst_13793__$1;
                              statearr_13931[18] = inst_13809;
                              statearr_13931[17] = inst_13796__$1;
                              return statearr_13931;
                            }();
                            var statearr_13932_14011 = state_13912__$1;
                            statearr_13932_14011[2] = null;
                            statearr_13932_14011[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13913 === 21) {
                              var inst_13834 = state_13912[2];
                              var state_13912__$1 = state_13912;
                              var statearr_13936_14012 = state_13912__$1;
                              statearr_13936_14012[2] = inst_13834;
                              statearr_13936_14012[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13913 === 31) {
                                var inst_13860 = state_13912[11];
                                var inst_13864 = done.call(null, null);
                                var inst_13865 = cljs.core.async.untap_STAR_.call(null, m, inst_13860);
                                var state_13912__$1 = function() {
                                  var statearr_13937 = state_13912;
                                  statearr_13937[19] = inst_13864;
                                  return statearr_13937;
                                }();
                                var statearr_13938_14013 = state_13912__$1;
                                statearr_13938_14013[2] = inst_13865;
                                statearr_13938_14013[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13913 === 32) {
                                  var inst_13853 = state_13912[9];
                                  var inst_13855 = state_13912[10];
                                  var inst_13852 = state_13912[20];
                                  var inst_13854 = state_13912[21];
                                  var inst_13867 = state_13912[2];
                                  var inst_13868 = inst_13855 + 1;
                                  var tmp13933 = inst_13853;
                                  var tmp13934 = inst_13852;
                                  var tmp13935 = inst_13854;
                                  var inst_13852__$1 = tmp13934;
                                  var inst_13853__$1 = tmp13933;
                                  var inst_13854__$1 = tmp13935;
                                  var inst_13855__$1 = inst_13868;
                                  var state_13912__$1 = function() {
                                    var statearr_13939 = state_13912;
                                    statearr_13939[9] = inst_13853__$1;
                                    statearr_13939[22] = inst_13867;
                                    statearr_13939[10] = inst_13855__$1;
                                    statearr_13939[20] = inst_13852__$1;
                                    statearr_13939[21] = inst_13854__$1;
                                    return statearr_13939;
                                  }();
                                  var statearr_13940_14014 = state_13912__$1;
                                  statearr_13940_14014[2] = null;
                                  statearr_13940_14014[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13913 === 40) {
                                    var inst_13880 = state_13912[23];
                                    var inst_13884 = done.call(null, null);
                                    var inst_13885 = cljs.core.async.untap_STAR_.call(null, m, inst_13880);
                                    var state_13912__$1 = function() {
                                      var statearr_13941 = state_13912;
                                      statearr_13941[24] = inst_13884;
                                      return statearr_13941;
                                    }();
                                    var statearr_13942_14015 = state_13912__$1;
                                    statearr_13942_14015[2] = inst_13885;
                                    statearr_13942_14015[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13913 === 33) {
                                      var inst_13871 = state_13912[25];
                                      var inst_13873 = cljs.core.chunked_seq_QMARK_.call(null, inst_13871);
                                      var state_13912__$1 = state_13912;
                                      if (inst_13873) {
                                        var statearr_13943_14016 = state_13912__$1;
                                        statearr_13943_14016[1] = 36;
                                      } else {
                                        var statearr_13944_14017 = state_13912__$1;
                                        statearr_13944_14017[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13913 === 13) {
                                        var inst_13803 = state_13912[26];
                                        var inst_13806 = cljs.core.async.close_BANG_.call(null, inst_13803);
                                        var state_13912__$1 = state_13912;
                                        var statearr_13945_14018 = state_13912__$1;
                                        statearr_13945_14018[2] = inst_13806;
                                        statearr_13945_14018[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13913 === 22) {
                                          var inst_13824 = state_13912[8];
                                          var inst_13827 = cljs.core.async.close_BANG_.call(null, inst_13824);
                                          var state_13912__$1 = state_13912;
                                          var statearr_13946_14019 = state_13912__$1;
                                          statearr_13946_14019[2] = inst_13827;
                                          statearr_13946_14019[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13913 === 36) {
                                            var inst_13871 = state_13912[25];
                                            var inst_13875 = cljs.core.chunk_first.call(null, inst_13871);
                                            var inst_13876 = cljs.core.chunk_rest.call(null, inst_13871);
                                            var inst_13877 = cljs.core.count.call(null, inst_13875);
                                            var inst_13852 = inst_13876;
                                            var inst_13853 = inst_13875;
                                            var inst_13854 = inst_13877;
                                            var inst_13855 = 0;
                                            var state_13912__$1 = function() {
                                              var statearr_13947 = state_13912;
                                              statearr_13947[9] = inst_13853;
                                              statearr_13947[10] = inst_13855;
                                              statearr_13947[20] = inst_13852;
                                              statearr_13947[21] = inst_13854;
                                              return statearr_13947;
                                            }();
                                            var statearr_13948_14020 = state_13912__$1;
                                            statearr_13948_14020[2] = null;
                                            statearr_13948_14020[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13913 === 41) {
                                              var inst_13871 = state_13912[25];
                                              var inst_13887 = state_13912[2];
                                              var inst_13888 = cljs.core.next.call(null, inst_13871);
                                              var inst_13852 = inst_13888;
                                              var inst_13853 = null;
                                              var inst_13854 = 0;
                                              var inst_13855 = 0;
                                              var state_13912__$1 = function() {
                                                var statearr_13949 = state_13912;
                                                statearr_13949[9] = inst_13853;
                                                statearr_13949[27] = inst_13887;
                                                statearr_13949[10] = inst_13855;
                                                statearr_13949[20] = inst_13852;
                                                statearr_13949[21] = inst_13854;
                                                return statearr_13949;
                                              }();
                                              var statearr_13950_14021 = state_13912__$1;
                                              statearr_13950_14021[2] = null;
                                              statearr_13950_14021[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13913 === 43) {
                                                var state_13912__$1 = state_13912;
                                                var statearr_13951_14022 = state_13912__$1;
                                                statearr_13951_14022[2] = null;
                                                statearr_13951_14022[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13913 === 29) {
                                                  var inst_13896 = state_13912[2];
                                                  var state_13912__$1 = state_13912;
                                                  var statearr_13952_14023 = state_13912__$1;
                                                  statearr_13952_14023[2] = inst_13896;
                                                  statearr_13952_14023[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13913 === 44) {
                                                    var inst_13905 = state_13912[2];
                                                    var state_13912__$1 = function() {
                                                      var statearr_13953 = state_13912;
                                                      statearr_13953[28] = inst_13905;
                                                      return statearr_13953;
                                                    }();
                                                    var statearr_13954_14024 = state_13912__$1;
                                                    statearr_13954_14024[2] = null;
                                                    statearr_13954_14024[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13913 === 6) {
                                                      var inst_13844 = state_13912[29];
                                                      var inst_13843 = cljs.core.deref.call(null, cs);
                                                      var inst_13844__$1 = cljs.core.keys.call(null, inst_13843);
                                                      var inst_13845 = cljs.core.count.call(null, inst_13844__$1);
                                                      var inst_13846 = cljs.core.reset_BANG_.call(null, dctr, inst_13845);
                                                      var inst_13851 = cljs.core.seq.call(null, inst_13844__$1);
                                                      var inst_13852 = inst_13851;
                                                      var inst_13853 = null;
                                                      var inst_13854 = 0;
                                                      var inst_13855 = 0;
                                                      var state_13912__$1 = function() {
                                                        var statearr_13955 = state_13912;
                                                        statearr_13955[9] = inst_13853;
                                                        statearr_13955[10] = inst_13855;
                                                        statearr_13955[29] = inst_13844__$1;
                                                        statearr_13955[20] = inst_13852;
                                                        statearr_13955[30] = inst_13846;
                                                        statearr_13955[21] = inst_13854;
                                                        return statearr_13955;
                                                      }();
                                                      var statearr_13956_14025 = state_13912__$1;
                                                      statearr_13956_14025[2] = null;
                                                      statearr_13956_14025[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_13913 === 28) {
                                                        var inst_13852 = state_13912[20];
                                                        var inst_13871 = state_13912[25];
                                                        var inst_13871__$1 = cljs.core.seq.call(null, inst_13852);
                                                        var state_13912__$1 = function() {
                                                          var statearr_13957 = state_13912;
                                                          statearr_13957[25] = inst_13871__$1;
                                                          return statearr_13957;
                                                        }();
                                                        if (inst_13871__$1) {
                                                          var statearr_13958_14026 = state_13912__$1;
                                                          statearr_13958_14026[1] = 33;
                                                        } else {
                                                          var statearr_13959_14027 = state_13912__$1;
                                                          statearr_13959_14027[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_13913 === 25) {
                                                          var inst_13855 = state_13912[10];
                                                          var inst_13854 = state_13912[21];
                                                          var inst_13857 = inst_13855 < inst_13854;
                                                          var inst_13858 = inst_13857;
                                                          var state_13912__$1 = state_13912;
                                                          if (cljs.core.truth_(inst_13858)) {
                                                            var statearr_13960_14028 = state_13912__$1;
                                                            statearr_13960_14028[1] = 27;
                                                          } else {
                                                            var statearr_13961_14029 = state_13912__$1;
                                                            statearr_13961_14029[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_13913 === 34) {
                                                            var state_13912__$1 = state_13912;
                                                            var statearr_13962_14030 = state_13912__$1;
                                                            statearr_13962_14030[2] = null;
                                                            statearr_13962_14030[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_13913 === 17) {
                                                              var state_13912__$1 = state_13912;
                                                              var statearr_13963_14031 = state_13912__$1;
                                                              statearr_13963_14031[2] = null;
                                                              statearr_13963_14031[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_13913 === 3) {
                                                                var inst_13910 = state_13912[2];
                                                                var state_13912__$1 = state_13912;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13912__$1, inst_13910);
                                                              } else {
                                                                if (state_val_13913 === 12) {
                                                                  var inst_13839 = state_13912[2];
                                                                  var state_13912__$1 = state_13912;
                                                                  var statearr_13964_14032 = state_13912__$1;
                                                                  statearr_13964_14032[2] = inst_13839;
                                                                  statearr_13964_14032[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_13913 === 2) {
                                                                    var state_13912__$1 = state_13912;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13912__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_13913 === 23) {
                                                                      var state_13912__$1 = state_13912;
                                                                      var statearr_13965_14033 = state_13912__$1;
                                                                      statearr_13965_14033[2] = null;
                                                                      statearr_13965_14033[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_13913 === 35) {
                                                                        var inst_13894 = state_13912[2];
                                                                        var state_13912__$1 = state_13912;
                                                                        var statearr_13966_14034 = state_13912__$1;
                                                                        statearr_13966_14034[2] = inst_13894;
                                                                        statearr_13966_14034[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_13913 === 19) {
                                                                          var inst_13813 = state_13912[7];
                                                                          var inst_13817 = cljs.core.chunk_first.call(null, inst_13813);
                                                                          var inst_13818 = cljs.core.chunk_rest.call(null, inst_13813);
                                                                          var inst_13819 = cljs.core.count.call(null, inst_13817);
                                                                          var inst_13793 = inst_13818;
                                                                          var inst_13794 = inst_13817;
                                                                          var inst_13795 = inst_13819;
                                                                          var inst_13796 = 0;
                                                                          var state_13912__$1 = function() {
                                                                            var statearr_13967 = state_13912;
                                                                            statearr_13967[13] = inst_13794;
                                                                            statearr_13967[14] = inst_13795;
                                                                            statearr_13967[15] = inst_13793;
                                                                            statearr_13967[17] = inst_13796;
                                                                            return statearr_13967;
                                                                          }();
                                                                          var statearr_13968_14035 = state_13912__$1;
                                                                          statearr_13968_14035[2] = null;
                                                                          statearr_13968_14035[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_13913 === 11) {
                                                                            var inst_13793 = state_13912[15];
                                                                            var inst_13813 = state_13912[7];
                                                                            var inst_13813__$1 = cljs.core.seq.call(null, inst_13793);
                                                                            var state_13912__$1 = function() {
                                                                              var statearr_13969 = state_13912;
                                                                              statearr_13969[7] = inst_13813__$1;
                                                                              return statearr_13969;
                                                                            }();
                                                                            if (inst_13813__$1) {
                                                                              var statearr_13970_14036 = state_13912__$1;
                                                                              statearr_13970_14036[1] = 16;
                                                                            } else {
                                                                              var statearr_13971_14037 = state_13912__$1;
                                                                              statearr_13971_14037[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_13913 === 9) {
                                                                              var inst_13841 = state_13912[2];
                                                                              var state_13912__$1 = state_13912;
                                                                              var statearr_13972_14038 = state_13912__$1;
                                                                              statearr_13972_14038[2] = inst_13841;
                                                                              statearr_13972_14038[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_13913 === 5) {
                                                                                var inst_13791 = cljs.core.deref.call(null, cs);
                                                                                var inst_13792 = cljs.core.seq.call(null, inst_13791);
                                                                                var inst_13793 = inst_13792;
                                                                                var inst_13794 = null;
                                                                                var inst_13795 = 0;
                                                                                var inst_13796 = 0;
                                                                                var state_13912__$1 = function() {
                                                                                  var statearr_13973 = state_13912;
                                                                                  statearr_13973[13] = inst_13794;
                                                                                  statearr_13973[14] = inst_13795;
                                                                                  statearr_13973[15] = inst_13793;
                                                                                  statearr_13973[17] = inst_13796;
                                                                                  return statearr_13973;
                                                                                }();
                                                                                var statearr_13974_14039 = state_13912__$1;
                                                                                statearr_13974_14039[2] = null;
                                                                                statearr_13974_14039[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_13913 === 14) {
                                                                                  var state_13912__$1 = state_13912;
                                                                                  var statearr_13975_14040 = state_13912__$1;
                                                                                  statearr_13975_14040[2] = null;
                                                                                  statearr_13975_14040[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_13913 === 45) {
                                                                                    var inst_13902 = state_13912[2];
                                                                                    var state_13912__$1 = state_13912;
                                                                                    var statearr_13976_14041 = state_13912__$1;
                                                                                    statearr_13976_14041[2] = inst_13902;
                                                                                    statearr_13976_14041[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_13913 === 26) {
                                                                                      var inst_13844 = state_13912[29];
                                                                                      var inst_13898 = state_13912[2];
                                                                                      var inst_13899 = cljs.core.seq.call(null, inst_13844);
                                                                                      var state_13912__$1 = function() {
                                                                                        var statearr_13977 = state_13912;
                                                                                        statearr_13977[31] = inst_13898;
                                                                                        return statearr_13977;
                                                                                      }();
                                                                                      if (inst_13899) {
                                                                                        var statearr_13978_14042 = state_13912__$1;
                                                                                        statearr_13978_14042[1] = 42;
                                                                                      } else {
                                                                                        var statearr_13979_14043 = state_13912__$1;
                                                                                        statearr_13979_14043[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_13913 === 16) {
                                                                                        var inst_13813 = state_13912[7];
                                                                                        var inst_13815 = cljs.core.chunked_seq_QMARK_.call(null, inst_13813);
                                                                                        var state_13912__$1 = state_13912;
                                                                                        if (inst_13815) {
                                                                                          var statearr_13980_14044 = state_13912__$1;
                                                                                          statearr_13980_14044[1] = 19;
                                                                                        } else {
                                                                                          var statearr_13981_14045 = state_13912__$1;
                                                                                          statearr_13981_14045[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_13913 === 38) {
                                                                                          var inst_13891 = state_13912[2];
                                                                                          var state_13912__$1 = state_13912;
                                                                                          var statearr_13982_14046 = state_13912__$1;
                                                                                          statearr_13982_14046[2] = inst_13891;
                                                                                          statearr_13982_14046[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_13913 === 30) {
                                                                                            var state_13912__$1 = state_13912;
                                                                                            var statearr_13983_14047 = state_13912__$1;
                                                                                            statearr_13983_14047[2] = null;
                                                                                            statearr_13983_14047[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_13913 === 10) {
                                                                                              var inst_13794 = state_13912[13];
                                                                                              var inst_13796 = state_13912[17];
                                                                                              var inst_13802 = cljs.core._nth.call(null, inst_13794, inst_13796);
                                                                                              var inst_13803 = cljs.core.nth.call(null, inst_13802, 0, null);
                                                                                              var inst_13804 = cljs.core.nth.call(null, inst_13802, 1, null);
                                                                                              var state_13912__$1 = function() {
                                                                                                var statearr_13984 = state_13912;
                                                                                                statearr_13984[26] = inst_13803;
                                                                                                return statearr_13984;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_13804)) {
                                                                                                var statearr_13985_14048 = state_13912__$1;
                                                                                                statearr_13985_14048[1] = 13;
                                                                                              } else {
                                                                                                var statearr_13986_14049 = state_13912__$1;
                                                                                                statearr_13986_14049[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_13913 === 18) {
                                                                                                var inst_13837 = state_13912[2];
                                                                                                var state_13912__$1 = state_13912;
                                                                                                var statearr_13987_14050 = state_13912__$1;
                                                                                                statearr_13987_14050[2] = inst_13837;
                                                                                                statearr_13987_14050[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_13913 === 42) {
                                                                                                  var state_13912__$1 = state_13912;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13912__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_13913 === 37) {
                                                                                                    var inst_13880 = state_13912[23];
                                                                                                    var inst_13784 = state_13912[12];
                                                                                                    var inst_13871 = state_13912[25];
                                                                                                    var inst_13880__$1 = cljs.core.first.call(null, inst_13871);
                                                                                                    var inst_13881 = cljs.core.async.put_BANG_.call(null, inst_13880__$1, inst_13784, done);
                                                                                                    var state_13912__$1 = function() {
                                                                                                      var statearr_13988 = state_13912;
                                                                                                      statearr_13988[23] = inst_13880__$1;
                                                                                                      return statearr_13988;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_13881)) {
                                                                                                      var statearr_13989_14051 = state_13912__$1;
                                                                                                      statearr_13989_14051[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_13990_14052 = state_13912__$1;
                                                                                                      statearr_13990_14052[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_13913 === 8) {
                                                                                                      var inst_13795 = state_13912[14];
                                                                                                      var inst_13796 = state_13912[17];
                                                                                                      var inst_13798 = inst_13796 < inst_13795;
                                                                                                      var inst_13799 = inst_13798;
                                                                                                      var state_13912__$1 = state_13912;
                                                                                                      if (cljs.core.truth_(inst_13799)) {
                                                                                                        var statearr_13991_14053 = state_13912__$1;
                                                                                                        statearr_13991_14053[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_13992_14054 = state_13912__$1;
                                                                                                        statearr_13992_14054[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___14000, cs, m, dchan, dctr, done);
        return function(switch__8222__auto__, c__8284__auto___14000, cs, m, dchan, dctr, done) {
          return function() {
            var cljs$core$async$mult_$_state_machine__8223__auto__ = null;
            var cljs$core$async$mult_$_state_machine__8223__auto____0 = function() {
              var statearr_13996 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13996[0] = cljs$core$async$mult_$_state_machine__8223__auto__;
              statearr_13996[1] = 1;
              return statearr_13996;
            };
            var cljs$core$async$mult_$_state_machine__8223__auto____1 = function(state_13912) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_13912);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e13997) {
                    if (e13997 instanceof Object) {
                      var ex__8226__auto__ = e13997;
                      var statearr_13998_14055 = state_13912;
                      statearr_13998_14055[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13912);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13997;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14056 = state_13912;
                  state_13912 = G__14056;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$mult_$_state_machine__8223__auto__ = function(state_13912) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mult_$_state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$mult_$_state_machine__8223__auto____1.call(this, state_13912);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mult_$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__8223__auto____0;
            cljs$core$async$mult_$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__8223__auto____1;
            return cljs$core$async$mult_$_state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___14000, cs, m, dchan, dctr, done);
      }();
      var state__8286__auto__ = function() {
        var statearr_13999 = f__8285__auto__.call(null);
        statearr_13999[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___14000;
        return statearr_13999;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___14000, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function cljs$core$async$tap() {
  var G__14058 = arguments.length;
  switch(G__14058) {
    case 2:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2 = function(mult, ch) {
  return cljs.core.async.tap.call(null, mult, ch, true);
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3 = function(mult, ch, close_QMARK_) {
  cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
  return ch;
};
cljs.core.async.tap.cljs$lang$maxFixedArity = 3;
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj14061 = {};
  return obj14061;
}();
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (function() {
    var and__4266__auto__ = m;
    if (and__4266__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4914__auto__ = m == null ? null : m;
    return function() {
      var or__4278__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (function() {
    var and__4266__auto__ = m;
    if (and__4266__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4914__auto__ = m == null ? null : m;
    return function() {
      var or__4278__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (function() {
    var and__4266__auto__ = m;
    if (and__4266__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4914__auto__ = m == null ? null : m;
    return function() {
      var or__4278__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (function() {
    var and__4266__auto__ = m;
    if (and__4266__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4914__auto__ = m == null ? null : m;
    return function() {
      var or__4278__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (function() {
    var and__4266__auto__ = m;
    if (and__4266__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4914__auto__ = m == null ? null : m;
    return function() {
      var or__4278__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function cljs$core$async$ioc_alts_BANG_() {
  var argseq__5318__auto__ = 3 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0) : null;
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5318__auto__);
};
cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(state, cont_block, ports, p__14066) {
  var map__14067 = p__14066;
  var map__14067__$1 = cljs.core.seq_QMARK_.call(null, map__14067) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14067) : map__14067;
  var opts = map__14067__$1;
  var statearr_14068_14071 = state;
  statearr_14068_14071[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
  var temp__4425__auto__ = cljs.core.async.do_alts.call(null, function(map__14067, map__14067__$1, opts) {
    return function(val) {
      var statearr_14069_14072 = state;
      statearr_14069_14072[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    };
  }(map__14067, map__14067__$1, opts), ports, opts);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var cb = temp__4425__auto__;
    var statearr_14070_14073 = state;
    statearr_14070_14073[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.ioc_alts_BANG_.cljs$lang$applyTo = function(seq14062) {
  var G__14063 = cljs.core.first.call(null, seq14062);
  var seq14062__$1 = cljs.core.next.call(null, seq14062);
  var G__14064 = cljs.core.first.call(null, seq14062__$1);
  var seq14062__$2 = cljs.core.next.call(null, seq14062__$1);
  var G__14065 = cljs.core.first.call(null, seq14062__$2);
  var seq14062__$3 = cljs.core.next.call(null, seq14062__$2);
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__14063, G__14064, G__14065, seq14062__$3);
};
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t14193 !== "undefined") {
    } else {
      cljs.core.async.t14193 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta14194) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta14194 = meta14194;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t14193.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_14195, meta14194__$1) {
          var self__ = this;
          var _14195__$1 = this;
          return new cljs.core.async.t14193(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta14194__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14193.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_14195) {
          var self__ = this;
          var _14195__$1 = this;
          return self__.meta14194;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14193.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t14193.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14193.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t14193.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14193.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14193.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14193.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14193.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t14193.cljs$lang$type = true;
      cljs.core.async.t14193.cljs$lang$ctorStr = "cljs.core.async/t14193";
      cljs.core.async.t14193.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
          return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async/t14193");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t14193 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function cljs$core$async$mix_$___GT_t14193(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta14194) {
          return new cljs.core.async.t14193(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta14194);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t14193(change, cljs$core$async$mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__8284__auto___14312 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___14312, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___14312, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_14265) {
            var state_val_14266 = state_14265[1];
            if (state_val_14266 === 7) {
              var inst_14209 = state_14265[7];
              var inst_14214 = cljs.core.apply.call(null, cljs.core.hash_map, inst_14209);
              var state_14265__$1 = state_14265;
              var statearr_14267_14313 = state_14265__$1;
              statearr_14267_14313[2] = inst_14214;
              statearr_14267_14313[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14266 === 20) {
                var inst_14224 = state_14265[8];
                var state_14265__$1 = state_14265;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14265__$1, 23, out, inst_14224);
              } else {
                if (state_val_14266 === 1) {
                  var inst_14199 = state_14265[9];
                  var inst_14199__$1 = calc_state.call(null);
                  var inst_14200 = cljs.core.seq_QMARK_.call(null, inst_14199__$1);
                  var state_14265__$1 = function() {
                    var statearr_14268 = state_14265;
                    statearr_14268[9] = inst_14199__$1;
                    return statearr_14268;
                  }();
                  if (inst_14200) {
                    var statearr_14269_14314 = state_14265__$1;
                    statearr_14269_14314[1] = 2;
                  } else {
                    var statearr_14270_14315 = state_14265__$1;
                    statearr_14270_14315[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14266 === 24) {
                    var inst_14217 = state_14265[10];
                    var inst_14209 = inst_14217;
                    var state_14265__$1 = function() {
                      var statearr_14271 = state_14265;
                      statearr_14271[7] = inst_14209;
                      return statearr_14271;
                    }();
                    var statearr_14272_14316 = state_14265__$1;
                    statearr_14272_14316[2] = null;
                    statearr_14272_14316[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14266 === 4) {
                      var inst_14199 = state_14265[9];
                      var inst_14205 = state_14265[2];
                      var inst_14206 = cljs.core.get.call(null, inst_14205, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_14207 = cljs.core.get.call(null, inst_14205, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_14208 = cljs.core.get.call(null, inst_14205, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_14209 = inst_14199;
                      var state_14265__$1 = function() {
                        var statearr_14273 = state_14265;
                        statearr_14273[11] = inst_14208;
                        statearr_14273[12] = inst_14207;
                        statearr_14273[7] = inst_14209;
                        statearr_14273[13] = inst_14206;
                        return statearr_14273;
                      }();
                      var statearr_14274_14317 = state_14265__$1;
                      statearr_14274_14317[2] = null;
                      statearr_14274_14317[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14266 === 15) {
                        var state_14265__$1 = state_14265;
                        var statearr_14275_14318 = state_14265__$1;
                        statearr_14275_14318[2] = null;
                        statearr_14275_14318[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14266 === 21) {
                          var inst_14217 = state_14265[10];
                          var inst_14209 = inst_14217;
                          var state_14265__$1 = function() {
                            var statearr_14276 = state_14265;
                            statearr_14276[7] = inst_14209;
                            return statearr_14276;
                          }();
                          var statearr_14277_14319 = state_14265__$1;
                          statearr_14277_14319[2] = null;
                          statearr_14277_14319[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14266 === 13) {
                            var inst_14261 = state_14265[2];
                            var state_14265__$1 = state_14265;
                            var statearr_14278_14320 = state_14265__$1;
                            statearr_14278_14320[2] = inst_14261;
                            statearr_14278_14320[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14266 === 22) {
                              var inst_14259 = state_14265[2];
                              var state_14265__$1 = state_14265;
                              var statearr_14279_14321 = state_14265__$1;
                              statearr_14279_14321[2] = inst_14259;
                              statearr_14279_14321[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14266 === 6) {
                                var inst_14263 = state_14265[2];
                                var state_14265__$1 = state_14265;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14265__$1, inst_14263);
                              } else {
                                if (state_val_14266 === 25) {
                                  var state_14265__$1 = state_14265;
                                  var statearr_14280_14322 = state_14265__$1;
                                  statearr_14280_14322[2] = null;
                                  statearr_14280_14322[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14266 === 17) {
                                    var inst_14239 = state_14265[14];
                                    var state_14265__$1 = state_14265;
                                    var statearr_14281_14323 = state_14265__$1;
                                    statearr_14281_14323[2] = inst_14239;
                                    statearr_14281_14323[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14266 === 3) {
                                      var inst_14199 = state_14265[9];
                                      var state_14265__$1 = state_14265;
                                      var statearr_14282_14324 = state_14265__$1;
                                      statearr_14282_14324[2] = inst_14199;
                                      statearr_14282_14324[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14266 === 12) {
                                        var inst_14225 = state_14265[15];
                                        var inst_14218 = state_14265[16];
                                        var inst_14239 = state_14265[14];
                                        var inst_14239__$1 = inst_14218.call(null, inst_14225);
                                        var state_14265__$1 = function() {
                                          var statearr_14283 = state_14265;
                                          statearr_14283[14] = inst_14239__$1;
                                          return statearr_14283;
                                        }();
                                        if (cljs.core.truth_(inst_14239__$1)) {
                                          var statearr_14284_14325 = state_14265__$1;
                                          statearr_14284_14325[1] = 17;
                                        } else {
                                          var statearr_14285_14326 = state_14265__$1;
                                          statearr_14285_14326[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14266 === 2) {
                                          var inst_14199 = state_14265[9];
                                          var inst_14202 = cljs.core.apply.call(null, cljs.core.hash_map, inst_14199);
                                          var state_14265__$1 = state_14265;
                                          var statearr_14286_14327 = state_14265__$1;
                                          statearr_14286_14327[2] = inst_14202;
                                          statearr_14286_14327[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14266 === 23) {
                                            var inst_14250 = state_14265[2];
                                            var state_14265__$1 = state_14265;
                                            if (cljs.core.truth_(inst_14250)) {
                                              var statearr_14287_14328 = state_14265__$1;
                                              statearr_14287_14328[1] = 24;
                                            } else {
                                              var statearr_14288_14329 = state_14265__$1;
                                              statearr_14288_14329[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14266 === 19) {
                                              var inst_14247 = state_14265[2];
                                              var state_14265__$1 = state_14265;
                                              if (cljs.core.truth_(inst_14247)) {
                                                var statearr_14289_14330 = state_14265__$1;
                                                statearr_14289_14330[1] = 20;
                                              } else {
                                                var statearr_14290_14331 = state_14265__$1;
                                                statearr_14290_14331[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_14266 === 11) {
                                                var inst_14224 = state_14265[8];
                                                var inst_14230 = inst_14224 == null;
                                                var state_14265__$1 = state_14265;
                                                if (cljs.core.truth_(inst_14230)) {
                                                  var statearr_14291_14332 = state_14265__$1;
                                                  statearr_14291_14332[1] = 14;
                                                } else {
                                                  var statearr_14292_14333 = state_14265__$1;
                                                  statearr_14292_14333[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14266 === 9) {
                                                  var inst_14217 = state_14265[10];
                                                  var inst_14217__$1 = state_14265[2];
                                                  var inst_14218 = cljs.core.get.call(null, inst_14217__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var inst_14219 = cljs.core.get.call(null, inst_14217__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_14220 = cljs.core.get.call(null, inst_14217__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var state_14265__$1 = function() {
                                                    var statearr_14293 = state_14265;
                                                    statearr_14293[10] = inst_14217__$1;
                                                    statearr_14293[16] = inst_14218;
                                                    statearr_14293[17] = inst_14219;
                                                    return statearr_14293;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_14265__$1, 10, inst_14220);
                                                } else {
                                                  if (state_val_14266 === 5) {
                                                    var inst_14209 = state_14265[7];
                                                    var inst_14212 = cljs.core.seq_QMARK_.call(null, inst_14209);
                                                    var state_14265__$1 = state_14265;
                                                    if (inst_14212) {
                                                      var statearr_14294_14334 = state_14265__$1;
                                                      statearr_14294_14334[1] = 7;
                                                    } else {
                                                      var statearr_14295_14335 = state_14265__$1;
                                                      statearr_14295_14335[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14266 === 14) {
                                                      var inst_14225 = state_14265[15];
                                                      var inst_14232 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_14225);
                                                      var state_14265__$1 = state_14265;
                                                      var statearr_14296_14336 = state_14265__$1;
                                                      statearr_14296_14336[2] = inst_14232;
                                                      statearr_14296_14336[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_14266 === 26) {
                                                        var inst_14255 = state_14265[2];
                                                        var state_14265__$1 = state_14265;
                                                        var statearr_14297_14337 = state_14265__$1;
                                                        statearr_14297_14337[2] = inst_14255;
                                                        statearr_14297_14337[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_14266 === 16) {
                                                          var inst_14235 = state_14265[2];
                                                          var inst_14236 = calc_state.call(null);
                                                          var inst_14209 = inst_14236;
                                                          var state_14265__$1 = function() {
                                                            var statearr_14298 = state_14265;
                                                            statearr_14298[18] = inst_14235;
                                                            statearr_14298[7] = inst_14209;
                                                            return statearr_14298;
                                                          }();
                                                          var statearr_14299_14338 = state_14265__$1;
                                                          statearr_14299_14338[2] = null;
                                                          statearr_14299_14338[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_14266 === 10) {
                                                            var inst_14225 = state_14265[15];
                                                            var inst_14224 = state_14265[8];
                                                            var inst_14223 = state_14265[2];
                                                            var inst_14224__$1 = cljs.core.nth.call(null, inst_14223, 0, null);
                                                            var inst_14225__$1 = cljs.core.nth.call(null, inst_14223, 1, null);
                                                            var inst_14226 = inst_14224__$1 == null;
                                                            var inst_14227 = cljs.core._EQ_.call(null, inst_14225__$1, change);
                                                            var inst_14228 = inst_14226 || inst_14227;
                                                            var state_14265__$1 = function() {
                                                              var statearr_14300 = state_14265;
                                                              statearr_14300[15] = inst_14225__$1;
                                                              statearr_14300[8] = inst_14224__$1;
                                                              return statearr_14300;
                                                            }();
                                                            if (cljs.core.truth_(inst_14228)) {
                                                              var statearr_14301_14339 = state_14265__$1;
                                                              statearr_14301_14339[1] = 11;
                                                            } else {
                                                              var statearr_14302_14340 = state_14265__$1;
                                                              statearr_14302_14340[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_14266 === 18) {
                                                              var inst_14225 = state_14265[15];
                                                              var inst_14218 = state_14265[16];
                                                              var inst_14219 = state_14265[17];
                                                              var inst_14242 = cljs.core.empty_QMARK_.call(null, inst_14218);
                                                              var inst_14243 = inst_14219.call(null, inst_14225);
                                                              var inst_14244 = cljs.core.not.call(null, inst_14243);
                                                              var inst_14245 = inst_14242 && inst_14244;
                                                              var state_14265__$1 = state_14265;
                                                              var statearr_14303_14341 = state_14265__$1;
                                                              statearr_14303_14341[2] = inst_14245;
                                                              statearr_14303_14341[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_14266 === 8) {
                                                                var inst_14209 = state_14265[7];
                                                                var state_14265__$1 = state_14265;
                                                                var statearr_14304_14342 = state_14265__$1;
                                                                statearr_14304_14342[2] = inst_14209;
                                                                statearr_14304_14342[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___14312, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__8222__auto__, c__8284__auto___14312, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var cljs$core$async$mix_$_state_machine__8223__auto__ = null;
            var cljs$core$async$mix_$_state_machine__8223__auto____0 = function() {
              var statearr_14308 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14308[0] = cljs$core$async$mix_$_state_machine__8223__auto__;
              statearr_14308[1] = 1;
              return statearr_14308;
            };
            var cljs$core$async$mix_$_state_machine__8223__auto____1 = function(state_14265) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_14265);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e14309) {
                    if (e14309 instanceof Object) {
                      var ex__8226__auto__ = e14309;
                      var statearr_14310_14343 = state_14265;
                      statearr_14310_14343[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14265);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14309;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14344 = state_14265;
                  state_14265 = G__14344;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$mix_$_state_machine__8223__auto__ = function(state_14265) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mix_$_state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$mix_$_state_machine__8223__auto____1.call(this, state_14265);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mix_$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__8223__auto____0;
            cljs$core$async$mix_$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__8223__auto____1;
            return cljs$core$async$mix_$_state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___14312, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__8286__auto__ = function() {
        var statearr_14311 = f__8285__auto__.call(null);
        statearr_14311[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___14312;
        return statearr_14311;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___14312, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj14346 = {};
  return obj14346;
}();
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__4266__auto__ = p;
    if (and__4266__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4914__auto__ = p == null ? null : p;
    return function() {
      var or__4278__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (function() {
    var and__4266__auto__ = p;
    if (and__4266__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4914__auto__ = p == null ? null : p;
    return function() {
      var or__4278__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function cljs$core$async$unsub_all_STAR_() {
  var G__14348 = arguments.length;
  switch(G__14348) {
    case 1:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = function(p) {
  if (function() {
    var and__4266__auto__ = p;
    if (and__4266__auto__) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
  } else {
    var x__4914__auto__ = p == null ? null : p;
    return function() {
      var or__4278__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
        }
      }
    }().call(null, p);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = function(p, v) {
  if (function() {
    var and__4266__auto__ = p;
    if (and__4266__auto__) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
  } else {
    var x__4914__auto__ = p == null ? null : p;
    return function() {
      var or__4278__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
        }
      }
    }().call(null, p, v);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.async.pub = function cljs$core$async$pub() {
  var G__14352 = arguments.length;
  switch(G__14352) {
    case 2:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2 = function(ch, topic_fn) {
  return cljs.core.async.pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3 = function(ch, topic_fn, buf_fn) {
  var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ensure_mult = function(mults) {
    return function(topic) {
      var or__4278__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__4278__auto__, mults) {
          return function(p1__14350_SHARP_) {
            if (cljs.core.truth_(p1__14350_SHARP_.call(null, topic))) {
              return p1__14350_SHARP_;
            } else {
              return cljs.core.assoc.call(null, p1__14350_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
            }
          };
        }(or__4278__auto__, mults)), topic);
      }
    };
  }(mults);
  var p = function() {
    if (typeof cljs.core.async.t14353 !== "undefined") {
    } else {
      cljs.core.async.t14353 = function(ch, topic_fn, buf_fn, mults, ensure_mult, meta14354) {
        this.ch = ch;
        this.topic_fn = topic_fn;
        this.buf_fn = buf_fn;
        this.mults = mults;
        this.ensure_mult = ensure_mult;
        this.meta14354 = meta14354;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t14353.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
        return function(_14355, meta14354__$1) {
          var self__ = this;
          var _14355__$1 = this;
          return new cljs.core.async.t14353(self__.ch, self__.topic_fn, self__.buf_fn, self__.mults, self__.ensure_mult, meta14354__$1);
        };
      }(mults, ensure_mult);
      cljs.core.async.t14353.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
        return function(_14355) {
          var self__ = this;
          var _14355__$1 = this;
          return self__.meta14354;
        };
      }(mults, ensure_mult);
      cljs.core.async.t14353.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t14353.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(mults, ensure_mult);
      cljs.core.async.t14353.prototype.cljs$core$async$Pub$ = true;
      cljs.core.async.t14353.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1, close_QMARK_) {
          var self__ = this;
          var p__$1 = this;
          var m = self__.ensure_mult.call(null, topic);
          return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
        };
      }(mults, ensure_mult);
      cljs.core.async.t14353.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1) {
          var self__ = this;
          var p__$1 = this;
          var temp__4425__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
          if (cljs.core.truth_(temp__4425__auto__)) {
            var m = temp__4425__auto__;
            return cljs.core.async.untap.call(null, m, ch__$1);
          } else {
            return null;
          }
        };
      }(mults, ensure_mult);
      cljs.core.async.t14353.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
        };
      }(mults, ensure_mult);
      cljs.core.async.t14353.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
        return function(_, topic) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
        };
      }(mults, ensure_mult);
      cljs.core.async.t14353.cljs$lang$type = true;
      cljs.core.async.t14353.cljs$lang$ctorStr = "cljs.core.async/t14353";
      cljs.core.async.t14353.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
        return function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
          return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async/t14353");
        };
      }(mults, ensure_mult);
      cljs.core.async.__GT_t14353 = function(mults, ensure_mult) {
        return function cljs$core$async$__GT_t14353(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta14354) {
          return new cljs.core.async.t14353(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta14354);
        };
      }(mults, ensure_mult);
    }
    return new cljs.core.async.t14353(ch, topic_fn, buf_fn, mults, ensure_mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__8284__auto___14476 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___14476, mults, ensure_mult, p) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___14476, mults, ensure_mult, p) {
          return function(state_14427) {
            var state_val_14428 = state_14427[1];
            if (state_val_14428 === 7) {
              var inst_14423 = state_14427[2];
              var state_14427__$1 = state_14427;
              var statearr_14429_14477 = state_14427__$1;
              statearr_14429_14477[2] = inst_14423;
              statearr_14429_14477[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14428 === 20) {
                var state_14427__$1 = state_14427;
                var statearr_14430_14478 = state_14427__$1;
                statearr_14430_14478[2] = null;
                statearr_14430_14478[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14428 === 1) {
                  var state_14427__$1 = state_14427;
                  var statearr_14431_14479 = state_14427__$1;
                  statearr_14431_14479[2] = null;
                  statearr_14431_14479[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14428 === 24) {
                    var inst_14406 = state_14427[7];
                    var inst_14415 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_14406);
                    var state_14427__$1 = state_14427;
                    var statearr_14432_14480 = state_14427__$1;
                    statearr_14432_14480[2] = inst_14415;
                    statearr_14432_14480[1] = 25;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14428 === 4) {
                      var inst_14358 = state_14427[8];
                      var inst_14358__$1 = state_14427[2];
                      var inst_14359 = inst_14358__$1 == null;
                      var state_14427__$1 = function() {
                        var statearr_14433 = state_14427;
                        statearr_14433[8] = inst_14358__$1;
                        return statearr_14433;
                      }();
                      if (cljs.core.truth_(inst_14359)) {
                        var statearr_14434_14481 = state_14427__$1;
                        statearr_14434_14481[1] = 5;
                      } else {
                        var statearr_14435_14482 = state_14427__$1;
                        statearr_14435_14482[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14428 === 15) {
                        var inst_14400 = state_14427[2];
                        var state_14427__$1 = state_14427;
                        var statearr_14436_14483 = state_14427__$1;
                        statearr_14436_14483[2] = inst_14400;
                        statearr_14436_14483[1] = 12;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14428 === 21) {
                          var inst_14420 = state_14427[2];
                          var state_14427__$1 = function() {
                            var statearr_14437 = state_14427;
                            statearr_14437[9] = inst_14420;
                            return statearr_14437;
                          }();
                          var statearr_14438_14484 = state_14427__$1;
                          statearr_14438_14484[2] = null;
                          statearr_14438_14484[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14428 === 13) {
                            var inst_14382 = state_14427[10];
                            var inst_14384 = cljs.core.chunked_seq_QMARK_.call(null, inst_14382);
                            var state_14427__$1 = state_14427;
                            if (inst_14384) {
                              var statearr_14439_14485 = state_14427__$1;
                              statearr_14439_14485[1] = 16;
                            } else {
                              var statearr_14440_14486 = state_14427__$1;
                              statearr_14440_14486[1] = 17;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14428 === 22) {
                              var inst_14412 = state_14427[2];
                              var state_14427__$1 = state_14427;
                              if (cljs.core.truth_(inst_14412)) {
                                var statearr_14441_14487 = state_14427__$1;
                                statearr_14441_14487[1] = 23;
                              } else {
                                var statearr_14442_14488 = state_14427__$1;
                                statearr_14442_14488[1] = 24;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14428 === 6) {
                                var inst_14408 = state_14427[11];
                                var inst_14406 = state_14427[7];
                                var inst_14358 = state_14427[8];
                                var inst_14406__$1 = topic_fn.call(null, inst_14358);
                                var inst_14407 = cljs.core.deref.call(null, mults);
                                var inst_14408__$1 = cljs.core.get.call(null, inst_14407, inst_14406__$1);
                                var state_14427__$1 = function() {
                                  var statearr_14443 = state_14427;
                                  statearr_14443[11] = inst_14408__$1;
                                  statearr_14443[7] = inst_14406__$1;
                                  return statearr_14443;
                                }();
                                if (cljs.core.truth_(inst_14408__$1)) {
                                  var statearr_14444_14489 = state_14427__$1;
                                  statearr_14444_14489[1] = 19;
                                } else {
                                  var statearr_14445_14490 = state_14427__$1;
                                  statearr_14445_14490[1] = 20;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14428 === 25) {
                                  var inst_14417 = state_14427[2];
                                  var state_14427__$1 = state_14427;
                                  var statearr_14446_14491 = state_14427__$1;
                                  statearr_14446_14491[2] = inst_14417;
                                  statearr_14446_14491[1] = 21;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14428 === 17) {
                                    var inst_14382 = state_14427[10];
                                    var inst_14391 = cljs.core.first.call(null, inst_14382);
                                    var inst_14392 = cljs.core.async.muxch_STAR_.call(null, inst_14391);
                                    var inst_14393 = cljs.core.async.close_BANG_.call(null, inst_14392);
                                    var inst_14394 = cljs.core.next.call(null, inst_14382);
                                    var inst_14368 = inst_14394;
                                    var inst_14369 = null;
                                    var inst_14370 = 0;
                                    var inst_14371 = 0;
                                    var state_14427__$1 = function() {
                                      var statearr_14447 = state_14427;
                                      statearr_14447[12] = inst_14368;
                                      statearr_14447[13] = inst_14371;
                                      statearr_14447[14] = inst_14393;
                                      statearr_14447[15] = inst_14370;
                                      statearr_14447[16] = inst_14369;
                                      return statearr_14447;
                                    }();
                                    var statearr_14448_14492 = state_14427__$1;
                                    statearr_14448_14492[2] = null;
                                    statearr_14448_14492[1] = 8;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14428 === 3) {
                                      var inst_14425 = state_14427[2];
                                      var state_14427__$1 = state_14427;
                                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14427__$1, inst_14425);
                                    } else {
                                      if (state_val_14428 === 12) {
                                        var inst_14402 = state_14427[2];
                                        var state_14427__$1 = state_14427;
                                        var statearr_14449_14493 = state_14427__$1;
                                        statearr_14449_14493[2] = inst_14402;
                                        statearr_14449_14493[1] = 9;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14428 === 2) {
                                          var state_14427__$1 = state_14427;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14427__$1, 4, ch);
                                        } else {
                                          if (state_val_14428 === 23) {
                                            var state_14427__$1 = state_14427;
                                            var statearr_14450_14494 = state_14427__$1;
                                            statearr_14450_14494[2] = null;
                                            statearr_14450_14494[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14428 === 19) {
                                              var inst_14408 = state_14427[11];
                                              var inst_14358 = state_14427[8];
                                              var inst_14410 = cljs.core.async.muxch_STAR_.call(null, inst_14408);
                                              var state_14427__$1 = state_14427;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14427__$1, 22, inst_14410, inst_14358);
                                            } else {
                                              if (state_val_14428 === 11) {
                                                var inst_14368 = state_14427[12];
                                                var inst_14382 = state_14427[10];
                                                var inst_14382__$1 = cljs.core.seq.call(null, inst_14368);
                                                var state_14427__$1 = function() {
                                                  var statearr_14451 = state_14427;
                                                  statearr_14451[10] = inst_14382__$1;
                                                  return statearr_14451;
                                                }();
                                                if (inst_14382__$1) {
                                                  var statearr_14452_14495 = state_14427__$1;
                                                  statearr_14452_14495[1] = 13;
                                                } else {
                                                  var statearr_14453_14496 = state_14427__$1;
                                                  statearr_14453_14496[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14428 === 9) {
                                                  var inst_14404 = state_14427[2];
                                                  var state_14427__$1 = state_14427;
                                                  var statearr_14454_14497 = state_14427__$1;
                                                  statearr_14454_14497[2] = inst_14404;
                                                  statearr_14454_14497[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_14428 === 5) {
                                                    var inst_14365 = cljs.core.deref.call(null, mults);
                                                    var inst_14366 = cljs.core.vals.call(null, inst_14365);
                                                    var inst_14367 = cljs.core.seq.call(null, inst_14366);
                                                    var inst_14368 = inst_14367;
                                                    var inst_14369 = null;
                                                    var inst_14370 = 0;
                                                    var inst_14371 = 0;
                                                    var state_14427__$1 = function() {
                                                      var statearr_14455 = state_14427;
                                                      statearr_14455[12] = inst_14368;
                                                      statearr_14455[13] = inst_14371;
                                                      statearr_14455[15] = inst_14370;
                                                      statearr_14455[16] = inst_14369;
                                                      return statearr_14455;
                                                    }();
                                                    var statearr_14456_14498 = state_14427__$1;
                                                    statearr_14456_14498[2] = null;
                                                    statearr_14456_14498[1] = 8;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14428 === 14) {
                                                      var state_14427__$1 = state_14427;
                                                      var statearr_14460_14499 = state_14427__$1;
                                                      statearr_14460_14499[2] = null;
                                                      statearr_14460_14499[1] = 15;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_14428 === 16) {
                                                        var inst_14382 = state_14427[10];
                                                        var inst_14386 = cljs.core.chunk_first.call(null, inst_14382);
                                                        var inst_14387 = cljs.core.chunk_rest.call(null, inst_14382);
                                                        var inst_14388 = cljs.core.count.call(null, inst_14386);
                                                        var inst_14368 = inst_14387;
                                                        var inst_14369 = inst_14386;
                                                        var inst_14370 = inst_14388;
                                                        var inst_14371 = 0;
                                                        var state_14427__$1 = function() {
                                                          var statearr_14461 = state_14427;
                                                          statearr_14461[12] = inst_14368;
                                                          statearr_14461[13] = inst_14371;
                                                          statearr_14461[15] = inst_14370;
                                                          statearr_14461[16] = inst_14369;
                                                          return statearr_14461;
                                                        }();
                                                        var statearr_14462_14500 = state_14427__$1;
                                                        statearr_14462_14500[2] = null;
                                                        statearr_14462_14500[1] = 8;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_14428 === 10) {
                                                          var inst_14368 = state_14427[12];
                                                          var inst_14371 = state_14427[13];
                                                          var inst_14370 = state_14427[15];
                                                          var inst_14369 = state_14427[16];
                                                          var inst_14376 = cljs.core._nth.call(null, inst_14369, inst_14371);
                                                          var inst_14377 = cljs.core.async.muxch_STAR_.call(null, inst_14376);
                                                          var inst_14378 = cljs.core.async.close_BANG_.call(null, inst_14377);
                                                          var inst_14379 = inst_14371 + 1;
                                                          var tmp14457 = inst_14368;
                                                          var tmp14458 = inst_14370;
                                                          var tmp14459 = inst_14369;
                                                          var inst_14368__$1 = tmp14457;
                                                          var inst_14369__$1 = tmp14459;
                                                          var inst_14370__$1 = tmp14458;
                                                          var inst_14371__$1 = inst_14379;
                                                          var state_14427__$1 = function() {
                                                            var statearr_14463 = state_14427;
                                                            statearr_14463[12] = inst_14368__$1;
                                                            statearr_14463[13] = inst_14371__$1;
                                                            statearr_14463[15] = inst_14370__$1;
                                                            statearr_14463[17] = inst_14378;
                                                            statearr_14463[16] = inst_14369__$1;
                                                            return statearr_14463;
                                                          }();
                                                          var statearr_14464_14501 = state_14427__$1;
                                                          statearr_14464_14501[2] = null;
                                                          statearr_14464_14501[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_14428 === 18) {
                                                            var inst_14397 = state_14427[2];
                                                            var state_14427__$1 = state_14427;
                                                            var statearr_14465_14502 = state_14427__$1;
                                                            statearr_14465_14502[2] = inst_14397;
                                                            statearr_14465_14502[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_14428 === 8) {
                                                              var inst_14371 = state_14427[13];
                                                              var inst_14370 = state_14427[15];
                                                              var inst_14373 = inst_14371 < inst_14370;
                                                              var inst_14374 = inst_14373;
                                                              var state_14427__$1 = state_14427;
                                                              if (cljs.core.truth_(inst_14374)) {
                                                                var statearr_14466_14503 = state_14427__$1;
                                                                statearr_14466_14503[1] = 10;
                                                              } else {
                                                                var statearr_14467_14504 = state_14427__$1;
                                                                statearr_14467_14504[1] = 11;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              return null;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___14476, mults, ensure_mult, p);
        return function(switch__8222__auto__, c__8284__auto___14476, mults, ensure_mult, p) {
          return function() {
            var cljs$core$async$state_machine__8223__auto__ = null;
            var cljs$core$async$state_machine__8223__auto____0 = function() {
              var statearr_14471 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14471[0] = cljs$core$async$state_machine__8223__auto__;
              statearr_14471[1] = 1;
              return statearr_14471;
            };
            var cljs$core$async$state_machine__8223__auto____1 = function(state_14427) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_14427);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e14472) {
                    if (e14472 instanceof Object) {
                      var ex__8226__auto__ = e14472;
                      var statearr_14473_14505 = state_14427;
                      statearr_14473_14505[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14427);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14472;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14506 = state_14427;
                  state_14427 = G__14506;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8223__auto__ = function(state_14427) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8223__auto____1.call(this, state_14427);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8223__auto____0;
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8223__auto____1;
            return cljs$core$async$state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___14476, mults, ensure_mult, p);
      }();
      var state__8286__auto__ = function() {
        var statearr_14474 = f__8285__auto__.call(null);
        statearr_14474[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___14476;
        return statearr_14474;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___14476, mults, ensure_mult, p));
  return p;
};
cljs.core.async.pub.cljs$lang$maxFixedArity = 3;
cljs.core.async.sub = function cljs$core$async$sub() {
  var G__14508 = arguments.length;
  switch(G__14508) {
    case 3:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3 = function(p, topic, ch) {
  return cljs.core.async.sub.call(null, p, topic, ch, true);
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4 = function(p, topic, ch, close_QMARK_) {
  return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
};
cljs.core.async.sub.cljs$lang$maxFixedArity = 4;
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function cljs$core$async$unsub_all() {
  var G__14511 = arguments.length;
  switch(G__14511) {
    case 1:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return cljs.core.async.unsub_all_STAR_.call(null, p);
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2 = function(p, topic) {
  return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
};
cljs.core.async.unsub_all.cljs$lang$maxFixedArity = 2;
cljs.core.async.map = function cljs$core$async$map() {
  var G__14514 = arguments.length;
  switch(G__14514) {
    case 2:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$2 = function(f, chs) {
  return cljs.core.async.map.call(null, f, chs, null);
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$3 = function(f, chs, buf_or_n) {
  var chs__$1 = cljs.core.vec.call(null, chs);
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var cnt = cljs.core.count.call(null, chs__$1);
  var rets = cljs.core.object_array.call(null, cnt);
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
    return function(i) {
      return function(chs__$1, out, cnt, rets, dchan, dctr) {
        return function(ret) {
          rets[i] = ret;
          if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
            return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
          } else {
            return null;
          }
        };
      }(chs__$1, out, cnt, rets, dchan, dctr);
    };
  }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
  var c__8284__auto___14584 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___14584, chs__$1, out, cnt, rets, dchan, dctr, done) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___14584, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function(state_14553) {
            var state_val_14554 = state_14553[1];
            if (state_val_14554 === 7) {
              var state_14553__$1 = state_14553;
              var statearr_14555_14585 = state_14553__$1;
              statearr_14555_14585[2] = null;
              statearr_14555_14585[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14554 === 1) {
                var state_14553__$1 = state_14553;
                var statearr_14556_14586 = state_14553__$1;
                statearr_14556_14586[2] = null;
                statearr_14556_14586[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14554 === 4) {
                  var inst_14517 = state_14553[7];
                  var inst_14519 = inst_14517 < cnt;
                  var state_14553__$1 = state_14553;
                  if (cljs.core.truth_(inst_14519)) {
                    var statearr_14557_14587 = state_14553__$1;
                    statearr_14557_14587[1] = 6;
                  } else {
                    var statearr_14558_14588 = state_14553__$1;
                    statearr_14558_14588[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14554 === 15) {
                    var inst_14549 = state_14553[2];
                    var state_14553__$1 = state_14553;
                    var statearr_14559_14589 = state_14553__$1;
                    statearr_14559_14589[2] = inst_14549;
                    statearr_14559_14589[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14554 === 13) {
                      var inst_14542 = cljs.core.async.close_BANG_.call(null, out);
                      var state_14553__$1 = state_14553;
                      var statearr_14560_14590 = state_14553__$1;
                      statearr_14560_14590[2] = inst_14542;
                      statearr_14560_14590[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14554 === 6) {
                        var state_14553__$1 = state_14553;
                        var statearr_14561_14591 = state_14553__$1;
                        statearr_14561_14591[2] = null;
                        statearr_14561_14591[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14554 === 3) {
                          var inst_14551 = state_14553[2];
                          var state_14553__$1 = state_14553;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14553__$1, inst_14551);
                        } else {
                          if (state_val_14554 === 12) {
                            var inst_14539 = state_14553[8];
                            var inst_14539__$1 = state_14553[2];
                            var inst_14540 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_14539__$1);
                            var state_14553__$1 = function() {
                              var statearr_14562 = state_14553;
                              statearr_14562[8] = inst_14539__$1;
                              return statearr_14562;
                            }();
                            if (cljs.core.truth_(inst_14540)) {
                              var statearr_14563_14592 = state_14553__$1;
                              statearr_14563_14592[1] = 13;
                            } else {
                              var statearr_14564_14593 = state_14553__$1;
                              statearr_14564_14593[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14554 === 2) {
                              var inst_14516 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                              var inst_14517 = 0;
                              var state_14553__$1 = function() {
                                var statearr_14565 = state_14553;
                                statearr_14565[9] = inst_14516;
                                statearr_14565[7] = inst_14517;
                                return statearr_14565;
                              }();
                              var statearr_14566_14594 = state_14553__$1;
                              statearr_14566_14594[2] = null;
                              statearr_14566_14594[1] = 4;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14554 === 11) {
                                var inst_14517 = state_14553[7];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_14553, 10, Object, null, 9);
                                var inst_14526 = chs__$1.call(null, inst_14517);
                                var inst_14527 = done.call(null, inst_14517);
                                var inst_14528 = cljs.core.async.take_BANG_.call(null, inst_14526, inst_14527);
                                var state_14553__$1 = state_14553;
                                var statearr_14567_14595 = state_14553__$1;
                                statearr_14567_14595[2] = inst_14528;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14553__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14554 === 9) {
                                  var inst_14517 = state_14553[7];
                                  var inst_14530 = state_14553[2];
                                  var inst_14531 = inst_14517 + 1;
                                  var inst_14517__$1 = inst_14531;
                                  var state_14553__$1 = function() {
                                    var statearr_14568 = state_14553;
                                    statearr_14568[10] = inst_14530;
                                    statearr_14568[7] = inst_14517__$1;
                                    return statearr_14568;
                                  }();
                                  var statearr_14569_14596 = state_14553__$1;
                                  statearr_14569_14596[2] = null;
                                  statearr_14569_14596[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14554 === 5) {
                                    var inst_14537 = state_14553[2];
                                    var state_14553__$1 = function() {
                                      var statearr_14570 = state_14553;
                                      statearr_14570[11] = inst_14537;
                                      return statearr_14570;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14553__$1, 12, dchan);
                                  } else {
                                    if (state_val_14554 === 14) {
                                      var inst_14539 = state_14553[8];
                                      var inst_14544 = cljs.core.apply.call(null, f, inst_14539);
                                      var state_14553__$1 = state_14553;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14553__$1, 16, out, inst_14544);
                                    } else {
                                      if (state_val_14554 === 16) {
                                        var inst_14546 = state_14553[2];
                                        var state_14553__$1 = function() {
                                          var statearr_14571 = state_14553;
                                          statearr_14571[12] = inst_14546;
                                          return statearr_14571;
                                        }();
                                        var statearr_14572_14597 = state_14553__$1;
                                        statearr_14572_14597[2] = null;
                                        statearr_14572_14597[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14554 === 10) {
                                          var inst_14521 = state_14553[2];
                                          var inst_14522 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var state_14553__$1 = function() {
                                            var statearr_14573 = state_14553;
                                            statearr_14573[13] = inst_14521;
                                            return statearr_14573;
                                          }();
                                          var statearr_14574_14598 = state_14553__$1;
                                          statearr_14574_14598[2] = inst_14522;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14553__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14554 === 8) {
                                            var inst_14535 = state_14553[2];
                                            var state_14553__$1 = state_14553;
                                            var statearr_14575_14599 = state_14553__$1;
                                            statearr_14575_14599[2] = inst_14535;
                                            statearr_14575_14599[1] = 5;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___14584, chs__$1, out, cnt, rets, dchan, dctr, done);
        return function(switch__8222__auto__, c__8284__auto___14584, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function() {
            var cljs$core$async$state_machine__8223__auto__ = null;
            var cljs$core$async$state_machine__8223__auto____0 = function() {
              var statearr_14579 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14579[0] = cljs$core$async$state_machine__8223__auto__;
              statearr_14579[1] = 1;
              return statearr_14579;
            };
            var cljs$core$async$state_machine__8223__auto____1 = function(state_14553) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_14553);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e14580) {
                    if (e14580 instanceof Object) {
                      var ex__8226__auto__ = e14580;
                      var statearr_14581_14600 = state_14553;
                      statearr_14581_14600[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14553);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14580;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14601 = state_14553;
                  state_14553 = G__14601;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8223__auto__ = function(state_14553) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8223__auto____1.call(this, state_14553);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8223__auto____0;
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8223__auto____1;
            return cljs$core$async$state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___14584, chs__$1, out, cnt, rets, dchan, dctr, done);
      }();
      var state__8286__auto__ = function() {
        var statearr_14582 = f__8285__auto__.call(null);
        statearr_14582[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___14584;
        return statearr_14582;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___14584, chs__$1, out, cnt, rets, dchan, dctr, done));
  return out;
};
cljs.core.async.map.cljs$lang$maxFixedArity = 3;
cljs.core.async.merge = function cljs$core$async$merge() {
  var G__14604 = arguments.length;
  switch(G__14604) {
    case 1:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1 = function(chs) {
  return cljs.core.async.merge.call(null, chs, null);
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2 = function(chs, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__8284__auto___14659 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___14659, out) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___14659, out) {
          return function(state_14634) {
            var state_val_14635 = state_14634[1];
            if (state_val_14635 === 7) {
              var inst_14614 = state_14634[7];
              var inst_14613 = state_14634[8];
              var inst_14613__$1 = state_14634[2];
              var inst_14614__$1 = cljs.core.nth.call(null, inst_14613__$1, 0, null);
              var inst_14615 = cljs.core.nth.call(null, inst_14613__$1, 1, null);
              var inst_14616 = inst_14614__$1 == null;
              var state_14634__$1 = function() {
                var statearr_14636 = state_14634;
                statearr_14636[7] = inst_14614__$1;
                statearr_14636[9] = inst_14615;
                statearr_14636[8] = inst_14613__$1;
                return statearr_14636;
              }();
              if (cljs.core.truth_(inst_14616)) {
                var statearr_14637_14660 = state_14634__$1;
                statearr_14637_14660[1] = 8;
              } else {
                var statearr_14638_14661 = state_14634__$1;
                statearr_14638_14661[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14635 === 1) {
                var inst_14605 = cljs.core.vec.call(null, chs);
                var inst_14606 = inst_14605;
                var state_14634__$1 = function() {
                  var statearr_14639 = state_14634;
                  statearr_14639[10] = inst_14606;
                  return statearr_14639;
                }();
                var statearr_14640_14662 = state_14634__$1;
                statearr_14640_14662[2] = null;
                statearr_14640_14662[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14635 === 4) {
                  var inst_14606 = state_14634[10];
                  var state_14634__$1 = state_14634;
                  return cljs.core.async.ioc_alts_BANG_.call(null, state_14634__$1, 7, inst_14606);
                } else {
                  if (state_val_14635 === 6) {
                    var inst_14630 = state_14634[2];
                    var state_14634__$1 = state_14634;
                    var statearr_14641_14663 = state_14634__$1;
                    statearr_14641_14663[2] = inst_14630;
                    statearr_14641_14663[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14635 === 3) {
                      var inst_14632 = state_14634[2];
                      var state_14634__$1 = state_14634;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14634__$1, inst_14632);
                    } else {
                      if (state_val_14635 === 2) {
                        var inst_14606 = state_14634[10];
                        var inst_14608 = cljs.core.count.call(null, inst_14606);
                        var inst_14609 = inst_14608 > 0;
                        var state_14634__$1 = state_14634;
                        if (cljs.core.truth_(inst_14609)) {
                          var statearr_14643_14664 = state_14634__$1;
                          statearr_14643_14664[1] = 4;
                        } else {
                          var statearr_14644_14665 = state_14634__$1;
                          statearr_14644_14665[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14635 === 11) {
                          var inst_14606 = state_14634[10];
                          var inst_14623 = state_14634[2];
                          var tmp14642 = inst_14606;
                          var inst_14606__$1 = tmp14642;
                          var state_14634__$1 = function() {
                            var statearr_14645 = state_14634;
                            statearr_14645[11] = inst_14623;
                            statearr_14645[10] = inst_14606__$1;
                            return statearr_14645;
                          }();
                          var statearr_14646_14666 = state_14634__$1;
                          statearr_14646_14666[2] = null;
                          statearr_14646_14666[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14635 === 9) {
                            var inst_14614 = state_14634[7];
                            var state_14634__$1 = state_14634;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14634__$1, 11, out, inst_14614);
                          } else {
                            if (state_val_14635 === 5) {
                              var inst_14628 = cljs.core.async.close_BANG_.call(null, out);
                              var state_14634__$1 = state_14634;
                              var statearr_14647_14667 = state_14634__$1;
                              statearr_14647_14667[2] = inst_14628;
                              statearr_14647_14667[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14635 === 10) {
                                var inst_14626 = state_14634[2];
                                var state_14634__$1 = state_14634;
                                var statearr_14648_14668 = state_14634__$1;
                                statearr_14648_14668[2] = inst_14626;
                                statearr_14648_14668[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14635 === 8) {
                                  var inst_14614 = state_14634[7];
                                  var inst_14606 = state_14634[10];
                                  var inst_14615 = state_14634[9];
                                  var inst_14613 = state_14634[8];
                                  var inst_14618 = function() {
                                    var cs = inst_14606;
                                    var vec__14611 = inst_14613;
                                    var v = inst_14614;
                                    var c = inst_14615;
                                    return function(cs, vec__14611, v, c, inst_14614, inst_14606, inst_14615, inst_14613, state_val_14635, c__8284__auto___14659, out) {
                                      return function(p1__14602_SHARP_) {
                                        return cljs.core.not_EQ_.call(null, c, p1__14602_SHARP_);
                                      };
                                    }(cs, vec__14611, v, c, inst_14614, inst_14606, inst_14615, inst_14613, state_val_14635, c__8284__auto___14659, out);
                                  }();
                                  var inst_14619 = cljs.core.filterv.call(null, inst_14618, inst_14606);
                                  var inst_14606__$1 = inst_14619;
                                  var state_14634__$1 = function() {
                                    var statearr_14649 = state_14634;
                                    statearr_14649[10] = inst_14606__$1;
                                    return statearr_14649;
                                  }();
                                  var statearr_14650_14669 = state_14634__$1;
                                  statearr_14650_14669[2] = null;
                                  statearr_14650_14669[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___14659, out);
        return function(switch__8222__auto__, c__8284__auto___14659, out) {
          return function() {
            var cljs$core$async$state_machine__8223__auto__ = null;
            var cljs$core$async$state_machine__8223__auto____0 = function() {
              var statearr_14654 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14654[0] = cljs$core$async$state_machine__8223__auto__;
              statearr_14654[1] = 1;
              return statearr_14654;
            };
            var cljs$core$async$state_machine__8223__auto____1 = function(state_14634) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_14634);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e14655) {
                    if (e14655 instanceof Object) {
                      var ex__8226__auto__ = e14655;
                      var statearr_14656_14670 = state_14634;
                      statearr_14656_14670[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14634);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14655;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14671 = state_14634;
                  state_14634 = G__14671;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8223__auto__ = function(state_14634) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8223__auto____1.call(this, state_14634);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8223__auto____0;
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8223__auto____1;
            return cljs$core$async$state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___14659, out);
      }();
      var state__8286__auto__ = function() {
        var statearr_14657 = f__8285__auto__.call(null);
        statearr_14657[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___14659;
        return statearr_14657;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___14659, out));
  return out;
};
cljs.core.async.merge.cljs$lang$maxFixedArity = 2;
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function cljs$core$async$take() {
  var G__14673 = arguments.length;
  switch(G__14673) {
    case 2:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.take.call(null, n, ch, null);
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__8284__auto___14721 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___14721, out) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___14721, out) {
          return function(state_14697) {
            var state_val_14698 = state_14697[1];
            if (state_val_14698 === 7) {
              var inst_14679 = state_14697[7];
              var inst_14679__$1 = state_14697[2];
              var inst_14680 = inst_14679__$1 == null;
              var inst_14681 = cljs.core.not.call(null, inst_14680);
              var state_14697__$1 = function() {
                var statearr_14699 = state_14697;
                statearr_14699[7] = inst_14679__$1;
                return statearr_14699;
              }();
              if (inst_14681) {
                var statearr_14700_14722 = state_14697__$1;
                statearr_14700_14722[1] = 8;
              } else {
                var statearr_14701_14723 = state_14697__$1;
                statearr_14701_14723[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14698 === 1) {
                var inst_14674 = 0;
                var state_14697__$1 = function() {
                  var statearr_14702 = state_14697;
                  statearr_14702[8] = inst_14674;
                  return statearr_14702;
                }();
                var statearr_14703_14724 = state_14697__$1;
                statearr_14703_14724[2] = null;
                statearr_14703_14724[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14698 === 4) {
                  var state_14697__$1 = state_14697;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14697__$1, 7, ch);
                } else {
                  if (state_val_14698 === 6) {
                    var inst_14692 = state_14697[2];
                    var state_14697__$1 = state_14697;
                    var statearr_14704_14725 = state_14697__$1;
                    statearr_14704_14725[2] = inst_14692;
                    statearr_14704_14725[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14698 === 3) {
                      var inst_14694 = state_14697[2];
                      var inst_14695 = cljs.core.async.close_BANG_.call(null, out);
                      var state_14697__$1 = function() {
                        var statearr_14705 = state_14697;
                        statearr_14705[9] = inst_14694;
                        return statearr_14705;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14697__$1, inst_14695);
                    } else {
                      if (state_val_14698 === 2) {
                        var inst_14674 = state_14697[8];
                        var inst_14676 = inst_14674 < n;
                        var state_14697__$1 = state_14697;
                        if (cljs.core.truth_(inst_14676)) {
                          var statearr_14706_14726 = state_14697__$1;
                          statearr_14706_14726[1] = 4;
                        } else {
                          var statearr_14707_14727 = state_14697__$1;
                          statearr_14707_14727[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14698 === 11) {
                          var inst_14674 = state_14697[8];
                          var inst_14684 = state_14697[2];
                          var inst_14685 = inst_14674 + 1;
                          var inst_14674__$1 = inst_14685;
                          var state_14697__$1 = function() {
                            var statearr_14708 = state_14697;
                            statearr_14708[8] = inst_14674__$1;
                            statearr_14708[10] = inst_14684;
                            return statearr_14708;
                          }();
                          var statearr_14709_14728 = state_14697__$1;
                          statearr_14709_14728[2] = null;
                          statearr_14709_14728[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14698 === 9) {
                            var state_14697__$1 = state_14697;
                            var statearr_14710_14729 = state_14697__$1;
                            statearr_14710_14729[2] = null;
                            statearr_14710_14729[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14698 === 5) {
                              var state_14697__$1 = state_14697;
                              var statearr_14711_14730 = state_14697__$1;
                              statearr_14711_14730[2] = null;
                              statearr_14711_14730[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14698 === 10) {
                                var inst_14689 = state_14697[2];
                                var state_14697__$1 = state_14697;
                                var statearr_14712_14731 = state_14697__$1;
                                statearr_14712_14731[2] = inst_14689;
                                statearr_14712_14731[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14698 === 8) {
                                  var inst_14679 = state_14697[7];
                                  var state_14697__$1 = state_14697;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14697__$1, 11, out, inst_14679);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___14721, out);
        return function(switch__8222__auto__, c__8284__auto___14721, out) {
          return function() {
            var cljs$core$async$state_machine__8223__auto__ = null;
            var cljs$core$async$state_machine__8223__auto____0 = function() {
              var statearr_14716 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_14716[0] = cljs$core$async$state_machine__8223__auto__;
              statearr_14716[1] = 1;
              return statearr_14716;
            };
            var cljs$core$async$state_machine__8223__auto____1 = function(state_14697) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_14697);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e14717) {
                    if (e14717 instanceof Object) {
                      var ex__8226__auto__ = e14717;
                      var statearr_14718_14732 = state_14697;
                      statearr_14718_14732[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14697);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14717;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14733 = state_14697;
                  state_14697 = G__14733;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8223__auto__ = function(state_14697) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8223__auto____1.call(this, state_14697);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8223__auto____0;
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8223__auto____1;
            return cljs$core$async$state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___14721, out);
      }();
      var state__8286__auto__ = function() {
        var statearr_14719 = f__8285__auto__.call(null);
        statearr_14719[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___14721;
        return statearr_14719;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___14721, out));
  return out;
};
cljs.core.async.take.cljs$lang$maxFixedArity = 3;
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs.core.async.t14741 !== "undefined") {
  } else {
    cljs.core.async.t14741 = function(map_LT_, f, ch, meta14742) {
      this.map_LT_ = map_LT_;
      this.f = f;
      this.ch = ch;
      this.meta14742 = meta14742;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t14741.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14743, meta14742__$1) {
      var self__ = this;
      var _14743__$1 = this;
      return new cljs.core.async.t14741(self__.map_LT_, self__.f, self__.ch, meta14742__$1);
    };
    cljs.core.async.t14741.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14743) {
      var self__ = this;
      var _14743__$1 = this;
      return self__.meta14742;
    };
    cljs.core.async.t14741.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t14741.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t14741.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t14741.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t14741.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t14744 !== "undefined") {
        } else {
          cljs.core.async.t14744 = function(map_LT_, f, ch, meta14742, _, fn1, meta14745) {
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta14742 = meta14742;
            this._ = _;
            this.fn1 = fn1;
            this.meta14745 = meta14745;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
            this.cljs$lang$protocol_mask$partition1$ = 0;
          };
          cljs.core.async.t14744.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_14746, meta14745__$1) {
              var self__ = this;
              var _14746__$1 = this;
              return new cljs.core.async.t14744(self__.map_LT_, self__.f, self__.ch, self__.meta14742, self__._, self__.fn1, meta14745__$1);
            };
          }(___$1);
          cljs.core.async.t14744.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_14746) {
              var self__ = this;
              var _14746__$1 = this;
              return self__.meta14745;
            };
          }(___$1);
          cljs.core.async.t14744.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t14744.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t14744.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return true;
            };
          }(___$1);
          cljs.core.async.t14744.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__14734_SHARP_) {
                  return f1.call(null, p1__14734_SHARP_ == null ? null : self__.f.call(null, p1__14734_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t14744.cljs$lang$type = true;
          cljs.core.async.t14744.cljs$lang$ctorStr = "cljs.core.async/t14744";
          cljs.core.async.t14744.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
              return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async/t14744");
            };
          }(___$1);
          cljs.core.async.__GT_t14744 = function(___$1) {
            return function cljs$core$async$map_LT__$___GT_t14744(map_LT___$1, f__$1, ch__$1, meta14742__$1, ___$2, fn1__$1, meta14745) {
              return new cljs.core.async.t14744(map_LT___$1, f__$1, ch__$1, meta14742__$1, ___$2, fn1__$1, meta14745);
            };
          }(___$1);
        }
        return new cljs.core.async.t14744(self__.map_LT_, self__.f, self__.ch, self__.meta14742, ___$1, fn1, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__4266__auto__ = ret;
        if (cljs.core.truth_(and__4266__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__4266__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t14741.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t14741.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t14741.cljs$lang$type = true;
    cljs.core.async.t14741.cljs$lang$ctorStr = "cljs.core.async/t14741";
    cljs.core.async.t14741.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
      return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async/t14741");
    };
    cljs.core.async.__GT_t14741 = function cljs$core$async$map_LT__$___GT_t14741(map_LT___$1, f__$1, ch__$1, meta14742) {
      return new cljs.core.async.t14741(map_LT___$1, f__$1, ch__$1, meta14742);
    };
  }
  return new cljs.core.async.t14741(cljs$core$async$map_LT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs.core.async.t14750 !== "undefined") {
  } else {
    cljs.core.async.t14750 = function(map_GT_, f, ch, meta14751) {
      this.map_GT_ = map_GT_;
      this.f = f;
      this.ch = ch;
      this.meta14751 = meta14751;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t14750.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14752, meta14751__$1) {
      var self__ = this;
      var _14752__$1 = this;
      return new cljs.core.async.t14750(self__.map_GT_, self__.f, self__.ch, meta14751__$1);
    };
    cljs.core.async.t14750.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14752) {
      var self__ = this;
      var _14752__$1 = this;
      return self__.meta14751;
    };
    cljs.core.async.t14750.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t14750.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t14750.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t14750.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t14750.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t14750.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t14750.cljs$lang$type = true;
    cljs.core.async.t14750.cljs$lang$ctorStr = "cljs.core.async/t14750";
    cljs.core.async.t14750.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
      return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async/t14750");
    };
    cljs.core.async.__GT_t14750 = function cljs$core$async$map_GT__$___GT_t14750(map_GT___$1, f__$1, ch__$1, meta14751) {
      return new cljs.core.async.t14750(map_GT___$1, f__$1, ch__$1, meta14751);
    };
  }
  return new cljs.core.async.t14750(cljs$core$async$map_GT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs.core.async.t14756 !== "undefined") {
  } else {
    cljs.core.async.t14756 = function(filter_GT_, p, ch, meta14757) {
      this.filter_GT_ = filter_GT_;
      this.p = p;
      this.ch = ch;
      this.meta14757 = meta14757;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t14756.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_14758, meta14757__$1) {
      var self__ = this;
      var _14758__$1 = this;
      return new cljs.core.async.t14756(self__.filter_GT_, self__.p, self__.ch, meta14757__$1);
    };
    cljs.core.async.t14756.prototype.cljs$core$IMeta$_meta$arity$1 = function(_14758) {
      var self__ = this;
      var _14758__$1 = this;
      return self__.meta14757;
    };
    cljs.core.async.t14756.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t14756.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t14756.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t14756.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t14756.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t14756.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t14756.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t14756.cljs$lang$type = true;
    cljs.core.async.t14756.cljs$lang$ctorStr = "cljs.core.async/t14756";
    cljs.core.async.t14756.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
      return cljs.core._write.call(null, writer__4858__auto__, "cljs.core.async/t14756");
    };
    cljs.core.async.__GT_t14756 = function cljs$core$async$filter_GT__$___GT_t14756(filter_GT___$1, p__$1, ch__$1, meta14757) {
      return new cljs.core.async.t14756(filter_GT___$1, p__$1, ch__$1, meta14757);
    };
  }
  return new cljs.core.async.t14756(cljs$core$async$filter_GT_, p, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function cljs$core$async$filter_LT_() {
  var G__14760 = arguments.length;
  switch(G__14760) {
    case 2:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.filter_LT_.call(null, p, ch, null);
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__8284__auto___14803 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___14803, out) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___14803, out) {
          return function(state_14781) {
            var state_val_14782 = state_14781[1];
            if (state_val_14782 === 7) {
              var inst_14777 = state_14781[2];
              var state_14781__$1 = state_14781;
              var statearr_14783_14804 = state_14781__$1;
              statearr_14783_14804[2] = inst_14777;
              statearr_14783_14804[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14782 === 1) {
                var state_14781__$1 = state_14781;
                var statearr_14784_14805 = state_14781__$1;
                statearr_14784_14805[2] = null;
                statearr_14784_14805[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14782 === 4) {
                  var inst_14763 = state_14781[7];
                  var inst_14763__$1 = state_14781[2];
                  var inst_14764 = inst_14763__$1 == null;
                  var state_14781__$1 = function() {
                    var statearr_14785 = state_14781;
                    statearr_14785[7] = inst_14763__$1;
                    return statearr_14785;
                  }();
                  if (cljs.core.truth_(inst_14764)) {
                    var statearr_14786_14806 = state_14781__$1;
                    statearr_14786_14806[1] = 5;
                  } else {
                    var statearr_14787_14807 = state_14781__$1;
                    statearr_14787_14807[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14782 === 6) {
                    var inst_14763 = state_14781[7];
                    var inst_14768 = p.call(null, inst_14763);
                    var state_14781__$1 = state_14781;
                    if (cljs.core.truth_(inst_14768)) {
                      var statearr_14788_14808 = state_14781__$1;
                      statearr_14788_14808[1] = 8;
                    } else {
                      var statearr_14789_14809 = state_14781__$1;
                      statearr_14789_14809[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14782 === 3) {
                      var inst_14779 = state_14781[2];
                      var state_14781__$1 = state_14781;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14781__$1, inst_14779);
                    } else {
                      if (state_val_14782 === 2) {
                        var state_14781__$1 = state_14781;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14781__$1, 4, ch);
                      } else {
                        if (state_val_14782 === 11) {
                          var inst_14771 = state_14781[2];
                          var state_14781__$1 = state_14781;
                          var statearr_14790_14810 = state_14781__$1;
                          statearr_14790_14810[2] = inst_14771;
                          statearr_14790_14810[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14782 === 9) {
                            var state_14781__$1 = state_14781;
                            var statearr_14791_14811 = state_14781__$1;
                            statearr_14791_14811[2] = null;
                            statearr_14791_14811[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14782 === 5) {
                              var inst_14766 = cljs.core.async.close_BANG_.call(null, out);
                              var state_14781__$1 = state_14781;
                              var statearr_14792_14812 = state_14781__$1;
                              statearr_14792_14812[2] = inst_14766;
                              statearr_14792_14812[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14782 === 10) {
                                var inst_14774 = state_14781[2];
                                var state_14781__$1 = function() {
                                  var statearr_14793 = state_14781;
                                  statearr_14793[8] = inst_14774;
                                  return statearr_14793;
                                }();
                                var statearr_14794_14813 = state_14781__$1;
                                statearr_14794_14813[2] = null;
                                statearr_14794_14813[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14782 === 8) {
                                  var inst_14763 = state_14781[7];
                                  var state_14781__$1 = state_14781;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14781__$1, 11, out, inst_14763);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___14803, out);
        return function(switch__8222__auto__, c__8284__auto___14803, out) {
          return function() {
            var cljs$core$async$state_machine__8223__auto__ = null;
            var cljs$core$async$state_machine__8223__auto____0 = function() {
              var statearr_14798 = [null, null, null, null, null, null, null, null, null];
              statearr_14798[0] = cljs$core$async$state_machine__8223__auto__;
              statearr_14798[1] = 1;
              return statearr_14798;
            };
            var cljs$core$async$state_machine__8223__auto____1 = function(state_14781) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_14781);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e14799) {
                    if (e14799 instanceof Object) {
                      var ex__8226__auto__ = e14799;
                      var statearr_14800_14814 = state_14781;
                      statearr_14800_14814[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14781);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14799;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14815 = state_14781;
                  state_14781 = G__14815;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8223__auto__ = function(state_14781) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8223__auto____1.call(this, state_14781);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8223__auto____0;
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8223__auto____1;
            return cljs$core$async$state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___14803, out);
      }();
      var state__8286__auto__ = function() {
        var statearr_14801 = f__8285__auto__.call(null);
        statearr_14801[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___14803;
        return statearr_14801;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___14803, out));
  return out;
};
cljs.core.async.filter_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.remove_LT_ = function cljs$core$async$remove_LT_() {
  var G__14817 = arguments.length;
  switch(G__14817) {
    case 2:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.remove_LT_.call(null, p, ch, null);
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
};
cljs.core.async.remove_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__8284__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto__) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto__) {
          return function(state_14984) {
            var state_val_14985 = state_14984[1];
            if (state_val_14985 === 7) {
              var inst_14980 = state_14984[2];
              var state_14984__$1 = state_14984;
              var statearr_14986_15027 = state_14984__$1;
              statearr_14986_15027[2] = inst_14980;
              statearr_14986_15027[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14985 === 20) {
                var inst_14950 = state_14984[7];
                var inst_14961 = state_14984[2];
                var inst_14962 = cljs.core.next.call(null, inst_14950);
                var inst_14936 = inst_14962;
                var inst_14937 = null;
                var inst_14938 = 0;
                var inst_14939 = 0;
                var state_14984__$1 = function() {
                  var statearr_14987 = state_14984;
                  statearr_14987[8] = inst_14937;
                  statearr_14987[9] = inst_14939;
                  statearr_14987[10] = inst_14936;
                  statearr_14987[11] = inst_14938;
                  statearr_14987[12] = inst_14961;
                  return statearr_14987;
                }();
                var statearr_14988_15028 = state_14984__$1;
                statearr_14988_15028[2] = null;
                statearr_14988_15028[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14985 === 1) {
                  var state_14984__$1 = state_14984;
                  var statearr_14989_15029 = state_14984__$1;
                  statearr_14989_15029[2] = null;
                  statearr_14989_15029[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14985 === 4) {
                    var inst_14925 = state_14984[13];
                    var inst_14925__$1 = state_14984[2];
                    var inst_14926 = inst_14925__$1 == null;
                    var state_14984__$1 = function() {
                      var statearr_14990 = state_14984;
                      statearr_14990[13] = inst_14925__$1;
                      return statearr_14990;
                    }();
                    if (cljs.core.truth_(inst_14926)) {
                      var statearr_14991_15030 = state_14984__$1;
                      statearr_14991_15030[1] = 5;
                    } else {
                      var statearr_14992_15031 = state_14984__$1;
                      statearr_14992_15031[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14985 === 15) {
                      var state_14984__$1 = state_14984;
                      var statearr_14996_15032 = state_14984__$1;
                      statearr_14996_15032[2] = null;
                      statearr_14996_15032[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14985 === 21) {
                        var state_14984__$1 = state_14984;
                        var statearr_14997_15033 = state_14984__$1;
                        statearr_14997_15033[2] = null;
                        statearr_14997_15033[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14985 === 13) {
                          var inst_14937 = state_14984[8];
                          var inst_14939 = state_14984[9];
                          var inst_14936 = state_14984[10];
                          var inst_14938 = state_14984[11];
                          var inst_14946 = state_14984[2];
                          var inst_14947 = inst_14939 + 1;
                          var tmp14993 = inst_14937;
                          var tmp14994 = inst_14936;
                          var tmp14995 = inst_14938;
                          var inst_14936__$1 = tmp14994;
                          var inst_14937__$1 = tmp14993;
                          var inst_14938__$1 = tmp14995;
                          var inst_14939__$1 = inst_14947;
                          var state_14984__$1 = function() {
                            var statearr_14998 = state_14984;
                            statearr_14998[8] = inst_14937__$1;
                            statearr_14998[9] = inst_14939__$1;
                            statearr_14998[10] = inst_14936__$1;
                            statearr_14998[11] = inst_14938__$1;
                            statearr_14998[14] = inst_14946;
                            return statearr_14998;
                          }();
                          var statearr_14999_15034 = state_14984__$1;
                          statearr_14999_15034[2] = null;
                          statearr_14999_15034[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14985 === 22) {
                            var state_14984__$1 = state_14984;
                            var statearr_15000_15035 = state_14984__$1;
                            statearr_15000_15035[2] = null;
                            statearr_15000_15035[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14985 === 6) {
                              var inst_14925 = state_14984[13];
                              var inst_14934 = f.call(null, inst_14925);
                              var inst_14935 = cljs.core.seq.call(null, inst_14934);
                              var inst_14936 = inst_14935;
                              var inst_14937 = null;
                              var inst_14938 = 0;
                              var inst_14939 = 0;
                              var state_14984__$1 = function() {
                                var statearr_15001 = state_14984;
                                statearr_15001[8] = inst_14937;
                                statearr_15001[9] = inst_14939;
                                statearr_15001[10] = inst_14936;
                                statearr_15001[11] = inst_14938;
                                return statearr_15001;
                              }();
                              var statearr_15002_15036 = state_14984__$1;
                              statearr_15002_15036[2] = null;
                              statearr_15002_15036[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14985 === 17) {
                                var inst_14950 = state_14984[7];
                                var inst_14954 = cljs.core.chunk_first.call(null, inst_14950);
                                var inst_14955 = cljs.core.chunk_rest.call(null, inst_14950);
                                var inst_14956 = cljs.core.count.call(null, inst_14954);
                                var inst_14936 = inst_14955;
                                var inst_14937 = inst_14954;
                                var inst_14938 = inst_14956;
                                var inst_14939 = 0;
                                var state_14984__$1 = function() {
                                  var statearr_15003 = state_14984;
                                  statearr_15003[8] = inst_14937;
                                  statearr_15003[9] = inst_14939;
                                  statearr_15003[10] = inst_14936;
                                  statearr_15003[11] = inst_14938;
                                  return statearr_15003;
                                }();
                                var statearr_15004_15037 = state_14984__$1;
                                statearr_15004_15037[2] = null;
                                statearr_15004_15037[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14985 === 3) {
                                  var inst_14982 = state_14984[2];
                                  var state_14984__$1 = state_14984;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14984__$1, inst_14982);
                                } else {
                                  if (state_val_14985 === 12) {
                                    var inst_14970 = state_14984[2];
                                    var state_14984__$1 = state_14984;
                                    var statearr_15005_15038 = state_14984__$1;
                                    statearr_15005_15038[2] = inst_14970;
                                    statearr_15005_15038[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14985 === 2) {
                                      var state_14984__$1 = state_14984;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14984__$1, 4, in$);
                                    } else {
                                      if (state_val_14985 === 23) {
                                        var inst_14978 = state_14984[2];
                                        var state_14984__$1 = state_14984;
                                        var statearr_15006_15039 = state_14984__$1;
                                        statearr_15006_15039[2] = inst_14978;
                                        statearr_15006_15039[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14985 === 19) {
                                          var inst_14965 = state_14984[2];
                                          var state_14984__$1 = state_14984;
                                          var statearr_15007_15040 = state_14984__$1;
                                          statearr_15007_15040[2] = inst_14965;
                                          statearr_15007_15040[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14985 === 11) {
                                            var inst_14950 = state_14984[7];
                                            var inst_14936 = state_14984[10];
                                            var inst_14950__$1 = cljs.core.seq.call(null, inst_14936);
                                            var state_14984__$1 = function() {
                                              var statearr_15008 = state_14984;
                                              statearr_15008[7] = inst_14950__$1;
                                              return statearr_15008;
                                            }();
                                            if (inst_14950__$1) {
                                              var statearr_15009_15041 = state_14984__$1;
                                              statearr_15009_15041[1] = 14;
                                            } else {
                                              var statearr_15010_15042 = state_14984__$1;
                                              statearr_15010_15042[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14985 === 9) {
                                              var inst_14972 = state_14984[2];
                                              var inst_14973 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_14984__$1 = function() {
                                                var statearr_15011 = state_14984;
                                                statearr_15011[15] = inst_14972;
                                                return statearr_15011;
                                              }();
                                              if (cljs.core.truth_(inst_14973)) {
                                                var statearr_15012_15043 = state_14984__$1;
                                                statearr_15012_15043[1] = 21;
                                              } else {
                                                var statearr_15013_15044 = state_14984__$1;
                                                statearr_15013_15044[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_14985 === 5) {
                                                var inst_14928 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_14984__$1 = state_14984;
                                                var statearr_15014_15045 = state_14984__$1;
                                                statearr_15014_15045[2] = inst_14928;
                                                statearr_15014_15045[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14985 === 14) {
                                                  var inst_14950 = state_14984[7];
                                                  var inst_14952 = cljs.core.chunked_seq_QMARK_.call(null, inst_14950);
                                                  var state_14984__$1 = state_14984;
                                                  if (inst_14952) {
                                                    var statearr_15015_15046 = state_14984__$1;
                                                    statearr_15015_15046[1] = 17;
                                                  } else {
                                                    var statearr_15016_15047 = state_14984__$1;
                                                    statearr_15016_15047[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_14985 === 16) {
                                                    var inst_14968 = state_14984[2];
                                                    var state_14984__$1 = state_14984;
                                                    var statearr_15017_15048 = state_14984__$1;
                                                    statearr_15017_15048[2] = inst_14968;
                                                    statearr_15017_15048[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14985 === 10) {
                                                      var inst_14937 = state_14984[8];
                                                      var inst_14939 = state_14984[9];
                                                      var inst_14944 = cljs.core._nth.call(null, inst_14937, inst_14939);
                                                      var state_14984__$1 = state_14984;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14984__$1, 13, out, inst_14944);
                                                    } else {
                                                      if (state_val_14985 === 18) {
                                                        var inst_14950 = state_14984[7];
                                                        var inst_14959 = cljs.core.first.call(null, inst_14950);
                                                        var state_14984__$1 = state_14984;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14984__$1, 20, out, inst_14959);
                                                      } else {
                                                        if (state_val_14985 === 8) {
                                                          var inst_14939 = state_14984[9];
                                                          var inst_14938 = state_14984[11];
                                                          var inst_14941 = inst_14939 < inst_14938;
                                                          var inst_14942 = inst_14941;
                                                          var state_14984__$1 = state_14984;
                                                          if (cljs.core.truth_(inst_14942)) {
                                                            var statearr_15018_15049 = state_14984__$1;
                                                            statearr_15018_15049[1] = 10;
                                                          } else {
                                                            var statearr_15019_15050 = state_14984__$1;
                                                            statearr_15019_15050[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto__);
        return function(switch__8222__auto__, c__8284__auto__) {
          return function() {
            var cljs$core$async$mapcat_STAR__$_state_machine__8223__auto__ = null;
            var cljs$core$async$mapcat_STAR__$_state_machine__8223__auto____0 = function() {
              var statearr_15023 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15023[0] = cljs$core$async$mapcat_STAR__$_state_machine__8223__auto__;
              statearr_15023[1] = 1;
              return statearr_15023;
            };
            var cljs$core$async$mapcat_STAR__$_state_machine__8223__auto____1 = function(state_14984) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_14984);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e15024) {
                    if (e15024 instanceof Object) {
                      var ex__8226__auto__ = e15024;
                      var statearr_15025_15051 = state_14984;
                      statearr_15025_15051[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14984);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15024;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15052 = state_14984;
                  state_14984 = G__15052;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$mapcat_STAR__$_state_machine__8223__auto__ = function(state_14984) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mapcat_STAR__$_state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$mapcat_STAR__$_state_machine__8223__auto____1.call(this, state_14984);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mapcat_STAR__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__8223__auto____0;
            cljs$core$async$mapcat_STAR__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__8223__auto____1;
            return cljs$core$async$mapcat_STAR__$_state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto__);
      }();
      var state__8286__auto__ = function() {
        var statearr_15026 = f__8285__auto__.call(null);
        statearr_15026[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto__;
        return statearr_15026;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto__));
  return c__8284__auto__;
};
cljs.core.async.mapcat_LT_ = function cljs$core$async$mapcat_LT_() {
  var G__15054 = arguments.length;
  switch(G__15054) {
    case 2:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = function(f, in$) {
  return cljs.core.async.mapcat_LT_.call(null, f, in$, null);
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = function(f, in$, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return out;
};
cljs.core.async.mapcat_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_GT_ = function cljs$core$async$mapcat_GT_() {
  var G__15057 = arguments.length;
  switch(G__15057) {
    case 2:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = function(f, out) {
  return cljs.core.async.mapcat_GT_.call(null, f, out, null);
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = function(f, out, buf_or_n) {
  var in$ = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return in$;
};
cljs.core.async.mapcat_GT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.unique = function cljs$core$async$unique() {
  var G__15060 = arguments.length;
  switch(G__15060) {
    case 1:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1 = function(ch) {
  return cljs.core.async.unique.call(null, ch, null);
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2 = function(ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__8284__auto___15110 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___15110, out) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___15110, out) {
          return function(state_15084) {
            var state_val_15085 = state_15084[1];
            if (state_val_15085 === 7) {
              var inst_15079 = state_15084[2];
              var state_15084__$1 = state_15084;
              var statearr_15086_15111 = state_15084__$1;
              statearr_15086_15111[2] = inst_15079;
              statearr_15086_15111[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15085 === 1) {
                var inst_15061 = null;
                var state_15084__$1 = function() {
                  var statearr_15087 = state_15084;
                  statearr_15087[7] = inst_15061;
                  return statearr_15087;
                }();
                var statearr_15088_15112 = state_15084__$1;
                statearr_15088_15112[2] = null;
                statearr_15088_15112[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15085 === 4) {
                  var inst_15064 = state_15084[8];
                  var inst_15064__$1 = state_15084[2];
                  var inst_15065 = inst_15064__$1 == null;
                  var inst_15066 = cljs.core.not.call(null, inst_15065);
                  var state_15084__$1 = function() {
                    var statearr_15089 = state_15084;
                    statearr_15089[8] = inst_15064__$1;
                    return statearr_15089;
                  }();
                  if (inst_15066) {
                    var statearr_15090_15113 = state_15084__$1;
                    statearr_15090_15113[1] = 5;
                  } else {
                    var statearr_15091_15114 = state_15084__$1;
                    statearr_15091_15114[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15085 === 6) {
                    var state_15084__$1 = state_15084;
                    var statearr_15092_15115 = state_15084__$1;
                    statearr_15092_15115[2] = null;
                    statearr_15092_15115[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15085 === 3) {
                      var inst_15081 = state_15084[2];
                      var inst_15082 = cljs.core.async.close_BANG_.call(null, out);
                      var state_15084__$1 = function() {
                        var statearr_15093 = state_15084;
                        statearr_15093[9] = inst_15081;
                        return statearr_15093;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15084__$1, inst_15082);
                    } else {
                      if (state_val_15085 === 2) {
                        var state_15084__$1 = state_15084;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15084__$1, 4, ch);
                      } else {
                        if (state_val_15085 === 11) {
                          var inst_15064 = state_15084[8];
                          var inst_15073 = state_15084[2];
                          var inst_15061 = inst_15064;
                          var state_15084__$1 = function() {
                            var statearr_15094 = state_15084;
                            statearr_15094[7] = inst_15061;
                            statearr_15094[10] = inst_15073;
                            return statearr_15094;
                          }();
                          var statearr_15095_15116 = state_15084__$1;
                          statearr_15095_15116[2] = null;
                          statearr_15095_15116[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15085 === 9) {
                            var inst_15064 = state_15084[8];
                            var state_15084__$1 = state_15084;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15084__$1, 11, out, inst_15064);
                          } else {
                            if (state_val_15085 === 5) {
                              var inst_15064 = state_15084[8];
                              var inst_15061 = state_15084[7];
                              var inst_15068 = cljs.core._EQ_.call(null, inst_15064, inst_15061);
                              var state_15084__$1 = state_15084;
                              if (inst_15068) {
                                var statearr_15097_15117 = state_15084__$1;
                                statearr_15097_15117[1] = 8;
                              } else {
                                var statearr_15098_15118 = state_15084__$1;
                                statearr_15098_15118[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15085 === 10) {
                                var inst_15076 = state_15084[2];
                                var state_15084__$1 = state_15084;
                                var statearr_15099_15119 = state_15084__$1;
                                statearr_15099_15119[2] = inst_15076;
                                statearr_15099_15119[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15085 === 8) {
                                  var inst_15061 = state_15084[7];
                                  var tmp15096 = inst_15061;
                                  var inst_15061__$1 = tmp15096;
                                  var state_15084__$1 = function() {
                                    var statearr_15100 = state_15084;
                                    statearr_15100[7] = inst_15061__$1;
                                    return statearr_15100;
                                  }();
                                  var statearr_15101_15120 = state_15084__$1;
                                  statearr_15101_15120[2] = null;
                                  statearr_15101_15120[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___15110, out);
        return function(switch__8222__auto__, c__8284__auto___15110, out) {
          return function() {
            var cljs$core$async$state_machine__8223__auto__ = null;
            var cljs$core$async$state_machine__8223__auto____0 = function() {
              var statearr_15105 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_15105[0] = cljs$core$async$state_machine__8223__auto__;
              statearr_15105[1] = 1;
              return statearr_15105;
            };
            var cljs$core$async$state_machine__8223__auto____1 = function(state_15084) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_15084);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e15106) {
                    if (e15106 instanceof Object) {
                      var ex__8226__auto__ = e15106;
                      var statearr_15107_15121 = state_15084;
                      statearr_15107_15121[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15084);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15106;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15122 = state_15084;
                  state_15084 = G__15122;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8223__auto__ = function(state_15084) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8223__auto____1.call(this, state_15084);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8223__auto____0;
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8223__auto____1;
            return cljs$core$async$state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___15110, out);
      }();
      var state__8286__auto__ = function() {
        var statearr_15108 = f__8285__auto__.call(null);
        statearr_15108[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___15110;
        return statearr_15108;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___15110, out));
  return out;
};
cljs.core.async.unique.cljs$lang$maxFixedArity = 2;
cljs.core.async.partition = function cljs$core$async$partition() {
  var G__15124 = arguments.length;
  switch(G__15124) {
    case 2:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.partition.call(null, n, ch, null);
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__8284__auto___15193 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___15193, out) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___15193, out) {
          return function(state_15162) {
            var state_val_15163 = state_15162[1];
            if (state_val_15163 === 7) {
              var inst_15158 = state_15162[2];
              var state_15162__$1 = state_15162;
              var statearr_15164_15194 = state_15162__$1;
              statearr_15164_15194[2] = inst_15158;
              statearr_15164_15194[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15163 === 1) {
                var inst_15125 = new Array(n);
                var inst_15126 = inst_15125;
                var inst_15127 = 0;
                var state_15162__$1 = function() {
                  var statearr_15165 = state_15162;
                  statearr_15165[7] = inst_15127;
                  statearr_15165[8] = inst_15126;
                  return statearr_15165;
                }();
                var statearr_15166_15195 = state_15162__$1;
                statearr_15166_15195[2] = null;
                statearr_15166_15195[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15163 === 4) {
                  var inst_15130 = state_15162[9];
                  var inst_15130__$1 = state_15162[2];
                  var inst_15131 = inst_15130__$1 == null;
                  var inst_15132 = cljs.core.not.call(null, inst_15131);
                  var state_15162__$1 = function() {
                    var statearr_15167 = state_15162;
                    statearr_15167[9] = inst_15130__$1;
                    return statearr_15167;
                  }();
                  if (inst_15132) {
                    var statearr_15168_15196 = state_15162__$1;
                    statearr_15168_15196[1] = 5;
                  } else {
                    var statearr_15169_15197 = state_15162__$1;
                    statearr_15169_15197[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15163 === 15) {
                    var inst_15152 = state_15162[2];
                    var state_15162__$1 = state_15162;
                    var statearr_15170_15198 = state_15162__$1;
                    statearr_15170_15198[2] = inst_15152;
                    statearr_15170_15198[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15163 === 13) {
                      var state_15162__$1 = state_15162;
                      var statearr_15171_15199 = state_15162__$1;
                      statearr_15171_15199[2] = null;
                      statearr_15171_15199[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15163 === 6) {
                        var inst_15127 = state_15162[7];
                        var inst_15148 = inst_15127 > 0;
                        var state_15162__$1 = state_15162;
                        if (cljs.core.truth_(inst_15148)) {
                          var statearr_15172_15200 = state_15162__$1;
                          statearr_15172_15200[1] = 12;
                        } else {
                          var statearr_15173_15201 = state_15162__$1;
                          statearr_15173_15201[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15163 === 3) {
                          var inst_15160 = state_15162[2];
                          var state_15162__$1 = state_15162;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15162__$1, inst_15160);
                        } else {
                          if (state_val_15163 === 12) {
                            var inst_15126 = state_15162[8];
                            var inst_15150 = cljs.core.vec.call(null, inst_15126);
                            var state_15162__$1 = state_15162;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15162__$1, 15, out, inst_15150);
                          } else {
                            if (state_val_15163 === 2) {
                              var state_15162__$1 = state_15162;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15162__$1, 4, ch);
                            } else {
                              if (state_val_15163 === 11) {
                                var inst_15142 = state_15162[2];
                                var inst_15143 = new Array(n);
                                var inst_15126 = inst_15143;
                                var inst_15127 = 0;
                                var state_15162__$1 = function() {
                                  var statearr_15174 = state_15162;
                                  statearr_15174[10] = inst_15142;
                                  statearr_15174[7] = inst_15127;
                                  statearr_15174[8] = inst_15126;
                                  return statearr_15174;
                                }();
                                var statearr_15175_15202 = state_15162__$1;
                                statearr_15175_15202[2] = null;
                                statearr_15175_15202[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15163 === 9) {
                                  var inst_15126 = state_15162[8];
                                  var inst_15140 = cljs.core.vec.call(null, inst_15126);
                                  var state_15162__$1 = state_15162;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15162__$1, 11, out, inst_15140);
                                } else {
                                  if (state_val_15163 === 5) {
                                    var inst_15127 = state_15162[7];
                                    var inst_15135 = state_15162[11];
                                    var inst_15130 = state_15162[9];
                                    var inst_15126 = state_15162[8];
                                    var inst_15134 = inst_15126[inst_15127] = inst_15130;
                                    var inst_15135__$1 = inst_15127 + 1;
                                    var inst_15136 = inst_15135__$1 < n;
                                    var state_15162__$1 = function() {
                                      var statearr_15176 = state_15162;
                                      statearr_15176[12] = inst_15134;
                                      statearr_15176[11] = inst_15135__$1;
                                      return statearr_15176;
                                    }();
                                    if (cljs.core.truth_(inst_15136)) {
                                      var statearr_15177_15203 = state_15162__$1;
                                      statearr_15177_15203[1] = 8;
                                    } else {
                                      var statearr_15178_15204 = state_15162__$1;
                                      statearr_15178_15204[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15163 === 14) {
                                      var inst_15155 = state_15162[2];
                                      var inst_15156 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_15162__$1 = function() {
                                        var statearr_15180 = state_15162;
                                        statearr_15180[13] = inst_15155;
                                        return statearr_15180;
                                      }();
                                      var statearr_15181_15205 = state_15162__$1;
                                      statearr_15181_15205[2] = inst_15156;
                                      statearr_15181_15205[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_15163 === 10) {
                                        var inst_15146 = state_15162[2];
                                        var state_15162__$1 = state_15162;
                                        var statearr_15182_15206 = state_15162__$1;
                                        statearr_15182_15206[2] = inst_15146;
                                        statearr_15182_15206[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15163 === 8) {
                                          var inst_15135 = state_15162[11];
                                          var inst_15126 = state_15162[8];
                                          var tmp15179 = inst_15126;
                                          var inst_15126__$1 = tmp15179;
                                          var inst_15127 = inst_15135;
                                          var state_15162__$1 = function() {
                                            var statearr_15183 = state_15162;
                                            statearr_15183[7] = inst_15127;
                                            statearr_15183[8] = inst_15126__$1;
                                            return statearr_15183;
                                          }();
                                          var statearr_15184_15207 = state_15162__$1;
                                          statearr_15184_15207[2] = null;
                                          statearr_15184_15207[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___15193, out);
        return function(switch__8222__auto__, c__8284__auto___15193, out) {
          return function() {
            var cljs$core$async$state_machine__8223__auto__ = null;
            var cljs$core$async$state_machine__8223__auto____0 = function() {
              var statearr_15188 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15188[0] = cljs$core$async$state_machine__8223__auto__;
              statearr_15188[1] = 1;
              return statearr_15188;
            };
            var cljs$core$async$state_machine__8223__auto____1 = function(state_15162) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_15162);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e15189) {
                    if (e15189 instanceof Object) {
                      var ex__8226__auto__ = e15189;
                      var statearr_15190_15208 = state_15162;
                      statearr_15190_15208[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15162);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15189;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15209 = state_15162;
                  state_15162 = G__15209;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8223__auto__ = function(state_15162) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8223__auto____1.call(this, state_15162);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8223__auto____0;
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8223__auto____1;
            return cljs$core$async$state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___15193, out);
      }();
      var state__8286__auto__ = function() {
        var statearr_15191 = f__8285__auto__.call(null);
        statearr_15191[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___15193;
        return statearr_15191;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___15193, out));
  return out;
};
cljs.core.async.partition.cljs$lang$maxFixedArity = 3;
cljs.core.async.partition_by = function cljs$core$async$partition_by() {
  var G__15211 = arguments.length;
  switch(G__15211) {
    case 2:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, ch) {
  return cljs.core.async.partition_by.call(null, f, ch, null);
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3 = function(f, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__8284__auto___15284 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___15284, out) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___15284, out) {
          return function(state_15253) {
            var state_val_15254 = state_15253[1];
            if (state_val_15254 === 7) {
              var inst_15249 = state_15253[2];
              var state_15253__$1 = state_15253;
              var statearr_15255_15285 = state_15253__$1;
              statearr_15255_15285[2] = inst_15249;
              statearr_15255_15285[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15254 === 1) {
                var inst_15212 = [];
                var inst_15213 = inst_15212;
                var inst_15214 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                var state_15253__$1 = function() {
                  var statearr_15256 = state_15253;
                  statearr_15256[7] = inst_15213;
                  statearr_15256[8] = inst_15214;
                  return statearr_15256;
                }();
                var statearr_15257_15286 = state_15253__$1;
                statearr_15257_15286[2] = null;
                statearr_15257_15286[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15254 === 4) {
                  var inst_15217 = state_15253[9];
                  var inst_15217__$1 = state_15253[2];
                  var inst_15218 = inst_15217__$1 == null;
                  var inst_15219 = cljs.core.not.call(null, inst_15218);
                  var state_15253__$1 = function() {
                    var statearr_15258 = state_15253;
                    statearr_15258[9] = inst_15217__$1;
                    return statearr_15258;
                  }();
                  if (inst_15219) {
                    var statearr_15259_15287 = state_15253__$1;
                    statearr_15259_15287[1] = 5;
                  } else {
                    var statearr_15260_15288 = state_15253__$1;
                    statearr_15260_15288[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15254 === 15) {
                    var inst_15243 = state_15253[2];
                    var state_15253__$1 = state_15253;
                    var statearr_15261_15289 = state_15253__$1;
                    statearr_15261_15289[2] = inst_15243;
                    statearr_15261_15289[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15254 === 13) {
                      var state_15253__$1 = state_15253;
                      var statearr_15262_15290 = state_15253__$1;
                      statearr_15262_15290[2] = null;
                      statearr_15262_15290[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15254 === 6) {
                        var inst_15213 = state_15253[7];
                        var inst_15238 = inst_15213.length;
                        var inst_15239 = inst_15238 > 0;
                        var state_15253__$1 = state_15253;
                        if (cljs.core.truth_(inst_15239)) {
                          var statearr_15263_15291 = state_15253__$1;
                          statearr_15263_15291[1] = 12;
                        } else {
                          var statearr_15264_15292 = state_15253__$1;
                          statearr_15264_15292[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15254 === 3) {
                          var inst_15251 = state_15253[2];
                          var state_15253__$1 = state_15253;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15253__$1, inst_15251);
                        } else {
                          if (state_val_15254 === 12) {
                            var inst_15213 = state_15253[7];
                            var inst_15241 = cljs.core.vec.call(null, inst_15213);
                            var state_15253__$1 = state_15253;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15253__$1, 15, out, inst_15241);
                          } else {
                            if (state_val_15254 === 2) {
                              var state_15253__$1 = state_15253;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15253__$1, 4, ch);
                            } else {
                              if (state_val_15254 === 11) {
                                var inst_15217 = state_15253[9];
                                var inst_15221 = state_15253[10];
                                var inst_15231 = state_15253[2];
                                var inst_15232 = [];
                                var inst_15233 = inst_15232.push(inst_15217);
                                var inst_15213 = inst_15232;
                                var inst_15214 = inst_15221;
                                var state_15253__$1 = function() {
                                  var statearr_15265 = state_15253;
                                  statearr_15265[11] = inst_15233;
                                  statearr_15265[7] = inst_15213;
                                  statearr_15265[12] = inst_15231;
                                  statearr_15265[8] = inst_15214;
                                  return statearr_15265;
                                }();
                                var statearr_15266_15293 = state_15253__$1;
                                statearr_15266_15293[2] = null;
                                statearr_15266_15293[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15254 === 9) {
                                  var inst_15213 = state_15253[7];
                                  var inst_15229 = cljs.core.vec.call(null, inst_15213);
                                  var state_15253__$1 = state_15253;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15253__$1, 11, out, inst_15229);
                                } else {
                                  if (state_val_15254 === 5) {
                                    var inst_15217 = state_15253[9];
                                    var inst_15214 = state_15253[8];
                                    var inst_15221 = state_15253[10];
                                    var inst_15221__$1 = f.call(null, inst_15217);
                                    var inst_15222 = cljs.core._EQ_.call(null, inst_15221__$1, inst_15214);
                                    var inst_15223 = cljs.core.keyword_identical_QMARK_.call(null, inst_15214, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                    var inst_15224 = inst_15222 || inst_15223;
                                    var state_15253__$1 = function() {
                                      var statearr_15267 = state_15253;
                                      statearr_15267[10] = inst_15221__$1;
                                      return statearr_15267;
                                    }();
                                    if (cljs.core.truth_(inst_15224)) {
                                      var statearr_15268_15294 = state_15253__$1;
                                      statearr_15268_15294[1] = 8;
                                    } else {
                                      var statearr_15269_15295 = state_15253__$1;
                                      statearr_15269_15295[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15254 === 14) {
                                      var inst_15246 = state_15253[2];
                                      var inst_15247 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_15253__$1 = function() {
                                        var statearr_15271 = state_15253;
                                        statearr_15271[13] = inst_15246;
                                        return statearr_15271;
                                      }();
                                      var statearr_15272_15296 = state_15253__$1;
                                      statearr_15272_15296[2] = inst_15247;
                                      statearr_15272_15296[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_15254 === 10) {
                                        var inst_15236 = state_15253[2];
                                        var state_15253__$1 = state_15253;
                                        var statearr_15273_15297 = state_15253__$1;
                                        statearr_15273_15297[2] = inst_15236;
                                        statearr_15273_15297[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15254 === 8) {
                                          var inst_15213 = state_15253[7];
                                          var inst_15217 = state_15253[9];
                                          var inst_15221 = state_15253[10];
                                          var inst_15226 = inst_15213.push(inst_15217);
                                          var tmp15270 = inst_15213;
                                          var inst_15213__$1 = tmp15270;
                                          var inst_15214 = inst_15221;
                                          var state_15253__$1 = function() {
                                            var statearr_15274 = state_15253;
                                            statearr_15274[7] = inst_15213__$1;
                                            statearr_15274[14] = inst_15226;
                                            statearr_15274[8] = inst_15214;
                                            return statearr_15274;
                                          }();
                                          var statearr_15275_15298 = state_15253__$1;
                                          statearr_15275_15298[2] = null;
                                          statearr_15275_15298[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___15284, out);
        return function(switch__8222__auto__, c__8284__auto___15284, out) {
          return function() {
            var cljs$core$async$state_machine__8223__auto__ = null;
            var cljs$core$async$state_machine__8223__auto____0 = function() {
              var statearr_15279 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15279[0] = cljs$core$async$state_machine__8223__auto__;
              statearr_15279[1] = 1;
              return statearr_15279;
            };
            var cljs$core$async$state_machine__8223__auto____1 = function(state_15253) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_15253);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e15280) {
                    if (e15280 instanceof Object) {
                      var ex__8226__auto__ = e15280;
                      var statearr_15281_15299 = state_15253;
                      statearr_15281_15299[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15253);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15280;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15300 = state_15253;
                  state_15253 = G__15300;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__8223__auto__ = function(state_15253) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__8223__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__8223__auto____1.call(this, state_15253);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__8223__auto____0;
            cljs$core$async$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__8223__auto____1;
            return cljs$core$async$state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___15284, out);
      }();
      var state__8286__auto__ = function() {
        var statearr_15282 = f__8285__auto__.call(null);
        statearr_15282[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___15284;
        return statearr_15282;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___15284, out));
  return out;
};
cljs.core.async.partition_by.cljs$lang$maxFixedArity = 3;
goog.provide("dommy.utils");
goog.require("cljs.core");
dommy.utils.dissoc_in = function dommy$utils$dissoc_in(m, p__12655) {
  var vec__12657 = p__12655;
  var k = cljs.core.nth.call(null, vec__12657, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__12657, 1);
  if (cljs.core.truth_(m)) {
    var temp__4423__auto__ = function() {
      var and__4266__auto__ = ks;
      if (cljs.core.truth_(and__4266__auto__)) {
        return dommy$utils$dissoc_in.call(null, m.call(null, k), ks);
      } else {
        return and__4266__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4423__auto__)) {
      var res = temp__4423__auto__;
      return cljs.core.assoc.call(null, m, k, res);
    } else {
      var res = cljs.core.dissoc.call(null, m, k);
      if (cljs.core.empty_QMARK_.call(null, res)) {
        return null;
      } else {
        return res;
      }
    }
  } else {
    return null;
  }
};
dommy.utils.__GT_Array = function dommy$utils$__GT_Array(array_like) {
  return Array.prototype.slice.call(array_like);
};
dommy.utils.as_str = function dommy$utils$as_str(s) {
  if (s instanceof cljs.core.Keyword) {
    return[cljs.core.str(function() {
      var G__12659 = cljs.core.namespace.call(null, s);
      var G__12659__$1 = G__12659 == null ? null : [cljs.core.str(G__12659), cljs.core.str("/")].join("");
      return G__12659__$1;
    }()), cljs.core.str(cljs.core.name.call(null, s))].join("");
  } else {
    return s;
  }
};
dommy.utils.class_match_QMARK_ = function dommy$utils$class_match_QMARK_(class_name, class$, idx) {
  var and__4266__auto__ = idx === 0 || " " === class_name.charAt(idx - 1);
  if (and__4266__auto__) {
    var total_len = class_name.length;
    var stop = idx + class$.length;
    if (stop <= total_len) {
      return stop === total_len || " " === class_name.charAt(stop);
    } else {
      return null;
    }
  } else {
    return and__4266__auto__;
  }
};
dommy.utils.class_index = function dommy$utils$class_index(class_name, class$) {
  var start_from = 0;
  while (true) {
    var i = class_name.indexOf(class$, start_from);
    if (i >= 0) {
      if (dommy.utils.class_match_QMARK_.call(null, class_name, class$, i)) {
        return i;
      } else {
        var G__12660 = i + class$.length;
        start_from = G__12660;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
dommy.utils.remove_class_str = function dommy$utils$remove_class_str(init_class_name, class$) {
  var class_name = init_class_name;
  while (true) {
    var class_len = class_name.length;
    var temp__4423__auto__ = dommy.utils.class_index.call(null, class_name, class$);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var i = temp__4423__auto__;
      var G__12661 = function() {
        var end = i + class$.length;
        return[cljs.core.str(end < class_len ? [cljs.core.str(class_name.substring(0, i)), cljs.core.str(class_name.substr(end + 1))].join("") : class_name.substring(0, i - 1))].join("");
      }();
      class_name = G__12661;
      continue;
    } else {
      return class_name;
    }
    break;
  }
};
goog.provide("dommy.core");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("dommy.utils");
dommy.core.selector = function dommy$core$selector(data) {
  if (cljs.core.coll_QMARK_.call(null, data)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, dommy$core$selector, data));
  } else {
    if (typeof data === "string" || data instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, data);
    } else {
      return null;
    }
  }
};
dommy.core.text = function dommy$core$text(elem) {
  var or__4278__auto__ = elem.textContent;
  if (cljs.core.truth_(or__4278__auto__)) {
    return or__4278__auto__;
  } else {
    return elem.innerText;
  }
};
dommy.core.html = function dommy$core$html(elem) {
  return elem.innerHTML;
};
dommy.core.value = function dommy$core$value(elem) {
  return elem.value;
};
dommy.core.class$ = function dommy$core$class(elem) {
  return elem.className;
};
dommy.core.attr = function dommy$core$attr(elem, k) {
  if (cljs.core.truth_(k)) {
    return elem.getAttribute(dommy.utils.as_str.call(null, k));
  } else {
    return null;
  }
};
dommy.core.style = function dommy$core$style() {
  var G__11998 = arguments.length;
  switch(G__11998) {
    case 1:
      return dommy.core.style.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return dommy.core.style.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
dommy.core.style.cljs$core$IFn$_invoke$arity$1 = function(elem) {
  return cljs.core.js__GT_clj.call(null, window.getComputedStyle(elem));
};
dommy.core.style.cljs$core$IFn$_invoke$arity$2 = function(elem, k) {
  return window.getComputedStyle(elem)[dommy.utils.as_str.call(null, k)];
};
dommy.core.style.cljs$lang$maxFixedArity = 2;
dommy.core.px = function dommy$core$px(elem, k) {
  var pixels = dommy.core.style.call(null, elem, k);
  if (cljs.core.seq.call(null, pixels)) {
    return parseInt(pixels);
  } else {
    return null;
  }
};
dommy.core.has_class_QMARK_ = function dommy$core$has_class_QMARK_(elem, c) {
  var c__$1 = dommy.utils.as_str.call(null, c);
  var temp__4423__auto__ = elem.classList;
  if (cljs.core.truth_(temp__4423__auto__)) {
    var class_list = temp__4423__auto__;
    return class_list.contains(c__$1);
  } else {
    var temp__4425__auto__ = dommy.core.class$.call(null, elem);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var class_name = temp__4425__auto__;
      var temp__4425__auto____$1 = dommy.utils.class_index.call(null, class_name, c__$1);
      if (cljs.core.truth_(temp__4425__auto____$1)) {
        var i = temp__4425__auto____$1;
        return i >= 0;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
dommy.core.hidden_QMARK_ = function dommy$core$hidden_QMARK_(elem) {
  return dommy.core.style.call(null, elem, new cljs.core.Keyword(null, "display", "display", 242065432)) === "none";
};
dommy.core.bounding_client_rect = function dommy$core$bounding_client_rect(elem) {
  var r = elem.getBoundingClientRect();
  return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "top", "top", -1856271961), r.top, new cljs.core.Keyword(null, "bottom", "bottom", -1550509018), r.bottom, new cljs.core.Keyword(null, "left", "left", -399115937), r.left, new cljs.core.Keyword(null, "right", "right", -452581833), r.right, new cljs.core.Keyword(null, "width", "width", -384071477), r.width, new cljs.core.Keyword(null, "height", "height", 1025178622), r.height], null);
};
dommy.core.parent = function dommy$core$parent(elem) {
  return elem.parentNode;
};
dommy.core.children = function dommy$core$children(elem) {
  return elem.children;
};
dommy.core.ancestors = function dommy$core$ancestors(elem) {
  return cljs.core.take_while.call(null, cljs.core.identity, cljs.core.iterate.call(null, dommy.core.parent, elem));
};
dommy.core.ancestor_nodes = dommy.core.ancestors;
dommy.core.matches_pred = function dommy$core$matches_pred() {
  var G__12001 = arguments.length;
  switch(G__12001) {
    case 2:
      return dommy.core.matches_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return dommy.core.matches_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
dommy.core.matches_pred.cljs$core$IFn$_invoke$arity$2 = function(base, selector) {
  var matches = dommy.utils.__GT_Array.call(null, base.querySelectorAll(dommy.core.selector.call(null, selector)));
  return function(matches) {
    return function(elem) {
      return matches.indexOf(elem) >= 0;
    };
  }(matches);
};
dommy.core.matches_pred.cljs$core$IFn$_invoke$arity$1 = function(selector) {
  return dommy.core.matches_pred.call(null, document, selector);
};
dommy.core.matches_pred.cljs$lang$maxFixedArity = 2;
dommy.core.closest = function dommy$core$closest() {
  var G__12005 = arguments.length;
  switch(G__12005) {
    case 3:
      return dommy.core.closest.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 2:
      return dommy.core.closest.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
dommy.core.closest.cljs$core$IFn$_invoke$arity$3 = function(base, elem, selector) {
  return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, base, selector), cljs.core.take_while.call(null, function(p1__12003_SHARP_) {
    return!(p1__12003_SHARP_ === base);
  }, dommy.core.ancestors.call(null, elem))));
};
dommy.core.closest.cljs$core$IFn$_invoke$arity$2 = function(elem, selector) {
  return dommy.core.closest.call(null, document.body, elem, selector);
};
dommy.core.closest.cljs$lang$maxFixedArity = 3;
dommy.core.descendant_QMARK_ = function dommy$core$descendant_QMARK_(descendant, ancestor) {
  if (cljs.core.truth_(ancestor.contains)) {
    return ancestor.contains(descendant);
  } else {
    if (cljs.core.truth_(ancestor.compareDocumentPosition)) {
      return(ancestor.compareDocumentPosition(descendant) & 1 << 4) != 0;
    } else {
      return null;
    }
  }
};
dommy.core.set_text_BANG_ = function dommy$core$set_text_BANG_(elem, text) {
  if (!(void 0 === elem.textContent)) {
    elem.textContent = text;
  } else {
    elem.innerText = text;
  }
  return elem;
};
dommy.core.set_html_BANG_ = function dommy$core$set_html_BANG_(elem, html) {
  elem.innerHTML = html;
  return elem;
};
dommy.core.set_value_BANG_ = function dommy$core$set_value_BANG_(elem, value) {
  elem.value = value;
  return elem;
};
dommy.core.set_class_BANG_ = function dommy$core$set_class_BANG_(elem, c) {
  return elem.className = c;
};
dommy.core.set_style_BANG_ = function dommy$core$set_style_BANG_() {
  var argseq__5318__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return dommy.core.set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5318__auto__);
};
dommy.core.set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, kvs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null)))))].join(""));
  }
  var style = elem.style;
  var seq__12009_12015 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
  var chunk__12010_12016 = null;
  var count__12011_12017 = 0;
  var i__12012_12018 = 0;
  while (true) {
    if (i__12012_12018 < count__12011_12017) {
      var vec__12013_12019 = cljs.core._nth.call(null, chunk__12010_12016, i__12012_12018);
      var k_12020 = cljs.core.nth.call(null, vec__12013_12019, 0, null);
      var v_12021 = cljs.core.nth.call(null, vec__12013_12019, 1, null);
      style.setProperty(dommy.utils.as_str.call(null, k_12020), v_12021);
      var G__12022 = seq__12009_12015;
      var G__12023 = chunk__12010_12016;
      var G__12024 = count__12011_12017;
      var G__12025 = i__12012_12018 + 1;
      seq__12009_12015 = G__12022;
      chunk__12010_12016 = G__12023;
      count__12011_12017 = G__12024;
      i__12012_12018 = G__12025;
      continue;
    } else {
      var temp__4425__auto___12026 = cljs.core.seq.call(null, seq__12009_12015);
      if (temp__4425__auto___12026) {
        var seq__12009_12027__$1 = temp__4425__auto___12026;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12009_12027__$1)) {
          var c__5063__auto___12028 = cljs.core.chunk_first.call(null, seq__12009_12027__$1);
          var G__12029 = cljs.core.chunk_rest.call(null, seq__12009_12027__$1);
          var G__12030 = c__5063__auto___12028;
          var G__12031 = cljs.core.count.call(null, c__5063__auto___12028);
          var G__12032 = 0;
          seq__12009_12015 = G__12029;
          chunk__12010_12016 = G__12030;
          count__12011_12017 = G__12031;
          i__12012_12018 = G__12032;
          continue;
        } else {
          var vec__12014_12033 = cljs.core.first.call(null, seq__12009_12027__$1);
          var k_12034 = cljs.core.nth.call(null, vec__12014_12033, 0, null);
          var v_12035 = cljs.core.nth.call(null, vec__12014_12033, 1, null);
          style.setProperty(dommy.utils.as_str.call(null, k_12034), v_12035);
          var G__12036 = cljs.core.next.call(null, seq__12009_12027__$1);
          var G__12037 = null;
          var G__12038 = 0;
          var G__12039 = 0;
          seq__12009_12015 = G__12036;
          chunk__12010_12016 = G__12037;
          count__12011_12017 = G__12038;
          i__12012_12018 = G__12039;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem;
};
dommy.core.set_style_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.set_style_BANG_.cljs$lang$applyTo = function(seq12007) {
  var G__12008 = cljs.core.first.call(null, seq12007);
  var seq12007__$1 = cljs.core.next.call(null, seq12007);
  return dommy.core.set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12008, seq12007__$1);
};
dommy.core.remove_style_BANG_ = function dommy$core$remove_style_BANG_() {
  var argseq__5318__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return dommy.core.remove_style_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5318__auto__);
};
dommy.core.remove_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, keywords) {
  var style = elem.style;
  var seq__12042_12046 = cljs.core.seq.call(null, keywords);
  var chunk__12043_12047 = null;
  var count__12044_12048 = 0;
  var i__12045_12049 = 0;
  while (true) {
    if (i__12045_12049 < count__12044_12048) {
      var kw_12050 = cljs.core._nth.call(null, chunk__12043_12047, i__12045_12049);
      style.removeProperty(dommy.utils.as_str.call(null, kw_12050));
      var G__12051 = seq__12042_12046;
      var G__12052 = chunk__12043_12047;
      var G__12053 = count__12044_12048;
      var G__12054 = i__12045_12049 + 1;
      seq__12042_12046 = G__12051;
      chunk__12043_12047 = G__12052;
      count__12044_12048 = G__12053;
      i__12045_12049 = G__12054;
      continue;
    } else {
      var temp__4425__auto___12055 = cljs.core.seq.call(null, seq__12042_12046);
      if (temp__4425__auto___12055) {
        var seq__12042_12056__$1 = temp__4425__auto___12055;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12042_12056__$1)) {
          var c__5063__auto___12057 = cljs.core.chunk_first.call(null, seq__12042_12056__$1);
          var G__12058 = cljs.core.chunk_rest.call(null, seq__12042_12056__$1);
          var G__12059 = c__5063__auto___12057;
          var G__12060 = cljs.core.count.call(null, c__5063__auto___12057);
          var G__12061 = 0;
          seq__12042_12046 = G__12058;
          chunk__12043_12047 = G__12059;
          count__12044_12048 = G__12060;
          i__12045_12049 = G__12061;
          continue;
        } else {
          var kw_12062 = cljs.core.first.call(null, seq__12042_12056__$1);
          style.removeProperty(dommy.utils.as_str.call(null, kw_12062));
          var G__12063 = cljs.core.next.call(null, seq__12042_12056__$1);
          var G__12064 = null;
          var G__12065 = 0;
          var G__12066 = 0;
          seq__12042_12046 = G__12063;
          chunk__12043_12047 = G__12064;
          count__12044_12048 = G__12065;
          i__12045_12049 = G__12066;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem;
};
dommy.core.remove_style_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.remove_style_BANG_.cljs$lang$applyTo = function(seq12040) {
  var G__12041 = cljs.core.first.call(null, seq12040);
  var seq12040__$1 = cljs.core.next.call(null, seq12040);
  return dommy.core.remove_style_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12041, seq12040__$1);
};
dommy.core.set_px_BANG_ = function dommy$core$set_px_BANG_() {
  var argseq__5318__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return dommy.core.set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5318__auto__);
};
dommy.core.set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, kvs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null)))))].join(""));
  }
  var seq__12069_12075 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
  var chunk__12070_12076 = null;
  var count__12071_12077 = 0;
  var i__12072_12078 = 0;
  while (true) {
    if (i__12072_12078 < count__12071_12077) {
      var vec__12073_12079 = cljs.core._nth.call(null, chunk__12070_12076, i__12072_12078);
      var k_12080 = cljs.core.nth.call(null, vec__12073_12079, 0, null);
      var v_12081 = cljs.core.nth.call(null, vec__12073_12079, 1, null);
      dommy.core.set_style_BANG_.call(null, elem, k_12080, [cljs.core.str(v_12081), cljs.core.str("px")].join(""));
      var G__12082 = seq__12069_12075;
      var G__12083 = chunk__12070_12076;
      var G__12084 = count__12071_12077;
      var G__12085 = i__12072_12078 + 1;
      seq__12069_12075 = G__12082;
      chunk__12070_12076 = G__12083;
      count__12071_12077 = G__12084;
      i__12072_12078 = G__12085;
      continue;
    } else {
      var temp__4425__auto___12086 = cljs.core.seq.call(null, seq__12069_12075);
      if (temp__4425__auto___12086) {
        var seq__12069_12087__$1 = temp__4425__auto___12086;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12069_12087__$1)) {
          var c__5063__auto___12088 = cljs.core.chunk_first.call(null, seq__12069_12087__$1);
          var G__12089 = cljs.core.chunk_rest.call(null, seq__12069_12087__$1);
          var G__12090 = c__5063__auto___12088;
          var G__12091 = cljs.core.count.call(null, c__5063__auto___12088);
          var G__12092 = 0;
          seq__12069_12075 = G__12089;
          chunk__12070_12076 = G__12090;
          count__12071_12077 = G__12091;
          i__12072_12078 = G__12092;
          continue;
        } else {
          var vec__12074_12093 = cljs.core.first.call(null, seq__12069_12087__$1);
          var k_12094 = cljs.core.nth.call(null, vec__12074_12093, 0, null);
          var v_12095 = cljs.core.nth.call(null, vec__12074_12093, 1, null);
          dommy.core.set_style_BANG_.call(null, elem, k_12094, [cljs.core.str(v_12095), cljs.core.str("px")].join(""));
          var G__12096 = cljs.core.next.call(null, seq__12069_12087__$1);
          var G__12097 = null;
          var G__12098 = 0;
          var G__12099 = 0;
          seq__12069_12075 = G__12096;
          chunk__12070_12076 = G__12097;
          count__12071_12077 = G__12098;
          i__12072_12078 = G__12099;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem;
};
dommy.core.set_px_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.set_px_BANG_.cljs$lang$applyTo = function(seq12067) {
  var G__12068 = cljs.core.first.call(null, seq12067);
  var seq12067__$1 = cljs.core.next.call(null, seq12067);
  return dommy.core.set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12068, seq12067__$1);
};
dommy.core.set_attr_BANG_ = function dommy$core$set_attr_BANG_() {
  var G__12105 = arguments.length;
  switch(G__12105) {
    case 2:
      return dommy.core.set_attr_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return dommy.core.set_attr_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return dommy.core.set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5329__auto__);
  }
};
dommy.core.set_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, k) {
  return dommy.core.set_attr_BANG_.call(null, elem, k, dommy.utils.as_str.call(null, k));
};
dommy.core.set_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = function(elem, k, v) {
  var k__$1 = dommy.utils.as_str.call(null, k);
  if (cljs.core.truth_(v)) {
    if (cljs.core.fn_QMARK_.call(null, v)) {
      var G__12106 = elem;
      G__12106[k__$1] = v;
      return G__12106;
    } else {
      var G__12107 = elem;
      G__12107.setAttribute(k__$1, v);
      return G__12107;
    }
  } else {
    return null;
  }
};
dommy.core.set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, k, v, kvs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "kvs", "kvs", -1695980277, null)))))].join(""));
  }
  var seq__12108_12115 = cljs.core.seq.call(null, cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), cljs.core.partition.call(null, 2, kvs)));
  var chunk__12109_12116 = null;
  var count__12110_12117 = 0;
  var i__12111_12118 = 0;
  while (true) {
    if (i__12111_12118 < count__12110_12117) {
      var vec__12112_12119 = cljs.core._nth.call(null, chunk__12109_12116, i__12111_12118);
      var k_12120__$1 = cljs.core.nth.call(null, vec__12112_12119, 0, null);
      var v_12121__$1 = cljs.core.nth.call(null, vec__12112_12119, 1, null);
      dommy.core.set_attr_BANG_.call(null, elem, k_12120__$1, v_12121__$1);
      var G__12122 = seq__12108_12115;
      var G__12123 = chunk__12109_12116;
      var G__12124 = count__12110_12117;
      var G__12125 = i__12111_12118 + 1;
      seq__12108_12115 = G__12122;
      chunk__12109_12116 = G__12123;
      count__12110_12117 = G__12124;
      i__12111_12118 = G__12125;
      continue;
    } else {
      var temp__4425__auto___12126 = cljs.core.seq.call(null, seq__12108_12115);
      if (temp__4425__auto___12126) {
        var seq__12108_12127__$1 = temp__4425__auto___12126;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12108_12127__$1)) {
          var c__5063__auto___12128 = cljs.core.chunk_first.call(null, seq__12108_12127__$1);
          var G__12129 = cljs.core.chunk_rest.call(null, seq__12108_12127__$1);
          var G__12130 = c__5063__auto___12128;
          var G__12131 = cljs.core.count.call(null, c__5063__auto___12128);
          var G__12132 = 0;
          seq__12108_12115 = G__12129;
          chunk__12109_12116 = G__12130;
          count__12110_12117 = G__12131;
          i__12111_12118 = G__12132;
          continue;
        } else {
          var vec__12113_12133 = cljs.core.first.call(null, seq__12108_12127__$1);
          var k_12134__$1 = cljs.core.nth.call(null, vec__12113_12133, 0, null);
          var v_12135__$1 = cljs.core.nth.call(null, vec__12113_12133, 1, null);
          dommy.core.set_attr_BANG_.call(null, elem, k_12134__$1, v_12135__$1);
          var G__12136 = cljs.core.next.call(null, seq__12108_12127__$1);
          var G__12137 = null;
          var G__12138 = 0;
          var G__12139 = 0;
          seq__12108_12115 = G__12136;
          chunk__12109_12116 = G__12137;
          count__12110_12117 = G__12138;
          i__12111_12118 = G__12139;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem;
};
dommy.core.set_attr_BANG_.cljs$lang$applyTo = function(seq12100) {
  var G__12101 = cljs.core.first.call(null, seq12100);
  var seq12100__$1 = cljs.core.next.call(null, seq12100);
  var G__12102 = cljs.core.first.call(null, seq12100__$1);
  var seq12100__$2 = cljs.core.next.call(null, seq12100__$1);
  var G__12103 = cljs.core.first.call(null, seq12100__$2);
  var seq12100__$3 = cljs.core.next.call(null, seq12100__$2);
  return dommy.core.set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12101, G__12102, G__12103, seq12100__$3);
};
dommy.core.set_attr_BANG_.cljs$lang$maxFixedArity = 3;
dommy.core.remove_attr_BANG_ = function dommy$core$remove_attr_BANG_() {
  var G__12144 = arguments.length;
  switch(G__12144) {
    case 2:
      return dommy.core.remove_attr_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return dommy.core.remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
dommy.core.remove_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, k) {
  var k_12150__$1 = dommy.utils.as_str.call(null, k);
  if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["class", null, "classes", null], null), null)).call(null, k_12150__$1))) {
    dommy.core.set_class_BANG_.call(null, elem, "");
  } else {
    elem.removeAttribute(k_12150__$1);
  }
  return elem;
};
dommy.core.remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, k, ks) {
  var seq__12145_12151 = cljs.core.seq.call(null, cljs.core.cons.call(null, k, ks));
  var chunk__12146_12152 = null;
  var count__12147_12153 = 0;
  var i__12148_12154 = 0;
  while (true) {
    if (i__12148_12154 < count__12147_12153) {
      var k_12155__$1 = cljs.core._nth.call(null, chunk__12146_12152, i__12148_12154);
      dommy.core.remove_attr_BANG_.call(null, elem, k_12155__$1);
      var G__12156 = seq__12145_12151;
      var G__12157 = chunk__12146_12152;
      var G__12158 = count__12147_12153;
      var G__12159 = i__12148_12154 + 1;
      seq__12145_12151 = G__12156;
      chunk__12146_12152 = G__12157;
      count__12147_12153 = G__12158;
      i__12148_12154 = G__12159;
      continue;
    } else {
      var temp__4425__auto___12160 = cljs.core.seq.call(null, seq__12145_12151);
      if (temp__4425__auto___12160) {
        var seq__12145_12161__$1 = temp__4425__auto___12160;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12145_12161__$1)) {
          var c__5063__auto___12162 = cljs.core.chunk_first.call(null, seq__12145_12161__$1);
          var G__12163 = cljs.core.chunk_rest.call(null, seq__12145_12161__$1);
          var G__12164 = c__5063__auto___12162;
          var G__12165 = cljs.core.count.call(null, c__5063__auto___12162);
          var G__12166 = 0;
          seq__12145_12151 = G__12163;
          chunk__12146_12152 = G__12164;
          count__12147_12153 = G__12165;
          i__12148_12154 = G__12166;
          continue;
        } else {
          var k_12167__$1 = cljs.core.first.call(null, seq__12145_12161__$1);
          dommy.core.remove_attr_BANG_.call(null, elem, k_12167__$1);
          var G__12168 = cljs.core.next.call(null, seq__12145_12161__$1);
          var G__12169 = null;
          var G__12170 = 0;
          var G__12171 = 0;
          seq__12145_12151 = G__12168;
          chunk__12146_12152 = G__12169;
          count__12147_12153 = G__12170;
          i__12148_12154 = G__12171;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem;
};
dommy.core.remove_attr_BANG_.cljs$lang$applyTo = function(seq12140) {
  var G__12141 = cljs.core.first.call(null, seq12140);
  var seq12140__$1 = cljs.core.next.call(null, seq12140);
  var G__12142 = cljs.core.first.call(null, seq12140__$1);
  var seq12140__$2 = cljs.core.next.call(null, seq12140__$1);
  return dommy.core.remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12141, G__12142, seq12140__$2);
};
dommy.core.remove_attr_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.toggle_attr_BANG_ = function dommy$core$toggle_attr_BANG_() {
  var G__12173 = arguments.length;
  switch(G__12173) {
    case 2:
      return dommy.core.toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return dommy.core.toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
dommy.core.toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, k) {
  return dommy.core.toggle_attr_BANG_.call(null, elem, k, cljs.core.boolean$.call(null, dommy.core.attr.call(null, elem, k)));
};
dommy.core.toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = function(elem, k, add_QMARK_) {
  if (add_QMARK_) {
    return dommy.core.set_attr_BANG_.call(null, elem, k);
  } else {
    return dommy.core.remove_attr_BANG_.call(null, elem, k);
  }
};
dommy.core.toggle_attr_BANG_.cljs$lang$maxFixedArity = 3;
dommy.core.add_class_BANG_ = function dommy$core$add_class_BANG_() {
  var G__12179 = arguments.length;
  switch(G__12179) {
    case 2:
      return dommy.core.add_class_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return dommy.core.add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
dommy.core.add_class_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, classes) {
  var classes__$1 = clojure.string.trim.call(null, dommy.utils.as_str.call(null, classes)).split(/\s+/);
  if (cljs.core.seq.call(null, classes__$1)) {
    var temp__4423__auto___12193 = elem.classList;
    if (cljs.core.truth_(temp__4423__auto___12193)) {
      var class_list_12194 = temp__4423__auto___12193;
      var seq__12180_12195 = cljs.core.seq.call(null, classes__$1);
      var chunk__12181_12196 = null;
      var count__12182_12197 = 0;
      var i__12183_12198 = 0;
      while (true) {
        if (i__12183_12198 < count__12182_12197) {
          var c_12199 = cljs.core._nth.call(null, chunk__12181_12196, i__12183_12198);
          class_list_12194.add(c_12199);
          var G__12200 = seq__12180_12195;
          var G__12201 = chunk__12181_12196;
          var G__12202 = count__12182_12197;
          var G__12203 = i__12183_12198 + 1;
          seq__12180_12195 = G__12200;
          chunk__12181_12196 = G__12201;
          count__12182_12197 = G__12202;
          i__12183_12198 = G__12203;
          continue;
        } else {
          var temp__4425__auto___12204 = cljs.core.seq.call(null, seq__12180_12195);
          if (temp__4425__auto___12204) {
            var seq__12180_12205__$1 = temp__4425__auto___12204;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12180_12205__$1)) {
              var c__5063__auto___12206 = cljs.core.chunk_first.call(null, seq__12180_12205__$1);
              var G__12207 = cljs.core.chunk_rest.call(null, seq__12180_12205__$1);
              var G__12208 = c__5063__auto___12206;
              var G__12209 = cljs.core.count.call(null, c__5063__auto___12206);
              var G__12210 = 0;
              seq__12180_12195 = G__12207;
              chunk__12181_12196 = G__12208;
              count__12182_12197 = G__12209;
              i__12183_12198 = G__12210;
              continue;
            } else {
              var c_12211 = cljs.core.first.call(null, seq__12180_12205__$1);
              class_list_12194.add(c_12211);
              var G__12212 = cljs.core.next.call(null, seq__12180_12205__$1);
              var G__12213 = null;
              var G__12214 = 0;
              var G__12215 = 0;
              seq__12180_12195 = G__12212;
              chunk__12181_12196 = G__12213;
              count__12182_12197 = G__12214;
              i__12183_12198 = G__12215;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } else {
      var seq__12184_12216 = cljs.core.seq.call(null, classes__$1);
      var chunk__12185_12217 = null;
      var count__12186_12218 = 0;
      var i__12187_12219 = 0;
      while (true) {
        if (i__12187_12219 < count__12186_12218) {
          var c_12220 = cljs.core._nth.call(null, chunk__12185_12217, i__12187_12219);
          var class_name_12221 = dommy.core.class$.call(null, elem);
          if (cljs.core.truth_(dommy.utils.class_index.call(null, class_name_12221, c_12220))) {
          } else {
            dommy.core.set_class_BANG_.call(null, elem, class_name_12221 === "" ? c_12220 : [cljs.core.str(class_name_12221), cljs.core.str(" "), cljs.core.str(c_12220)].join(""));
          }
          var G__12222 = seq__12184_12216;
          var G__12223 = chunk__12185_12217;
          var G__12224 = count__12186_12218;
          var G__12225 = i__12187_12219 + 1;
          seq__12184_12216 = G__12222;
          chunk__12185_12217 = G__12223;
          count__12186_12218 = G__12224;
          i__12187_12219 = G__12225;
          continue;
        } else {
          var temp__4425__auto___12226 = cljs.core.seq.call(null, seq__12184_12216);
          if (temp__4425__auto___12226) {
            var seq__12184_12227__$1 = temp__4425__auto___12226;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12184_12227__$1)) {
              var c__5063__auto___12228 = cljs.core.chunk_first.call(null, seq__12184_12227__$1);
              var G__12229 = cljs.core.chunk_rest.call(null, seq__12184_12227__$1);
              var G__12230 = c__5063__auto___12228;
              var G__12231 = cljs.core.count.call(null, c__5063__auto___12228);
              var G__12232 = 0;
              seq__12184_12216 = G__12229;
              chunk__12185_12217 = G__12230;
              count__12186_12218 = G__12231;
              i__12187_12219 = G__12232;
              continue;
            } else {
              var c_12233 = cljs.core.first.call(null, seq__12184_12227__$1);
              var class_name_12234 = dommy.core.class$.call(null, elem);
              if (cljs.core.truth_(dommy.utils.class_index.call(null, class_name_12234, c_12233))) {
              } else {
                dommy.core.set_class_BANG_.call(null, elem, class_name_12234 === "" ? c_12233 : [cljs.core.str(class_name_12234), cljs.core.str(" "), cljs.core.str(c_12233)].join(""));
              }
              var G__12235 = cljs.core.next.call(null, seq__12184_12227__$1);
              var G__12236 = null;
              var G__12237 = 0;
              var G__12238 = 0;
              seq__12184_12216 = G__12235;
              chunk__12185_12217 = G__12236;
              count__12186_12218 = G__12237;
              i__12187_12219 = G__12238;
              continue;
            }
          } else {
          }
        }
        break;
      }
    }
  } else {
  }
  return elem;
};
dommy.core.add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, classes, more_classes) {
  var seq__12188_12239 = cljs.core.seq.call(null, cljs.core.conj.call(null, more_classes, classes));
  var chunk__12189_12240 = null;
  var count__12190_12241 = 0;
  var i__12191_12242 = 0;
  while (true) {
    if (i__12191_12242 < count__12190_12241) {
      var c_12243 = cljs.core._nth.call(null, chunk__12189_12240, i__12191_12242);
      dommy.core.add_class_BANG_.call(null, elem, c_12243);
      var G__12244 = seq__12188_12239;
      var G__12245 = chunk__12189_12240;
      var G__12246 = count__12190_12241;
      var G__12247 = i__12191_12242 + 1;
      seq__12188_12239 = G__12244;
      chunk__12189_12240 = G__12245;
      count__12190_12241 = G__12246;
      i__12191_12242 = G__12247;
      continue;
    } else {
      var temp__4425__auto___12248 = cljs.core.seq.call(null, seq__12188_12239);
      if (temp__4425__auto___12248) {
        var seq__12188_12249__$1 = temp__4425__auto___12248;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12188_12249__$1)) {
          var c__5063__auto___12250 = cljs.core.chunk_first.call(null, seq__12188_12249__$1);
          var G__12251 = cljs.core.chunk_rest.call(null, seq__12188_12249__$1);
          var G__12252 = c__5063__auto___12250;
          var G__12253 = cljs.core.count.call(null, c__5063__auto___12250);
          var G__12254 = 0;
          seq__12188_12239 = G__12251;
          chunk__12189_12240 = G__12252;
          count__12190_12241 = G__12253;
          i__12191_12242 = G__12254;
          continue;
        } else {
          var c_12255 = cljs.core.first.call(null, seq__12188_12249__$1);
          dommy.core.add_class_BANG_.call(null, elem, c_12255);
          var G__12256 = cljs.core.next.call(null, seq__12188_12249__$1);
          var G__12257 = null;
          var G__12258 = 0;
          var G__12259 = 0;
          seq__12188_12239 = G__12256;
          chunk__12189_12240 = G__12257;
          count__12190_12241 = G__12258;
          i__12191_12242 = G__12259;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem;
};
dommy.core.add_class_BANG_.cljs$lang$applyTo = function(seq12175) {
  var G__12176 = cljs.core.first.call(null, seq12175);
  var seq12175__$1 = cljs.core.next.call(null, seq12175);
  var G__12177 = cljs.core.first.call(null, seq12175__$1);
  var seq12175__$2 = cljs.core.next.call(null, seq12175__$1);
  return dommy.core.add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12176, G__12177, seq12175__$2);
};
dommy.core.add_class_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.remove_class_BANG_ = function dommy$core$remove_class_BANG_() {
  var G__12264 = arguments.length;
  switch(G__12264) {
    case 2:
      return dommy.core.remove_class_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return dommy.core.remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
dommy.core.remove_class_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, c) {
  var c__$1 = dommy.utils.as_str.call(null, c);
  var temp__4423__auto___12270 = elem.classList;
  if (cljs.core.truth_(temp__4423__auto___12270)) {
    var class_list_12271 = temp__4423__auto___12270;
    class_list_12271.remove(c__$1);
  } else {
    var class_name_12272 = dommy.core.class$.call(null, elem);
    var new_class_name_12273 = dommy.utils.remove_class_str.call(null, class_name_12272, c__$1);
    if (class_name_12272 === new_class_name_12273) {
    } else {
      dommy.core.set_class_BANG_.call(null, elem, new_class_name_12273);
    }
  }
  return elem;
};
dommy.core.remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, class$, classes) {
  var seq__12265 = cljs.core.seq.call(null, cljs.core.conj.call(null, classes, class$));
  var chunk__12266 = null;
  var count__12267 = 0;
  var i__12268 = 0;
  while (true) {
    if (i__12268 < count__12267) {
      var c = cljs.core._nth.call(null, chunk__12266, i__12268);
      dommy.core.remove_class_BANG_.call(null, elem, c);
      var G__12274 = seq__12265;
      var G__12275 = chunk__12266;
      var G__12276 = count__12267;
      var G__12277 = i__12268 + 1;
      seq__12265 = G__12274;
      chunk__12266 = G__12275;
      count__12267 = G__12276;
      i__12268 = G__12277;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__12265);
      if (temp__4425__auto__) {
        var seq__12265__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12265__$1)) {
          var c__5063__auto__ = cljs.core.chunk_first.call(null, seq__12265__$1);
          var G__12278 = cljs.core.chunk_rest.call(null, seq__12265__$1);
          var G__12279 = c__5063__auto__;
          var G__12280 = cljs.core.count.call(null, c__5063__auto__);
          var G__12281 = 0;
          seq__12265 = G__12278;
          chunk__12266 = G__12279;
          count__12267 = G__12280;
          i__12268 = G__12281;
          continue;
        } else {
          var c = cljs.core.first.call(null, seq__12265__$1);
          dommy.core.remove_class_BANG_.call(null, elem, c);
          var G__12282 = cljs.core.next.call(null, seq__12265__$1);
          var G__12283 = null;
          var G__12284 = 0;
          var G__12285 = 0;
          seq__12265 = G__12282;
          chunk__12266 = G__12283;
          count__12267 = G__12284;
          i__12268 = G__12285;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
dommy.core.remove_class_BANG_.cljs$lang$applyTo = function(seq12260) {
  var G__12261 = cljs.core.first.call(null, seq12260);
  var seq12260__$1 = cljs.core.next.call(null, seq12260);
  var G__12262 = cljs.core.first.call(null, seq12260__$1);
  var seq12260__$2 = cljs.core.next.call(null, seq12260__$1);
  return dommy.core.remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12261, G__12262, seq12260__$2);
};
dommy.core.remove_class_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.toggle_class_BANG_ = function dommy$core$toggle_class_BANG_() {
  var G__12287 = arguments.length;
  switch(G__12287) {
    case 2:
      return dommy.core.toggle_class_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return dommy.core.toggle_class_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
dommy.core.toggle_class_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, c) {
  var c__$1 = dommy.utils.as_str.call(null, c);
  var temp__4423__auto___12289 = elem.classList;
  if (cljs.core.truth_(temp__4423__auto___12289)) {
    var class_list_12290 = temp__4423__auto___12289;
    class_list_12290.toggle(c__$1);
  } else {
    dommy.core.toggle_class_BANG_.call(null, elem, c__$1, !dommy.core.has_class_QMARK_.call(null, elem, c__$1));
  }
  return elem;
};
dommy.core.toggle_class_BANG_.cljs$core$IFn$_invoke$arity$3 = function(elem, class$, add_QMARK_) {
  if (add_QMARK_) {
    dommy.core.add_class_BANG_.call(null, elem, class$);
  } else {
    dommy.core.remove_class_BANG_.call(null, elem, class$);
  }
  return elem;
};
dommy.core.toggle_class_BANG_.cljs$lang$maxFixedArity = 3;
dommy.core.toggle_BANG_ = function dommy$core$toggle_BANG_() {
  var G__12292 = arguments.length;
  switch(G__12292) {
    case 2:
      return dommy.core.toggle_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return dommy.core.toggle_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
dommy.core.toggle_BANG_.cljs$core$IFn$_invoke$arity$2 = function(elem, show_QMARK_) {
  return dommy.core.set_style_BANG_.call(null, elem, new cljs.core.Keyword(null, "display", "display", 242065432), show_QMARK_ ? "" : "none");
};
dommy.core.toggle_BANG_.cljs$core$IFn$_invoke$arity$1 = function(elem) {
  return dommy.core.toggle_BANG_.call(null, elem, dommy.core.hidden_QMARK_.call(null, elem));
};
dommy.core.toggle_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.hide_BANG_ = function dommy$core$hide_BANG_(elem) {
  return dommy.core.toggle_BANG_.call(null, elem, false);
};
dommy.core.show_BANG_ = function dommy$core$show_BANG_(elem) {
  return dommy.core.toggle_BANG_.call(null, elem, true);
};
dommy.core.scroll_into_view = function dommy$core$scroll_into_view(elem, align_with_top_QMARK_) {
  var top = (new cljs.core.Keyword(null, "top", "top", -1856271961)).cljs$core$IFn$_invoke$arity$1(dommy.core.bounding_client_rect.call(null, elem));
  if (window.innerHeight < top + elem.offsetHeight) {
    return elem.scrollIntoView(align_with_top_QMARK_);
  } else {
    return null;
  }
};
dommy.core.create_element = function dommy$core$create_element() {
  var G__12295 = arguments.length;
  switch(G__12295) {
    case 1:
      return dommy.core.create_element.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return dommy.core.create_element.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
dommy.core.create_element.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return document.createElement(dommy.utils.as_str.call(null, tag));
};
dommy.core.create_element.cljs$core$IFn$_invoke$arity$2 = function(tag_ns, tag) {
  return document.createElementNS(dommy.utils.as_str.call(null, tag_ns), dommy.utils.as_str.call(null, tag));
};
dommy.core.create_element.cljs$lang$maxFixedArity = 2;
dommy.core.create_text_node = function dommy$core$create_text_node(text) {
  return document.createTextNode(text);
};
dommy.core.clear_BANG_ = function dommy$core$clear_BANG_(elem) {
  return dommy.core.set_html_BANG_.call(null, elem, "");
};
dommy.core.append_BANG_ = function dommy$core$append_BANG_() {
  var G__12301 = arguments.length;
  switch(G__12301) {
    case 2:
      return dommy.core.append_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return dommy.core.append_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
dommy.core.append_BANG_.cljs$core$IFn$_invoke$arity$2 = function(parent, child) {
  var G__12302 = parent;
  G__12302.appendChild(child);
  return G__12302;
};
dommy.core.append_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(parent, child, more_children) {
  var seq__12303_12308 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
  var chunk__12304_12309 = null;
  var count__12305_12310 = 0;
  var i__12306_12311 = 0;
  while (true) {
    if (i__12306_12311 < count__12305_12310) {
      var c_12312 = cljs.core._nth.call(null, chunk__12304_12309, i__12306_12311);
      dommy.core.append_BANG_.call(null, parent, c_12312);
      var G__12313 = seq__12303_12308;
      var G__12314 = chunk__12304_12309;
      var G__12315 = count__12305_12310;
      var G__12316 = i__12306_12311 + 1;
      seq__12303_12308 = G__12313;
      chunk__12304_12309 = G__12314;
      count__12305_12310 = G__12315;
      i__12306_12311 = G__12316;
      continue;
    } else {
      var temp__4425__auto___12317 = cljs.core.seq.call(null, seq__12303_12308);
      if (temp__4425__auto___12317) {
        var seq__12303_12318__$1 = temp__4425__auto___12317;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12303_12318__$1)) {
          var c__5063__auto___12319 = cljs.core.chunk_first.call(null, seq__12303_12318__$1);
          var G__12320 = cljs.core.chunk_rest.call(null, seq__12303_12318__$1);
          var G__12321 = c__5063__auto___12319;
          var G__12322 = cljs.core.count.call(null, c__5063__auto___12319);
          var G__12323 = 0;
          seq__12303_12308 = G__12320;
          chunk__12304_12309 = G__12321;
          count__12305_12310 = G__12322;
          i__12306_12311 = G__12323;
          continue;
        } else {
          var c_12324 = cljs.core.first.call(null, seq__12303_12318__$1);
          dommy.core.append_BANG_.call(null, parent, c_12324);
          var G__12325 = cljs.core.next.call(null, seq__12303_12318__$1);
          var G__12326 = null;
          var G__12327 = 0;
          var G__12328 = 0;
          seq__12303_12308 = G__12325;
          chunk__12304_12309 = G__12326;
          count__12305_12310 = G__12327;
          i__12306_12311 = G__12328;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return parent;
};
dommy.core.append_BANG_.cljs$lang$applyTo = function(seq12297) {
  var G__12298 = cljs.core.first.call(null, seq12297);
  var seq12297__$1 = cljs.core.next.call(null, seq12297);
  var G__12299 = cljs.core.first.call(null, seq12297__$1);
  var seq12297__$2 = cljs.core.next.call(null, seq12297__$1);
  return dommy.core.append_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12298, G__12299, seq12297__$2);
};
dommy.core.append_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.prepend_BANG_ = function dommy$core$prepend_BANG_() {
  var G__12333 = arguments.length;
  switch(G__12333) {
    case 2:
      return dommy.core.prepend_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5329__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return dommy.core.prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5329__auto__);
  }
};
dommy.core.prepend_BANG_.cljs$core$IFn$_invoke$arity$2 = function(parent, child) {
  var G__12334 = parent;
  G__12334.insertBefore(child, parent.firstChild);
  return G__12334;
};
dommy.core.prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(parent, child, more_children) {
  var seq__12335_12340 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
  var chunk__12336_12341 = null;
  var count__12337_12342 = 0;
  var i__12338_12343 = 0;
  while (true) {
    if (i__12338_12343 < count__12337_12342) {
      var c_12344 = cljs.core._nth.call(null, chunk__12336_12341, i__12338_12343);
      dommy.core.prepend_BANG_.call(null, parent, c_12344);
      var G__12345 = seq__12335_12340;
      var G__12346 = chunk__12336_12341;
      var G__12347 = count__12337_12342;
      var G__12348 = i__12338_12343 + 1;
      seq__12335_12340 = G__12345;
      chunk__12336_12341 = G__12346;
      count__12337_12342 = G__12347;
      i__12338_12343 = G__12348;
      continue;
    } else {
      var temp__4425__auto___12349 = cljs.core.seq.call(null, seq__12335_12340);
      if (temp__4425__auto___12349) {
        var seq__12335_12350__$1 = temp__4425__auto___12349;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12335_12350__$1)) {
          var c__5063__auto___12351 = cljs.core.chunk_first.call(null, seq__12335_12350__$1);
          var G__12352 = cljs.core.chunk_rest.call(null, seq__12335_12350__$1);
          var G__12353 = c__5063__auto___12351;
          var G__12354 = cljs.core.count.call(null, c__5063__auto___12351);
          var G__12355 = 0;
          seq__12335_12340 = G__12352;
          chunk__12336_12341 = G__12353;
          count__12337_12342 = G__12354;
          i__12338_12343 = G__12355;
          continue;
        } else {
          var c_12356 = cljs.core.first.call(null, seq__12335_12350__$1);
          dommy.core.prepend_BANG_.call(null, parent, c_12356);
          var G__12357 = cljs.core.next.call(null, seq__12335_12350__$1);
          var G__12358 = null;
          var G__12359 = 0;
          var G__12360 = 0;
          seq__12335_12340 = G__12357;
          chunk__12336_12341 = G__12358;
          count__12337_12342 = G__12359;
          i__12338_12343 = G__12360;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return parent;
};
dommy.core.prepend_BANG_.cljs$lang$applyTo = function(seq12329) {
  var G__12330 = cljs.core.first.call(null, seq12329);
  var seq12329__$1 = cljs.core.next.call(null, seq12329);
  var G__12331 = cljs.core.first.call(null, seq12329__$1);
  var seq12329__$2 = cljs.core.next.call(null, seq12329__$1);
  return dommy.core.prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12330, G__12331, seq12329__$2);
};
dommy.core.prepend_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.insert_before_BANG_ = function dommy$core$insert_before_BANG_(elem, other) {
  var p = dommy.core.parent.call(null, other);
  if (cljs.core.truth_(p)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Target element must have a parent"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "p", "p", 1791580836, null)))].join(""));
  }
  p.insertBefore(elem, other);
  return elem;
};
dommy.core.insert_after_BANG_ = function dommy$core$insert_after_BANG_(elem, other) {
  var temp__4423__auto___12361 = other.nextSibling;
  if (cljs.core.truth_(temp__4423__auto___12361)) {
    var next_12362 = temp__4423__auto___12361;
    dommy.core.insert_before_BANG_.call(null, elem, next_12362);
  } else {
    dommy.core.append_BANG_.call(null, dommy.core.parent.call(null, other), elem);
  }
  return elem;
};
dommy.core.replace_BANG_ = function dommy$core$replace_BANG_(elem, new$) {
  var p = dommy.core.parent.call(null, elem);
  if (cljs.core.truth_(p)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Target element must have a parent"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "p", "p", 1791580836, null)))].join(""));
  }
  p.replaceChild(new$, elem);
  return new$;
};
dommy.core.replace_contents_BANG_ = function dommy$core$replace_contents_BANG_(p, child) {
  return dommy.core.append_BANG_.call(null, dommy.core.clear_BANG_.call(null, p), child);
};
dommy.core.remove_BANG_ = function dommy$core$remove_BANG_() {
  var G__12364 = arguments.length;
  switch(G__12364) {
    case 1:
      return dommy.core.remove_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return dommy.core.remove_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
dommy.core.remove_BANG_.cljs$core$IFn$_invoke$arity$1 = function(elem) {
  var p = dommy.core.parent.call(null, elem);
  if (cljs.core.truth_(p)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Target element must have a parent"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "p", "p", 1791580836, null)))].join(""));
  }
  return dommy.core.remove_BANG_.call(null, p, elem);
};
dommy.core.remove_BANG_.cljs$core$IFn$_invoke$arity$2 = function(p, elem) {
  var G__12365 = p;
  G__12365.removeChild(elem);
  return G__12365;
};
dommy.core.remove_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.special_listener_makers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__12367) {
  var vec__12368 = p__12367;
  var special_mouse_event = cljs.core.nth.call(null, vec__12368, 0, null);
  var real_mouse_event = cljs.core.nth.call(null, vec__12368, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [special_mouse_event, new cljs.core.PersistentArrayMap.fromArray([real_mouse_event, function(vec__12368, special_mouse_event, real_mouse_event) {
    return function(f) {
      return function(vec__12368, special_mouse_event, real_mouse_event) {
        return function(event) {
          var related_target = event.relatedTarget;
          var listener_target = function() {
            var or__4278__auto__ = event.selectedTarget;
            if (cljs.core.truth_(or__4278__auto__)) {
              return or__4278__auto__;
            } else {
              return event.currentTarget;
            }
          }();
          if (cljs.core.truth_(function() {
            var and__4266__auto__ = related_target;
            if (cljs.core.truth_(and__4266__auto__)) {
              return dommy.core.descendant_QMARK_.call(null, related_target, listener_target);
            } else {
              return and__4266__auto__;
            }
          }())) {
            return null;
          } else {
            return f.call(null, event);
          }
        };
      }(vec__12368, special_mouse_event, real_mouse_event);
    };
  }(vec__12368, special_mouse_event, real_mouse_event)], true, false)], null);
}, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "mouseenter", "mouseenter", -1792413560), new cljs.core.Keyword(null, "mouseover", "mouseover", -484272303), new cljs.core.Keyword(null, "mouseleave", "mouseleave", 531566580), new cljs.core.Keyword(null, "mouseout", "mouseout", 2049446890)], null)));
dommy.core.live_listener = function dommy$core$live_listener(elem, selector, f) {
  return function(event) {
    var selected_target = dommy.core.closest.call(null, elem, event.target, selector);
    if (cljs.core.truth_(function() {
      var and__4266__auto__ = selected_target;
      if (cljs.core.truth_(and__4266__auto__)) {
        return cljs.core.not.call(null, dommy.core.attr.call(null, selected_target, new cljs.core.Keyword(null, "disabled", "disabled", -1529784218)));
      } else {
        return and__4266__auto__;
      }
    }())) {
      event.selectedTarget = selected_target;
      return f.call(null, event);
    } else {
      return null;
    }
  };
};
dommy.core.event_listeners = function dommy$core$event_listeners(elem) {
  var or__4278__auto__ = elem.dommyEventListeners;
  if (cljs.core.truth_(or__4278__auto__)) {
    return or__4278__auto__;
  } else {
    return cljs.core.PersistentArrayMap.EMPTY;
  }
};
dommy.core.update_event_listeners_BANG_ = function dommy$core$update_event_listeners_BANG_() {
  var argseq__5318__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return dommy.core.update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5318__auto__);
};
dommy.core.update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem, f, args) {
  var elem__$1 = elem;
  return elem__$1.dommyEventListeners = cljs.core.apply.call(null, f, dommy.core.event_listeners.call(null, elem__$1), args);
};
dommy.core.update_event_listeners_BANG_.cljs$lang$maxFixedArity = 2;
dommy.core.update_event_listeners_BANG_.cljs$lang$applyTo = function(seq12369) {
  var G__12370 = cljs.core.first.call(null, seq12369);
  var seq12369__$1 = cljs.core.next.call(null, seq12369);
  var G__12371 = cljs.core.first.call(null, seq12369__$1);
  var seq12369__$2 = cljs.core.next.call(null, seq12369__$1);
  return dommy.core.update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12370, G__12371, seq12369__$2);
};
dommy.core.elem_and_selector = function dommy$core$elem_and_selector(elem_sel) {
  if (cljs.core.sequential_QMARK_.call(null, elem_sel)) {
    return cljs.core.juxt.call(null, cljs.core.first, cljs.core.rest).call(null, elem_sel);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [elem_sel, null], null);
  }
};
dommy.core.listen_BANG_ = function dommy$core$listen_BANG_() {
  var argseq__5318__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return dommy.core.listen_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5318__auto__);
};
dommy.core.listen_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem_sel, type_fs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null)))))].join(""));
  }
  var vec__12374_12397 = dommy.core.elem_and_selector.call(null, elem_sel);
  var elem_12398 = cljs.core.nth.call(null, vec__12374_12397, 0, null);
  var selector_12399 = cljs.core.nth.call(null, vec__12374_12397, 1, null);
  var seq__12375_12400 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
  var chunk__12382_12401 = null;
  var count__12383_12402 = 0;
  var i__12384_12403 = 0;
  while (true) {
    if (i__12384_12403 < count__12383_12402) {
      var vec__12391_12404 = cljs.core._nth.call(null, chunk__12382_12401, i__12384_12403);
      var orig_type_12405 = cljs.core.nth.call(null, vec__12391_12404, 0, null);
      var f_12406 = cljs.core.nth.call(null, vec__12391_12404, 1, null);
      var seq__12385_12407 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_12405, new cljs.core.PersistentArrayMap.fromArray([orig_type_12405, cljs.core.identity], true, false)));
      var chunk__12387_12408 = null;
      var count__12388_12409 = 0;
      var i__12389_12410 = 0;
      while (true) {
        if (i__12389_12410 < count__12388_12409) {
          var vec__12392_12411 = cljs.core._nth.call(null, chunk__12387_12408, i__12389_12410);
          var actual_type_12412 = cljs.core.nth.call(null, vec__12392_12411, 0, null);
          var factory_12413 = cljs.core.nth.call(null, vec__12392_12411, 1, null);
          var canonical_f_12414 = (cljs.core.truth_(selector_12399) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_12398, selector_12399) : cljs.core.identity).call(null, factory_12413.call(null, f_12406));
          dommy.core.update_event_listeners_BANG_.call(null, elem_12398, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_12399, actual_type_12412, f_12406], null), canonical_f_12414);
          if (cljs.core.truth_(elem_12398.addEventListener)) {
            elem_12398.addEventListener(cljs.core.name.call(null, actual_type_12412), canonical_f_12414);
          } else {
            elem_12398.attachEvent(cljs.core.name.call(null, actual_type_12412), canonical_f_12414);
          }
          var G__12415 = seq__12385_12407;
          var G__12416 = chunk__12387_12408;
          var G__12417 = count__12388_12409;
          var G__12418 = i__12389_12410 + 1;
          seq__12385_12407 = G__12415;
          chunk__12387_12408 = G__12416;
          count__12388_12409 = G__12417;
          i__12389_12410 = G__12418;
          continue;
        } else {
          var temp__4425__auto___12419 = cljs.core.seq.call(null, seq__12385_12407);
          if (temp__4425__auto___12419) {
            var seq__12385_12420__$1 = temp__4425__auto___12419;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12385_12420__$1)) {
              var c__5063__auto___12421 = cljs.core.chunk_first.call(null, seq__12385_12420__$1);
              var G__12422 = cljs.core.chunk_rest.call(null, seq__12385_12420__$1);
              var G__12423 = c__5063__auto___12421;
              var G__12424 = cljs.core.count.call(null, c__5063__auto___12421);
              var G__12425 = 0;
              seq__12385_12407 = G__12422;
              chunk__12387_12408 = G__12423;
              count__12388_12409 = G__12424;
              i__12389_12410 = G__12425;
              continue;
            } else {
              var vec__12393_12426 = cljs.core.first.call(null, seq__12385_12420__$1);
              var actual_type_12427 = cljs.core.nth.call(null, vec__12393_12426, 0, null);
              var factory_12428 = cljs.core.nth.call(null, vec__12393_12426, 1, null);
              var canonical_f_12429 = (cljs.core.truth_(selector_12399) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_12398, selector_12399) : cljs.core.identity).call(null, factory_12428.call(null, f_12406));
              dommy.core.update_event_listeners_BANG_.call(null, elem_12398, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_12399, actual_type_12427, f_12406], null), canonical_f_12429);
              if (cljs.core.truth_(elem_12398.addEventListener)) {
                elem_12398.addEventListener(cljs.core.name.call(null, actual_type_12427), canonical_f_12429);
              } else {
                elem_12398.attachEvent(cljs.core.name.call(null, actual_type_12427), canonical_f_12429);
              }
              var G__12430 = cljs.core.next.call(null, seq__12385_12420__$1);
              var G__12431 = null;
              var G__12432 = 0;
              var G__12433 = 0;
              seq__12385_12407 = G__12430;
              chunk__12387_12408 = G__12431;
              count__12388_12409 = G__12432;
              i__12389_12410 = G__12433;
              continue;
            }
          } else {
          }
        }
        break;
      }
      var G__12434 = seq__12375_12400;
      var G__12435 = chunk__12382_12401;
      var G__12436 = count__12383_12402;
      var G__12437 = i__12384_12403 + 1;
      seq__12375_12400 = G__12434;
      chunk__12382_12401 = G__12435;
      count__12383_12402 = G__12436;
      i__12384_12403 = G__12437;
      continue;
    } else {
      var temp__4425__auto___12438 = cljs.core.seq.call(null, seq__12375_12400);
      if (temp__4425__auto___12438) {
        var seq__12375_12439__$1 = temp__4425__auto___12438;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12375_12439__$1)) {
          var c__5063__auto___12440 = cljs.core.chunk_first.call(null, seq__12375_12439__$1);
          var G__12441 = cljs.core.chunk_rest.call(null, seq__12375_12439__$1);
          var G__12442 = c__5063__auto___12440;
          var G__12443 = cljs.core.count.call(null, c__5063__auto___12440);
          var G__12444 = 0;
          seq__12375_12400 = G__12441;
          chunk__12382_12401 = G__12442;
          count__12383_12402 = G__12443;
          i__12384_12403 = G__12444;
          continue;
        } else {
          var vec__12394_12445 = cljs.core.first.call(null, seq__12375_12439__$1);
          var orig_type_12446 = cljs.core.nth.call(null, vec__12394_12445, 0, null);
          var f_12447 = cljs.core.nth.call(null, vec__12394_12445, 1, null);
          var seq__12376_12448 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_12446, new cljs.core.PersistentArrayMap.fromArray([orig_type_12446, cljs.core.identity], true, false)));
          var chunk__12378_12449 = null;
          var count__12379_12450 = 0;
          var i__12380_12451 = 0;
          while (true) {
            if (i__12380_12451 < count__12379_12450) {
              var vec__12395_12452 = cljs.core._nth.call(null, chunk__12378_12449, i__12380_12451);
              var actual_type_12453 = cljs.core.nth.call(null, vec__12395_12452, 0, null);
              var factory_12454 = cljs.core.nth.call(null, vec__12395_12452, 1, null);
              var canonical_f_12455 = (cljs.core.truth_(selector_12399) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_12398, selector_12399) : cljs.core.identity).call(null, factory_12454.call(null, f_12447));
              dommy.core.update_event_listeners_BANG_.call(null, elem_12398, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_12399, actual_type_12453, f_12447], null), canonical_f_12455);
              if (cljs.core.truth_(elem_12398.addEventListener)) {
                elem_12398.addEventListener(cljs.core.name.call(null, actual_type_12453), canonical_f_12455);
              } else {
                elem_12398.attachEvent(cljs.core.name.call(null, actual_type_12453), canonical_f_12455);
              }
              var G__12456 = seq__12376_12448;
              var G__12457 = chunk__12378_12449;
              var G__12458 = count__12379_12450;
              var G__12459 = i__12380_12451 + 1;
              seq__12376_12448 = G__12456;
              chunk__12378_12449 = G__12457;
              count__12379_12450 = G__12458;
              i__12380_12451 = G__12459;
              continue;
            } else {
              var temp__4425__auto___12460__$1 = cljs.core.seq.call(null, seq__12376_12448);
              if (temp__4425__auto___12460__$1) {
                var seq__12376_12461__$1 = temp__4425__auto___12460__$1;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__12376_12461__$1)) {
                  var c__5063__auto___12462 = cljs.core.chunk_first.call(null, seq__12376_12461__$1);
                  var G__12463 = cljs.core.chunk_rest.call(null, seq__12376_12461__$1);
                  var G__12464 = c__5063__auto___12462;
                  var G__12465 = cljs.core.count.call(null, c__5063__auto___12462);
                  var G__12466 = 0;
                  seq__12376_12448 = G__12463;
                  chunk__12378_12449 = G__12464;
                  count__12379_12450 = G__12465;
                  i__12380_12451 = G__12466;
                  continue;
                } else {
                  var vec__12396_12467 = cljs.core.first.call(null, seq__12376_12461__$1);
                  var actual_type_12468 = cljs.core.nth.call(null, vec__12396_12467, 0, null);
                  var factory_12469 = cljs.core.nth.call(null, vec__12396_12467, 1, null);
                  var canonical_f_12470 = (cljs.core.truth_(selector_12399) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_12398, selector_12399) : cljs.core.identity).call(null, factory_12469.call(null, f_12447));
                  dommy.core.update_event_listeners_BANG_.call(null, elem_12398, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_12399, actual_type_12468, f_12447], null), canonical_f_12470);
                  if (cljs.core.truth_(elem_12398.addEventListener)) {
                    elem_12398.addEventListener(cljs.core.name.call(null, actual_type_12468), canonical_f_12470);
                  } else {
                    elem_12398.attachEvent(cljs.core.name.call(null, actual_type_12468), canonical_f_12470);
                  }
                  var G__12471 = cljs.core.next.call(null, seq__12376_12461__$1);
                  var G__12472 = null;
                  var G__12473 = 0;
                  var G__12474 = 0;
                  seq__12376_12448 = G__12471;
                  chunk__12378_12449 = G__12472;
                  count__12379_12450 = G__12473;
                  i__12380_12451 = G__12474;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          var G__12475 = cljs.core.next.call(null, seq__12375_12439__$1);
          var G__12476 = null;
          var G__12477 = 0;
          var G__12478 = 0;
          seq__12375_12400 = G__12475;
          chunk__12382_12401 = G__12476;
          count__12383_12402 = G__12477;
          i__12384_12403 = G__12478;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem_sel;
};
dommy.core.listen_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.listen_BANG_.cljs$lang$applyTo = function(seq12372) {
  var G__12373 = cljs.core.first.call(null, seq12372);
  var seq12372__$1 = cljs.core.next.call(null, seq12372);
  return dommy.core.listen_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12373, seq12372__$1);
};
dommy.core.unlisten_BANG_ = function dommy$core$unlisten_BANG_() {
  var argseq__5318__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return dommy.core.unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5318__auto__);
};
dommy.core.unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem_sel, type_fs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null)))))].join(""));
  }
  var vec__12481_12504 = dommy.core.elem_and_selector.call(null, elem_sel);
  var elem_12505 = cljs.core.nth.call(null, vec__12481_12504, 0, null);
  var selector_12506 = cljs.core.nth.call(null, vec__12481_12504, 1, null);
  var seq__12482_12507 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
  var chunk__12489_12508 = null;
  var count__12490_12509 = 0;
  var i__12491_12510 = 0;
  while (true) {
    if (i__12491_12510 < count__12490_12509) {
      var vec__12498_12511 = cljs.core._nth.call(null, chunk__12489_12508, i__12491_12510);
      var orig_type_12512 = cljs.core.nth.call(null, vec__12498_12511, 0, null);
      var f_12513 = cljs.core.nth.call(null, vec__12498_12511, 1, null);
      var seq__12492_12514 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_12512, new cljs.core.PersistentArrayMap.fromArray([orig_type_12512, cljs.core.identity], true, false)));
      var chunk__12494_12515 = null;
      var count__12495_12516 = 0;
      var i__12496_12517 = 0;
      while (true) {
        if (i__12496_12517 < count__12495_12516) {
          var vec__12499_12518 = cljs.core._nth.call(null, chunk__12494_12515, i__12496_12517);
          var actual_type_12519 = cljs.core.nth.call(null, vec__12499_12518, 0, null);
          var __12520 = cljs.core.nth.call(null, vec__12499_12518, 1, null);
          var keys_12521 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_12506, actual_type_12519, f_12513], null);
          var canonical_f_12522 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_12505), keys_12521);
          dommy.core.update_event_listeners_BANG_.call(null, elem_12505, dommy.utils.dissoc_in, keys_12521);
          if (cljs.core.truth_(elem_12505.removeEventListener)) {
            elem_12505.removeEventListener(cljs.core.name.call(null, actual_type_12519), canonical_f_12522);
          } else {
            elem_12505.detachEvent(cljs.core.name.call(null, actual_type_12519), canonical_f_12522);
          }
          var G__12523 = seq__12492_12514;
          var G__12524 = chunk__12494_12515;
          var G__12525 = count__12495_12516;
          var G__12526 = i__12496_12517 + 1;
          seq__12492_12514 = G__12523;
          chunk__12494_12515 = G__12524;
          count__12495_12516 = G__12525;
          i__12496_12517 = G__12526;
          continue;
        } else {
          var temp__4425__auto___12527 = cljs.core.seq.call(null, seq__12492_12514);
          if (temp__4425__auto___12527) {
            var seq__12492_12528__$1 = temp__4425__auto___12527;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12492_12528__$1)) {
              var c__5063__auto___12529 = cljs.core.chunk_first.call(null, seq__12492_12528__$1);
              var G__12530 = cljs.core.chunk_rest.call(null, seq__12492_12528__$1);
              var G__12531 = c__5063__auto___12529;
              var G__12532 = cljs.core.count.call(null, c__5063__auto___12529);
              var G__12533 = 0;
              seq__12492_12514 = G__12530;
              chunk__12494_12515 = G__12531;
              count__12495_12516 = G__12532;
              i__12496_12517 = G__12533;
              continue;
            } else {
              var vec__12500_12534 = cljs.core.first.call(null, seq__12492_12528__$1);
              var actual_type_12535 = cljs.core.nth.call(null, vec__12500_12534, 0, null);
              var __12536 = cljs.core.nth.call(null, vec__12500_12534, 1, null);
              var keys_12537 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_12506, actual_type_12535, f_12513], null);
              var canonical_f_12538 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_12505), keys_12537);
              dommy.core.update_event_listeners_BANG_.call(null, elem_12505, dommy.utils.dissoc_in, keys_12537);
              if (cljs.core.truth_(elem_12505.removeEventListener)) {
                elem_12505.removeEventListener(cljs.core.name.call(null, actual_type_12535), canonical_f_12538);
              } else {
                elem_12505.detachEvent(cljs.core.name.call(null, actual_type_12535), canonical_f_12538);
              }
              var G__12539 = cljs.core.next.call(null, seq__12492_12528__$1);
              var G__12540 = null;
              var G__12541 = 0;
              var G__12542 = 0;
              seq__12492_12514 = G__12539;
              chunk__12494_12515 = G__12540;
              count__12495_12516 = G__12541;
              i__12496_12517 = G__12542;
              continue;
            }
          } else {
          }
        }
        break;
      }
      var G__12543 = seq__12482_12507;
      var G__12544 = chunk__12489_12508;
      var G__12545 = count__12490_12509;
      var G__12546 = i__12491_12510 + 1;
      seq__12482_12507 = G__12543;
      chunk__12489_12508 = G__12544;
      count__12490_12509 = G__12545;
      i__12491_12510 = G__12546;
      continue;
    } else {
      var temp__4425__auto___12547 = cljs.core.seq.call(null, seq__12482_12507);
      if (temp__4425__auto___12547) {
        var seq__12482_12548__$1 = temp__4425__auto___12547;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12482_12548__$1)) {
          var c__5063__auto___12549 = cljs.core.chunk_first.call(null, seq__12482_12548__$1);
          var G__12550 = cljs.core.chunk_rest.call(null, seq__12482_12548__$1);
          var G__12551 = c__5063__auto___12549;
          var G__12552 = cljs.core.count.call(null, c__5063__auto___12549);
          var G__12553 = 0;
          seq__12482_12507 = G__12550;
          chunk__12489_12508 = G__12551;
          count__12490_12509 = G__12552;
          i__12491_12510 = G__12553;
          continue;
        } else {
          var vec__12501_12554 = cljs.core.first.call(null, seq__12482_12548__$1);
          var orig_type_12555 = cljs.core.nth.call(null, vec__12501_12554, 0, null);
          var f_12556 = cljs.core.nth.call(null, vec__12501_12554, 1, null);
          var seq__12483_12557 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_12555, new cljs.core.PersistentArrayMap.fromArray([orig_type_12555, cljs.core.identity], true, false)));
          var chunk__12485_12558 = null;
          var count__12486_12559 = 0;
          var i__12487_12560 = 0;
          while (true) {
            if (i__12487_12560 < count__12486_12559) {
              var vec__12502_12561 = cljs.core._nth.call(null, chunk__12485_12558, i__12487_12560);
              var actual_type_12562 = cljs.core.nth.call(null, vec__12502_12561, 0, null);
              var __12563 = cljs.core.nth.call(null, vec__12502_12561, 1, null);
              var keys_12564 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_12506, actual_type_12562, f_12556], null);
              var canonical_f_12565 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_12505), keys_12564);
              dommy.core.update_event_listeners_BANG_.call(null, elem_12505, dommy.utils.dissoc_in, keys_12564);
              if (cljs.core.truth_(elem_12505.removeEventListener)) {
                elem_12505.removeEventListener(cljs.core.name.call(null, actual_type_12562), canonical_f_12565);
              } else {
                elem_12505.detachEvent(cljs.core.name.call(null, actual_type_12562), canonical_f_12565);
              }
              var G__12566 = seq__12483_12557;
              var G__12567 = chunk__12485_12558;
              var G__12568 = count__12486_12559;
              var G__12569 = i__12487_12560 + 1;
              seq__12483_12557 = G__12566;
              chunk__12485_12558 = G__12567;
              count__12486_12559 = G__12568;
              i__12487_12560 = G__12569;
              continue;
            } else {
              var temp__4425__auto___12570__$1 = cljs.core.seq.call(null, seq__12483_12557);
              if (temp__4425__auto___12570__$1) {
                var seq__12483_12571__$1 = temp__4425__auto___12570__$1;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__12483_12571__$1)) {
                  var c__5063__auto___12572 = cljs.core.chunk_first.call(null, seq__12483_12571__$1);
                  var G__12573 = cljs.core.chunk_rest.call(null, seq__12483_12571__$1);
                  var G__12574 = c__5063__auto___12572;
                  var G__12575 = cljs.core.count.call(null, c__5063__auto___12572);
                  var G__12576 = 0;
                  seq__12483_12557 = G__12573;
                  chunk__12485_12558 = G__12574;
                  count__12486_12559 = G__12575;
                  i__12487_12560 = G__12576;
                  continue;
                } else {
                  var vec__12503_12577 = cljs.core.first.call(null, seq__12483_12571__$1);
                  var actual_type_12578 = cljs.core.nth.call(null, vec__12503_12577, 0, null);
                  var __12579 = cljs.core.nth.call(null, vec__12503_12577, 1, null);
                  var keys_12580 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_12506, actual_type_12578, f_12556], null);
                  var canonical_f_12581 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_12505), keys_12580);
                  dommy.core.update_event_listeners_BANG_.call(null, elem_12505, dommy.utils.dissoc_in, keys_12580);
                  if (cljs.core.truth_(elem_12505.removeEventListener)) {
                    elem_12505.removeEventListener(cljs.core.name.call(null, actual_type_12578), canonical_f_12581);
                  } else {
                    elem_12505.detachEvent(cljs.core.name.call(null, actual_type_12578), canonical_f_12581);
                  }
                  var G__12582 = cljs.core.next.call(null, seq__12483_12571__$1);
                  var G__12583 = null;
                  var G__12584 = 0;
                  var G__12585 = 0;
                  seq__12483_12557 = G__12582;
                  chunk__12485_12558 = G__12583;
                  count__12486_12559 = G__12584;
                  i__12487_12560 = G__12585;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          var G__12586 = cljs.core.next.call(null, seq__12482_12548__$1);
          var G__12587 = null;
          var G__12588 = 0;
          var G__12589 = 0;
          seq__12482_12507 = G__12586;
          chunk__12489_12508 = G__12587;
          count__12490_12509 = G__12588;
          i__12491_12510 = G__12589;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem_sel;
};
dommy.core.unlisten_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.unlisten_BANG_.cljs$lang$applyTo = function(seq12479) {
  var G__12480 = cljs.core.first.call(null, seq12479);
  var seq12479__$1 = cljs.core.next.call(null, seq12479);
  return dommy.core.unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12480, seq12479__$1);
};
dommy.core.listen_once_BANG_ = function dommy$core$listen_once_BANG_() {
  var argseq__5318__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return dommy.core.listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5318__auto__);
};
dommy.core.listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(elem_sel, type_fs) {
  if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1827825394, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1567896074, null)))))].join(""));
  }
  var vec__12592_12599 = dommy.core.elem_and_selector.call(null, elem_sel);
  var elem_12600 = cljs.core.nth.call(null, vec__12592_12599, 0, null);
  var selector_12601 = cljs.core.nth.call(null, vec__12592_12599, 1, null);
  var seq__12593_12602 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
  var chunk__12594_12603 = null;
  var count__12595_12604 = 0;
  var i__12596_12605 = 0;
  while (true) {
    if (i__12596_12605 < count__12595_12604) {
      var vec__12597_12606 = cljs.core._nth.call(null, chunk__12594_12603, i__12596_12605);
      var type_12607 = cljs.core.nth.call(null, vec__12597_12606, 0, null);
      var f_12608 = cljs.core.nth.call(null, vec__12597_12606, 1, null);
      dommy.core.listen_BANG_.call(null, elem_sel, type_12607, function(seq__12593_12602, chunk__12594_12603, count__12595_12604, i__12596_12605, vec__12597_12606, type_12607, f_12608, vec__12592_12599, elem_12600, selector_12601) {
        return function dommy$core$this_fn(e) {
          dommy.core.unlisten_BANG_.call(null, elem_sel, type_12607, dommy$core$this_fn);
          return f_12608.call(null, e);
        };
      }(seq__12593_12602, chunk__12594_12603, count__12595_12604, i__12596_12605, vec__12597_12606, type_12607, f_12608, vec__12592_12599, elem_12600, selector_12601));
      var G__12609 = seq__12593_12602;
      var G__12610 = chunk__12594_12603;
      var G__12611 = count__12595_12604;
      var G__12612 = i__12596_12605 + 1;
      seq__12593_12602 = G__12609;
      chunk__12594_12603 = G__12610;
      count__12595_12604 = G__12611;
      i__12596_12605 = G__12612;
      continue;
    } else {
      var temp__4425__auto___12613 = cljs.core.seq.call(null, seq__12593_12602);
      if (temp__4425__auto___12613) {
        var seq__12593_12614__$1 = temp__4425__auto___12613;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12593_12614__$1)) {
          var c__5063__auto___12615 = cljs.core.chunk_first.call(null, seq__12593_12614__$1);
          var G__12616 = cljs.core.chunk_rest.call(null, seq__12593_12614__$1);
          var G__12617 = c__5063__auto___12615;
          var G__12618 = cljs.core.count.call(null, c__5063__auto___12615);
          var G__12619 = 0;
          seq__12593_12602 = G__12616;
          chunk__12594_12603 = G__12617;
          count__12595_12604 = G__12618;
          i__12596_12605 = G__12619;
          continue;
        } else {
          var vec__12598_12620 = cljs.core.first.call(null, seq__12593_12614__$1);
          var type_12621 = cljs.core.nth.call(null, vec__12598_12620, 0, null);
          var f_12622 = cljs.core.nth.call(null, vec__12598_12620, 1, null);
          dommy.core.listen_BANG_.call(null, elem_sel, type_12621, function(seq__12593_12602, chunk__12594_12603, count__12595_12604, i__12596_12605, vec__12598_12620, type_12621, f_12622, seq__12593_12614__$1, temp__4425__auto___12613, vec__12592_12599, elem_12600, selector_12601) {
            return function dommy$core$this_fn(e) {
              dommy.core.unlisten_BANG_.call(null, elem_sel, type_12621, dommy$core$this_fn);
              return f_12622.call(null, e);
            };
          }(seq__12593_12602, chunk__12594_12603, count__12595_12604, i__12596_12605, vec__12598_12620, type_12621, f_12622, seq__12593_12614__$1, temp__4425__auto___12613, vec__12592_12599, elem_12600, selector_12601));
          var G__12623 = cljs.core.next.call(null, seq__12593_12614__$1);
          var G__12624 = null;
          var G__12625 = 0;
          var G__12626 = 0;
          seq__12593_12602 = G__12623;
          chunk__12594_12603 = G__12624;
          count__12595_12604 = G__12625;
          i__12596_12605 = G__12626;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return elem_sel;
};
dommy.core.listen_once_BANG_.cljs$lang$maxFixedArity = 1;
dommy.core.listen_once_BANG_.cljs$lang$applyTo = function(seq12590) {
  var G__12591 = cljs.core.first.call(null, seq12590);
  var seq12590__$1 = cljs.core.next.call(null, seq12590);
  return dommy.core.listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12591, seq12590__$1);
};
goog.provide("yinch.canvas_interface");
goog.require("cljs.core");
goog.require("yinch.board");
goog.require("yinch.game");
goog.require("cljs.core.async");
goog.require("dommy.core");
goog.require("yinch.utils");
cljs.core.enable_console_print_BANG_.call(null);
yinch.canvas_interface.bg_color = "#888";
yinch.canvas_interface.grid_border = 80;
yinch.canvas_interface.total_border = 10;
yinch.canvas_interface.piece_colors = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "black", "black", 1294279647), "#000", new cljs.core.Keyword(null, "white", "white", -483998618), "#FFF"], null);
yinch.canvas_interface.lip_colors = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "black", "black", 1294279647), "#7EC0EE", new cljs.core.Keyword(null, "white", "white", -483998618), "#7EC0EE"], null);
yinch.canvas_interface.ring_slot_color = "#555";
yinch.canvas_interface.run_marker_color = "#800000";
yinch.canvas_interface._STAR_canvas_STAR_ = null;
yinch.canvas_interface._STAR_ctx_STAR_ = null;
yinch.canvas_interface._STAR_perspective_STAR_ = new cljs.core.Keyword(null, "white", "white", -483998618);
yinch.canvas_interface._STAR_label_STAR_ = true;
yinch.canvas_interface._STAR_canvas_width_STAR_ = 800;
yinch.canvas_interface._STAR_canvas_height_STAR_ = 600;
yinch.canvas_interface._STAR_unit_size_STAR_ = function() {
  var x__4597__auto__ = yinch.canvas_interface._STAR_canvas_width_STAR_ - yinch.canvas_interface.grid_border;
  var y__4598__auto__ = yinch.canvas_interface._STAR_canvas_height_STAR_ - yinch.canvas_interface.grid_border;
  return x__4597__auto__ < y__4598__auto__ ? x__4597__auto__ : y__4598__auto__;
}() / 9;
yinch.canvas_interface._STAR_tile_size_STAR_ = yinch.canvas_interface._STAR_unit_size_STAR_ * .33;
yinch.canvas_interface.grid__GT_screen = function yinch$canvas_interface$grid__GT_screen(p__10710) {
  var vec__10712 = p__10710;
  var major = cljs.core.nth.call(null, vec__10712, 0, null);
  var minor = cljs.core.nth.call(null, vec__10712, 1, null);
  var center_x = yinch.utils.half.call(null, yinch.canvas_interface._STAR_canvas_width_STAR_);
  var center_y = yinch.utils.half.call(null, yinch.canvas_interface._STAR_canvas_height_STAR_);
  var l2l_dist = yinch.utils.cos.call(null, yinch.utils.\u03c0 / 6) * yinch.canvas_interface._STAR_unit_size_STAR_;
  var d_major = major - 5;
  var d_minor = minor - 5;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [center_x + d_minor * l2l_dist, center_y - d_major * yinch.canvas_interface._STAR_unit_size_STAR_ - -1 * d_minor * yinch.utils.sin.call(null, yinch.utils.\u03c0 / 6) * yinch.canvas_interface._STAR_unit_size_STAR_], null);
};
yinch.canvas_interface.screen__GT_grid = function yinch$canvas_interface$screen__GT_grid(p__10713) {
  var vec__10715 = p__10713;
  var x = cljs.core.nth.call(null, vec__10715, 0, null);
  var y = cljs.core.nth.call(null, vec__10715, 1, null);
  var center_x = yinch.utils.half.call(null, yinch.canvas_interface._STAR_canvas_width_STAR_);
  var center_y = yinch.utils.half.call(null, yinch.canvas_interface._STAR_canvas_height_STAR_);
  var l2l_dist = yinch.utils.cos.call(null, yinch.utils.\u03c0 / 6) * yinch.canvas_interface._STAR_unit_size_STAR_;
  var dx = x - center_x;
  var dy = y - center_y;
  var d_minor = dx / l2l_dist;
  var d_major = (d_minor * yinch.utils.sin.call(null, yinch.utils.\u03c0 / 6) * yinch.canvas_interface._STAR_unit_size_STAR_ + (center_y - y)) / yinch.canvas_interface._STAR_unit_size_STAR_;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [Math.round(5 + d_major), Math.round(5 + d_minor)], null);
};
yinch.canvas_interface.rect_BANG_ = function yinch$canvas_interface$rect_BANG_(color, x1, y1, x2, y2) {
  yinch.canvas_interface._STAR_ctx_STAR_["fillStyle"] = color;
  return yinch.canvas_interface._STAR_ctx_STAR_.fillRect(x1, y1, x2, y2);
};
yinch.canvas_interface.line_BANG_ = function yinch$canvas_interface$line_BANG_(color, thickness, cap_style, x1, y1, x2, y2) {
  yinch.canvas_interface._STAR_ctx_STAR_["strokeStyle"] = color;
  yinch.canvas_interface._STAR_ctx_STAR_["lineWidth"] = thickness;
  yinch.canvas_interface._STAR_ctx_STAR_["lineCap"] = cap_style;
  yinch.canvas_interface._STAR_ctx_STAR_.beginPath();
  yinch.canvas_interface._STAR_ctx_STAR_.moveTo(x1, y1);
  yinch.canvas_interface._STAR_ctx_STAR_.lineTo(x2, y2);
  return yinch.canvas_interface._STAR_ctx_STAR_.stroke();
};
yinch.canvas_interface.circle_BANG_ = function yinch$canvas_interface$circle_BANG_() {
  var G__10717 = arguments.length;
  switch(G__10717) {
    case 5:
      return yinch.canvas_interface.circle_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return yinch.canvas_interface.circle_BANG_.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
yinch.canvas_interface.circle_BANG_.cljs$core$IFn$_invoke$arity$5 = function(x, y, r, thickness, stroke_color) {
  return yinch.canvas_interface.circle_BANG_.call(null, x, y, r, thickness, stroke_color, null);
};
yinch.canvas_interface.circle_BANG_.cljs$core$IFn$_invoke$arity$6 = function(x, y, r, thickness, stroke_color, fill_color) {
  yinch.canvas_interface._STAR_ctx_STAR_.beginPath();
  yinch.canvas_interface._STAR_ctx_STAR_["fillStyle"] = fill_color == null ? "" : fill_color;
  yinch.canvas_interface._STAR_ctx_STAR_["strokeStyle"] = stroke_color;
  yinch.canvas_interface._STAR_ctx_STAR_["lineWidth"] = thickness;
  yinch.canvas_interface._STAR_ctx_STAR_.arc(x, y, r, 0, yinch.utils.\u03c0 * 2);
  if (!(fill_color == null)) {
    yinch.canvas_interface._STAR_ctx_STAR_.fill();
  } else {
  }
  return yinch.canvas_interface._STAR_ctx_STAR_.stroke();
};
yinch.canvas_interface.circle_BANG_.cljs$lang$maxFixedArity = 6;
yinch.canvas_interface.mark_BANG_ = function yinch$canvas_interface$mark_BANG_(x, y) {
  yinch.canvas_interface.line_BANG_.call(null, "#F00", 1, "butt", x + 4, y + 4, x - 4, y - 4);
  return yinch.canvas_interface.line_BANG_.call(null, "#F00", 1, "butt", x + 4, y - 4, x - 4, y + 4);
};
yinch.canvas_interface.text_BANG_ = function yinch$canvas_interface$text_BANG_() {
  var G__10720 = arguments.length;
  switch(G__10720) {
    case 3:
      return yinch.canvas_interface.text_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return yinch.canvas_interface.text_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return yinch.canvas_interface.text_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return yinch.canvas_interface.text_BANG_.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
yinch.canvas_interface.text_BANG_.cljs$core$IFn$_invoke$arity$3 = function(x, y, text) {
  return yinch.canvas_interface.text_BANG_.call(null, x, y, text, "#000");
};
yinch.canvas_interface.text_BANG_.cljs$core$IFn$_invoke$arity$4 = function(x, y, text, color) {
  return yinch.canvas_interface.text_BANG_.call(null, x, y, text, color, 12);
};
yinch.canvas_interface.text_BANG_.cljs$core$IFn$_invoke$arity$5 = function(x, y, text, color, size) {
  return yinch.canvas_interface.text_BANG_.call(null, x, y, text, color, size, "sans-serif");
};
yinch.canvas_interface.text_BANG_.cljs$core$IFn$_invoke$arity$6 = function(x, y, text, color, size, style) {
  yinch.canvas_interface._STAR_ctx_STAR_["fillStyle"] = color;
  yinch.canvas_interface._STAR_ctx_STAR_["font"] = [cljs.core.str(size), cljs.core.str("px "), cljs.core.str(style)].join("");
  return yinch.canvas_interface._STAR_ctx_STAR_.fillText(text, x, y);
};
yinch.canvas_interface.text_BANG_.cljs$lang$maxFixedArity = 6;
yinch.canvas_interface.draw_axis_set_BANG_ = function yinch$canvas_interface$draw_axis_set_BANG_(\u03b8) {
  var center_x = yinch.utils.half.call(null, yinch.canvas_interface._STAR_canvas_width_STAR_);
  var center_y = yinch.utils.half.call(null, yinch.canvas_interface._STAR_canvas_height_STAR_);
  var \u03b8_STAR_ = \u03b8 + yinch.utils.half.call(null, yinch.utils.\u03c0);
  var l2l_dist = yinch.utils.cos.call(null, yinch.utils.\u03c0 / 6) * yinch.canvas_interface._STAR_unit_size_STAR_;
  var cxInitial = 5 * l2l_dist * yinch.utils.cos.call(null, \u03b8_STAR_) + center_x;
  var cyInitial = 5 * l2l_dist * yinch.utils.sin.call(null, \u03b8_STAR_) + center_y;
  var cx = cxInitial;
  var cy = cyInitial;
  var G__10727 = yinch.board.axis_lengths;
  var vec__10728 = G__10727;
  var line_length = cljs.core.nth.call(null, vec__10728, 0, null);
  var remaining = cljs.core.nthnext.call(null, vec__10728, 1);
  var cx__$1 = cx;
  var cy__$1 = cy;
  var G__10727__$1 = G__10727;
  while (true) {
    var cx__$2 = cx__$1;
    var cy__$2 = cy__$1;
    var vec__10729 = G__10727__$1;
    var line_length__$1 = cljs.core.nth.call(null, vec__10729, 0, null);
    var remaining__$1 = cljs.core.nthnext.call(null, vec__10729, 1);
    var half_x_run_10730 = yinch.utils.cos.call(null, \u03b8) * yinch.utils.half.call(null, line_length__$1) * yinch.canvas_interface._STAR_unit_size_STAR_;
    var half_y_run_10731 = yinch.utils.sin.call(null, \u03b8) * yinch.utils.half.call(null, line_length__$1) * yinch.canvas_interface._STAR_unit_size_STAR_;
    var x1_10732 = cx__$2 + half_x_run_10730;
    var y1_10733 = cy__$2 + half_y_run_10731;
    var x2_10734 = cx__$2 - half_x_run_10730;
    var y2_10735 = cy__$2 - half_y_run_10731;
    yinch.canvas_interface.line_BANG_.call(null, "#000", 1, "butt", x1_10732, y1_10733, x2_10734, y2_10735);
    if (cljs.core.seq.call(null, remaining__$1)) {
      var G__10736 = cx__$2 - yinch.utils.cos.call(null, \u03b8_STAR_) * l2l_dist;
      var G__10737 = cy__$2 - yinch.utils.sin.call(null, \u03b8_STAR_) * l2l_dist;
      var G__10738 = remaining__$1;
      cx__$1 = G__10736;
      cy__$1 = G__10737;
      G__10727__$1 = G__10738;
      continue;
    } else {
      return null;
    }
    break;
  }
};
yinch.canvas_interface.draw_pieces_BANG_ = function yinch$canvas_interface$draw_pieces_BANG_(game) {
  return cljs.core.doall.call(null, yinch.board.for_cell.call(null, function(major, minor) {
    var vec__10741 = yinch.canvas_interface.grid__GT_screen.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null));
    var x = cljs.core.nth.call(null, vec__10741, 0, null);
    var y = cljs.core.nth.call(null, vec__10741, 1, null);
    var cell = cljs.core.get_in.call(null, game, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "board", "board", -1907017633), major, minor], null));
    var color = (new cljs.core.Keyword(null, "color", "color", 1011675173)).cljs$core$IFn$_invoke$arity$1(cell);
    var G__10742 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cell) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cell).fqn : null;
    switch(G__10742) {
      case "tile":
        return yinch.canvas_interface.circle_BANG_.call(null, x, y, yinch.canvas_interface._STAR_tile_size_STAR_, 2, yinch.canvas_interface.lip_colors.call(null, color), yinch.canvas_interface.piece_colors.call(null, color));
        break;
      case "ring":
        return yinch.canvas_interface.circle_BANG_.call(null, x, y, yinch.canvas_interface._STAR_tile_size_STAR_, 6, yinch.canvas_interface.piece_colors.call(null, color));
        break;
      case "empty":
        return null;
        break;
      default:
        throw[cljs.core.str("Unexpected cell type. Cell:"), cljs.core.str(cell)].join("");;
    }
  }));
};
yinch.canvas_interface.annotate_board_BANG_ = function yinch$canvas_interface$annotate_board_BANG_() {
  var G__10745 = arguments.length;
  switch(G__10745) {
    case 0:
      return yinch.canvas_interface.annotate_board_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 3:
      return yinch.canvas_interface.annotate_board_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
yinch.canvas_interface.annotate_board_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return yinch.canvas_interface.annotate_board_BANG_.call(null, "#000", 14, "sans-serif");
};
yinch.canvas_interface.annotate_board_BANG_.cljs$core$IFn$_invoke$arity$3 = function(color, size, style) {
  cljs.core.doall.call(null, function() {
    var iter__5032__auto__ = function yinch$canvas_interface$iter__10746(s__10747) {
      return new cljs.core.LazySeq(null, function() {
        var s__10747__$1 = s__10747;
        while (true) {
          var temp__4425__auto__ = cljs.core.seq.call(null, s__10747__$1);
          if (temp__4425__auto__) {
            var s__10747__$2 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__10747__$2)) {
              var c__5030__auto__ = cljs.core.chunk_first.call(null, s__10747__$2);
              var size__5031__auto__ = cljs.core.count.call(null, c__5030__auto__);
              var b__10749 = cljs.core.chunk_buffer.call(null, size__5031__auto__);
              if (function() {
                var i__10748 = 0;
                while (true) {
                  if (i__10748 < size__5031__auto__) {
                    var major = cljs.core._nth.call(null, c__5030__auto__, i__10748);
                    cljs.core.chunk_append.call(null, b__10749, function() {
                      var vec__10752 = yinch.canvas_interface.grid__GT_screen.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, yinch.board.axis_staggers.call(null, major)], null));
                      var x = cljs.core.nth.call(null, vec__10752, 0, null);
                      var y = cljs.core.nth.call(null, vec__10752, 1, null);
                      return yinch.canvas_interface.text_BANG_.call(null, x - yinch.canvas_interface._STAR_unit_size_STAR_ / 6 - size, y - yinch.canvas_interface._STAR_unit_size_STAR_ / 6, yinch.board.major_names.call(null, major), color, size, style);
                    }());
                    var G__10763 = i__10748 + 1;
                    i__10748 = G__10763;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10749), yinch$canvas_interface$iter__10746.call(null, cljs.core.chunk_rest.call(null, s__10747__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10749), null);
              }
            } else {
              var major = cljs.core.first.call(null, s__10747__$2);
              return cljs.core.cons.call(null, function() {
                var vec__10753 = yinch.canvas_interface.grid__GT_screen.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, yinch.board.axis_staggers.call(null, major)], null));
                var x = cljs.core.nth.call(null, vec__10753, 0, null);
                var y = cljs.core.nth.call(null, vec__10753, 1, null);
                return yinch.canvas_interface.text_BANG_.call(null, x - yinch.canvas_interface._STAR_unit_size_STAR_ / 6 - size, y - yinch.canvas_interface._STAR_unit_size_STAR_ / 6, yinch.board.major_names.call(null, major), color, size, style);
              }(), yinch$canvas_interface$iter__10746.call(null, cljs.core.rest.call(null, s__10747__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5032__auto__.call(null, cljs.core.range.call(null, 11));
  }());
  return cljs.core.doall.call(null, function() {
    var iter__5032__auto__ = function yinch$canvas_interface$iter__10754(s__10755) {
      return new cljs.core.LazySeq(null, function() {
        var s__10755__$1 = s__10755;
        while (true) {
          var temp__4425__auto__ = cljs.core.seq.call(null, s__10755__$1);
          if (temp__4425__auto__) {
            var s__10755__$2 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__10755__$2)) {
              var c__5030__auto__ = cljs.core.chunk_first.call(null, s__10755__$2);
              var size__5031__auto__ = cljs.core.count.call(null, c__5030__auto__);
              var b__10757 = cljs.core.chunk_buffer.call(null, size__5031__auto__);
              if (function() {
                var i__10756 = 0;
                while (true) {
                  if (i__10756 < size__5031__auto__) {
                    var minor = cljs.core._nth.call(null, c__5030__auto__, i__10756);
                    cljs.core.chunk_append.call(null, b__10757, function() {
                      var vec__10760 = yinch.canvas_interface.grid__GT_screen.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yinch.board.axis_staggers.call(null, minor), minor], null));
                      var x = cljs.core.nth.call(null, vec__10760, 0, null);
                      var y = cljs.core.nth.call(null, vec__10760, 1, null);
                      return yinch.canvas_interface.text_BANG_.call(null, x - size / 4, y + yinch.canvas_interface._STAR_unit_size_STAR_ / 2 + -3, yinch.board.minor_names.call(null, minor), color, size, style);
                    }());
                    var G__10764 = i__10756 + 1;
                    i__10756 = G__10764;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10757), yinch$canvas_interface$iter__10754.call(null, cljs.core.chunk_rest.call(null, s__10755__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10757), null);
              }
            } else {
              var minor = cljs.core.first.call(null, s__10755__$2);
              return cljs.core.cons.call(null, function() {
                var vec__10761 = yinch.canvas_interface.grid__GT_screen.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yinch.board.axis_staggers.call(null, minor), minor], null));
                var x = cljs.core.nth.call(null, vec__10761, 0, null);
                var y = cljs.core.nth.call(null, vec__10761, 1, null);
                return yinch.canvas_interface.text_BANG_.call(null, x - size / 4, y + yinch.canvas_interface._STAR_unit_size_STAR_ / 2 + -3, yinch.board.minor_names.call(null, minor), color, size, style);
              }(), yinch$canvas_interface$iter__10754.call(null, cljs.core.rest.call(null, s__10755__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5032__auto__.call(null, cljs.core.range.call(null, 11));
  }());
};
yinch.canvas_interface.annotate_board_BANG_.cljs$lang$maxFixedArity = 3;
yinch.canvas_interface.draw_run_marker_BANG_ = function yinch$canvas_interface$draw_run_marker_BANG_(game, hover_cell) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "phase", "phase", 575722892)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "run-pick", "run-pick", -1842216705)) && !(hover_cell == null)) {
    var run = yinch.game.best_run.call(null, yinch.game.find_runs.call(null, (new cljs.core.Keyword(null, "board", "board", -1907017633)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [hover_cell], null)), hover_cell.call(null, 0), hover_cell.call(null, 1));
    var vec__10767 = yinch.canvas_interface.grid__GT_screen.call(null, cljs.core.first.call(null, run));
    var x1 = cljs.core.nth.call(null, vec__10767, 0, null);
    var y1 = cljs.core.nth.call(null, vec__10767, 1, null);
    var vec__10768 = yinch.canvas_interface.grid__GT_screen.call(null, cljs.core.second.call(null, run));
    var x2 = cljs.core.nth.call(null, vec__10768, 0, null);
    var y2 = cljs.core.nth.call(null, vec__10768, 1, null);
    return yinch.canvas_interface.line_BANG_.call(null, yinch.canvas_interface.run_marker_color, 4, "round", x1, y1, x2, y2);
  } else {
    return null;
  }
};
yinch.canvas_interface.draw_player_ring_slots_BANG_ = function yinch$canvas_interface$draw_player_ring_slots_BANG_(game, player, corner) {
  var initial_offset = yinch.canvas_interface.total_border + yinch.canvas_interface._STAR_tile_size_STAR_;
  var l2l_dist = yinch.utils.cos.call(null, yinch.utils.\u03c0 / 6) * yinch.canvas_interface._STAR_unit_size_STAR_;
  var vec__10774 = cljs.core._EQ_.call(null, corner, new cljs.core.Keyword(null, "ne", "ne", -1792628743)) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yinch.canvas_interface._STAR_canvas_width_STAR_ - initial_offset, initial_offset, l2l_dist * -1], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [initial_offset, yinch.canvas_interface._STAR_canvas_height_STAR_ - initial_offset, l2l_dist], null);
  var ix = cljs.core.nth.call(null, vec__10774, 0, null);
  var y = cljs.core.nth.call(null, vec__10774, 1, null);
  var x_step = cljs.core.nth.call(null, vec__10774, 2, null);
  return cljs.core.doall.call(null, function() {
    var iter__5032__auto__ = function(initial_offset, l2l_dist, vec__10774, ix, y, x_step) {
      return function yinch$canvas_interface$draw_player_ring_slots_BANG__$_iter__10775(s__10776) {
        return new cljs.core.LazySeq(null, function(initial_offset, l2l_dist, vec__10774, ix, y, x_step) {
          return function() {
            var s__10776__$1 = s__10776;
            while (true) {
              var temp__4425__auto__ = cljs.core.seq.call(null, s__10776__$1);
              if (temp__4425__auto__) {
                var s__10776__$2 = temp__4425__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__10776__$2)) {
                  var c__5030__auto__ = cljs.core.chunk_first.call(null, s__10776__$2);
                  var size__5031__auto__ = cljs.core.count.call(null, c__5030__auto__);
                  var b__10778 = cljs.core.chunk_buffer.call(null, size__5031__auto__);
                  if (function() {
                    var i__10777 = 0;
                    while (true) {
                      if (i__10777 < size__5031__auto__) {
                        var idx = cljs.core._nth.call(null, c__5030__auto__, i__10777);
                        cljs.core.chunk_append.call(null, b__10778, function() {
                          var slot_color = player.call(null, (new cljs.core.Keyword(null, "rings-remaining", "rings-remaining", 742473055)).cljs$core$IFn$_invoke$arity$1(game)) - (2 - idx) < 3 ? yinch.canvas_interface.piece_colors.call(null, player) : yinch.canvas_interface.ring_slot_color;
                          return yinch.canvas_interface.circle_BANG_.call(null, ix + idx * x_step, y, yinch.canvas_interface._STAR_tile_size_STAR_, 6, slot_color);
                        }());
                        var G__10779 = i__10777 + 1;
                        i__10777 = G__10779;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10778), yinch$canvas_interface$draw_player_ring_slots_BANG__$_iter__10775.call(null, cljs.core.chunk_rest.call(null, s__10776__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10778), null);
                  }
                } else {
                  var idx = cljs.core.first.call(null, s__10776__$2);
                  return cljs.core.cons.call(null, function() {
                    var slot_color = player.call(null, (new cljs.core.Keyword(null, "rings-remaining", "rings-remaining", 742473055)).cljs$core$IFn$_invoke$arity$1(game)) - (2 - idx) < 3 ? yinch.canvas_interface.piece_colors.call(null, player) : yinch.canvas_interface.ring_slot_color;
                    return yinch.canvas_interface.circle_BANG_.call(null, ix + idx * x_step, y, yinch.canvas_interface._STAR_tile_size_STAR_, 6, slot_color);
                  }(), yinch$canvas_interface$draw_player_ring_slots_BANG__$_iter__10775.call(null, cljs.core.rest.call(null, s__10776__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(initial_offset, l2l_dist, vec__10774, ix, y, x_step), null, null);
      };
    }(initial_offset, l2l_dist, vec__10774, ix, y, x_step);
    return iter__5032__auto__.call(null, cljs.core.range.call(null, 3));
  }());
};
yinch.canvas_interface.draw_ring_slots_BANG_ = function yinch$canvas_interface$draw_ring_slots_BANG_(game) {
  yinch.canvas_interface.draw_player_ring_slots_BANG_.call(null, game, yinch.canvas_interface._STAR_perspective_STAR_, new cljs.core.Keyword(null, "sw", "sw", 833113913));
  return yinch.canvas_interface.draw_player_ring_slots_BANG_.call(null, game, yinch.utils.other.call(null, yinch.canvas_interface._STAR_perspective_STAR_), new cljs.core.Keyword(null, "ne", "ne", -1792628743));
};
yinch.canvas_interface.draw_phase_BANG_ = function yinch$canvas_interface$draw_phase_BANG_(game) {
  return yinch.canvas_interface.text_BANG_.call(null, yinch.canvas_interface.total_border, yinch.canvas_interface.total_border + 14, [cljs.core.str(cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "turn", "turn", 75759344)).cljs$core$IFn$_invoke$arity$1(game), new cljs.core.Keyword(null, "black", "black", 1294279647)) ? "Black " : "White "), cljs.core.str(function() {
    var G__10781 = (new cljs.core.Keyword(null, "phase", "phase", 575722892)).cljs$core$IFn$_invoke$arity$1(game) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "phase", "phase", 575722892)).cljs$core$IFn$_invoke$arity$1(game).fqn : null;
    switch(G__10781) {
      case "ring-placement":
        return "to place a ring on the board.";
        break;
      case "ring-pick":
        return "to pick a ring to move.";
        break;
      case "ring-drop":
        return[cljs.core.str("to pick a place to drop the ring currently at "), cljs.core.str(yinch.board.minor_names.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "highlight-cell", "highlight-cell", -1286629833)).cljs$core$IFn$_invoke$arity$1(game), 1))), cljs.core.str(yinch.board.major_names.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "highlight-cell", "highlight-cell", -1286629833)).cljs$core$IFn$_invoke$arity$1(game), 0))), cljs.core.str(".")].join("");
        break;
      case "run-pick":
        return "to pick a run to remove from the board.";
        break;
      case "ring-removal":
        return "to pick a ring to remove from the board.";
        break;
      case "victory":
        return "has won!";
        break;
      default:
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str((new cljs.core.Keyword(null, "phase", "phase", 575722892)).cljs$core$IFn$_invoke$arity$1(game))].join(""));;
    }
  }())].join(""), yinch.canvas_interface.piece_colors.call(null, (new cljs.core.Keyword(null, "turn", "turn", 75759344)).cljs$core$IFn$_invoke$arity$1(game)), 14);
};
yinch.canvas_interface.draw_highlight_BANG_ = function yinch$canvas_interface$draw_highlight_BANG_(p__10783) {
  var map__10787 = p__10783;
  var map__10787__$1 = cljs.core.seq_QMARK_.call(null, map__10787) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10787) : map__10787;
  var cell = cljs.core.get.call(null, map__10787__$1, new cljs.core.Keyword(null, "highlight-cell", "highlight-cell", -1286629833));
  if (cell == null) {
    return null;
  } else {
    var vec__10788 = cell;
    var major = cljs.core.nth.call(null, vec__10788, 0, null);
    var minor = cljs.core.nth.call(null, vec__10788, 1, null);
    var vec__10789 = yinch.canvas_interface.grid__GT_screen.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [major, minor], null));
    var cx = cljs.core.nth.call(null, vec__10789, 0, null);
    var cy = cljs.core.nth.call(null, vec__10789, 1, null);
    var r = yinch.canvas_interface._STAR_tile_size_STAR_ * 2;
    var x1 = cx - r;
    var y1 = cy - r;
    var gradient = yinch.canvas_interface._STAR_ctx_STAR_.createRadialGradient(cx, cy, r, cx, cy, 0);
    gradient.addColorStop(.551, "transparent");
    gradient.addColorStop(.55, "yellow");
    gradient.addColorStop(0, "transparent");
    yinch.canvas_interface._STAR_ctx_STAR_["fillStyle"] = gradient;
    return yinch.canvas_interface._STAR_ctx_STAR_.fillRect(x1, y1, 2 * r, 2 * r);
  }
};
yinch.canvas_interface.init_canvas_BANG_ = function yinch$canvas_interface$init_canvas_BANG_() {
  var G__10791 = arguments.length;
  switch(G__10791) {
    case 1:
      return yinch.canvas_interface.init_canvas_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return yinch.canvas_interface.init_canvas_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
yinch.canvas_interface.init_canvas_BANG_.cljs$core$IFn$_invoke$arity$1 = function(canvas_id) {
  return yinch.canvas_interface.init_canvas_BANG_.call(null, canvas_id, new cljs.core.Keyword(null, "white", "white", -483998618));
};
yinch.canvas_interface.init_canvas_BANG_.cljs$core$IFn$_invoke$arity$2 = function(canvas_id, perspective) {
  var element = document.querySelector(dommy.core.selector.call(null, canvas_id));
  var ctx = element.getContext("2d");
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "element", "element", 1974019749), element, new cljs.core.Keyword(null, "ctx", "ctx", -493610118), ctx, new cljs.core.Keyword(null, "perspective", "perspective", 1459886798), perspective, new cljs.core.Keyword(null, "width", "width", -384071477), 800, new cljs.core.Keyword(null, "height", "height", 1025178622), 600], null);
};
yinch.canvas_interface.init_canvas_BANG_.cljs$lang$maxFixedArity = 2;
yinch.canvas_interface.draw_board_BANG_ = function yinch$canvas_interface$draw_board_BANG_(game, canvas_data, hover_cell) {
  var _STAR_canvas_STAR_10796 = yinch.canvas_interface._STAR_canvas_STAR_;
  var _STAR_ctx_STAR_10797 = yinch.canvas_interface._STAR_ctx_STAR_;
  var _STAR_perspective_STAR_10798 = yinch.canvas_interface._STAR_perspective_STAR_;
  yinch.canvas_interface._STAR_canvas_STAR_ = (new cljs.core.Keyword(null, "element", "element", 1974019749)).cljs$core$IFn$_invoke$arity$1(canvas_data);
  yinch.canvas_interface._STAR_ctx_STAR_ = (new cljs.core.Keyword(null, "ctx", "ctx", -493610118)).cljs$core$IFn$_invoke$arity$1(canvas_data);
  yinch.canvas_interface._STAR_perspective_STAR_ = (new cljs.core.Keyword(null, "perspective", "perspective", 1459886798)).cljs$core$IFn$_invoke$arity$1(canvas_data);
  try {
    yinch.canvas_interface.rect_BANG_.call(null, yinch.canvas_interface.bg_color, 0, 0, yinch.canvas_interface._STAR_canvas_width_STAR_, yinch.canvas_interface._STAR_canvas_height_STAR_);
    yinch.canvas_interface.draw_axis_set_BANG_.call(null, yinch.utils.\u03c0 / 6);
    yinch.canvas_interface.draw_axis_set_BANG_.call(null, -1 * (yinch.utils.\u03c0 / 6));
    yinch.canvas_interface.draw_axis_set_BANG_.call(null, yinch.utils.\u03c0 / 2);
    yinch.canvas_interface.annotate_board_BANG_.call(null);
    yinch.canvas_interface.draw_ring_slots_BANG_.call(null, game);
    yinch.canvas_interface.draw_highlight_BANG_.call(null, game);
    yinch.canvas_interface.draw_pieces_BANG_.call(null, game);
    yinch.canvas_interface.draw_run_marker_BANG_.call(null, game, cljs.core.deref.call(null, hover_cell));
    return yinch.canvas_interface.draw_phase_BANG_.call(null, game);
  } finally {
    yinch.canvas_interface._STAR_perspective_STAR_ = _STAR_perspective_STAR_10798;
    yinch.canvas_interface._STAR_ctx_STAR_ = _STAR_ctx_STAR_10797;
    yinch.canvas_interface._STAR_canvas_STAR_ = _STAR_canvas_STAR_10796;
  }
};
yinch.canvas_interface.consume_state_BANG_ = function yinch$canvas_interface$consume_state_BANG_(canvas_data, game_state, hover_cell) {
  var state_chan = cljs.core.async.chan.call(null);
  var c__8284__auto___10853 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___10853, state_chan) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___10853, state_chan) {
          return function(state_10839) {
            var state_val_10840 = state_10839[1];
            if (state_val_10840 === 1) {
              var state_10839__$1 = state_10839;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10839__$1, 2, state_chan);
            } else {
              if (state_val_10840 === 2) {
                var inst_10827 = state_10839[2];
                var inst_10828 = inst_10827;
                var state_10839__$1 = function() {
                  var statearr_10841 = state_10839;
                  statearr_10841[7] = inst_10828;
                  return statearr_10841;
                }();
                var statearr_10842_10854 = state_10839__$1;
                statearr_10842_10854[2] = null;
                statearr_10842_10854[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10840 === 3) {
                  var inst_10828 = state_10839[7];
                  var inst_10830 = function() {
                    var new_state = inst_10828;
                    return function(new_state, inst_10828, state_val_10840, c__8284__auto___10853, state_chan) {
                      return function(old_state) {
                        return new_state;
                      };
                    }(new_state, inst_10828, state_val_10840, c__8284__auto___10853, state_chan);
                  }();
                  var inst_10831 = cljs.core.swap_BANG_.call(null, game_state, inst_10830);
                  var inst_10832 = yinch.canvas_interface.draw_board_BANG_.call(null, inst_10828, canvas_data, hover_cell);
                  var state_10839__$1 = function() {
                    var statearr_10843 = state_10839;
                    statearr_10843[8] = inst_10831;
                    statearr_10843[9] = inst_10832;
                    return statearr_10843;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10839__$1, 5, state_chan);
                } else {
                  if (state_val_10840 === 4) {
                    var inst_10837 = state_10839[2];
                    var state_10839__$1 = state_10839;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10839__$1, inst_10837);
                  } else {
                    if (state_val_10840 === 5) {
                      var inst_10834 = state_10839[2];
                      var inst_10828 = inst_10834;
                      var state_10839__$1 = function() {
                        var statearr_10844 = state_10839;
                        statearr_10844[7] = inst_10828;
                        return statearr_10844;
                      }();
                      var statearr_10845_10855 = state_10839__$1;
                      statearr_10845_10855[2] = null;
                      statearr_10845_10855[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___10853, state_chan);
        return function(switch__8222__auto__, c__8284__auto___10853, state_chan) {
          return function() {
            var yinch$canvas_interface$consume_state_BANG__$_state_machine__8223__auto__ = null;
            var yinch$canvas_interface$consume_state_BANG__$_state_machine__8223__auto____0 = function() {
              var statearr_10849 = [null, null, null, null, null, null, null, null, null, null];
              statearr_10849[0] = yinch$canvas_interface$consume_state_BANG__$_state_machine__8223__auto__;
              statearr_10849[1] = 1;
              return statearr_10849;
            };
            var yinch$canvas_interface$consume_state_BANG__$_state_machine__8223__auto____1 = function(state_10839) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_10839);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e10850) {
                    if (e10850 instanceof Object) {
                      var ex__8226__auto__ = e10850;
                      var statearr_10851_10856 = state_10839;
                      statearr_10851_10856[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10839);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10850;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10857 = state_10839;
                  state_10839 = G__10857;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            yinch$canvas_interface$consume_state_BANG__$_state_machine__8223__auto__ = function(state_10839) {
              switch(arguments.length) {
                case 0:
                  return yinch$canvas_interface$consume_state_BANG__$_state_machine__8223__auto____0.call(this);
                case 1:
                  return yinch$canvas_interface$consume_state_BANG__$_state_machine__8223__auto____1.call(this, state_10839);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            yinch$canvas_interface$consume_state_BANG__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = yinch$canvas_interface$consume_state_BANG__$_state_machine__8223__auto____0;
            yinch$canvas_interface$consume_state_BANG__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = yinch$canvas_interface$consume_state_BANG__$_state_machine__8223__auto____1;
            return yinch$canvas_interface$consume_state_BANG__$_state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___10853, state_chan);
      }();
      var state__8286__auto__ = function() {
        var statearr_10852 = f__8285__auto__.call(null);
        statearr_10852[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___10853;
        return statearr_10852;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___10853, state_chan));
  return state_chan;
};
yinch.canvas_interface.consume_status_BANG_ = function yinch$canvas_interface$consume_status_BANG_() {
  var status_chan = cljs.core.async.chan.call(null);
  var c__8284__auto___10948 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto___10948, status_chan) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto___10948, status_chan) {
          return function(state_10925) {
            var state_val_10926 = state_10925[1];
            if (state_val_10926 === 7) {
              var inst_10905 = state_10925[7];
              var inst_10908 = (new cljs.core.Keyword(null, "reason", "reason", -2070751759)).cljs$core$IFn$_invoke$arity$1(inst_10905);
              var inst_10909 = alert(inst_10908);
              var state_10925__$1 = state_10925;
              var statearr_10927_10949 = state_10925__$1;
              statearr_10927_10949[2] = inst_10909;
              statearr_10927_10949[1] = 5;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10926 === 1) {
                var state_10925__$1 = state_10925;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10925__$1, 2, status_chan);
              } else {
                if (state_val_10926 === 4) {
                  var inst_10923 = state_10925[2];
                  var state_10925__$1 = state_10925;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10925__$1, inst_10923);
                } else {
                  if (state_val_10926 === 6) {
                    var state_10925__$1 = state_10925;
                    var statearr_10928_10950 = state_10925__$1;
                    statearr_10928_10950[2] = null;
                    statearr_10928_10950[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10926 === 3) {
                      var inst_10905 = state_10925[7];
                      var inst_10916 = (new cljs.core.Keyword(null, "status", "status", -1997798413)).cljs$core$IFn$_invoke$arity$1(inst_10905);
                      var state_10925__$1 = state_10925;
                      var G__10929_10951 = inst_10916 instanceof cljs.core.Keyword ? inst_10916.fqn : null;
                      switch(G__10929_10951) {
                        case "success":
                          var statearr_10930_10953 = state_10925__$1;
                          statearr_10930_10953[1] = 6;
                          break;
                        case "failure":
                          var statearr_10931_10954 = state_10925__$1;
                          statearr_10931_10954[1] = 7;
                          break;
                        case "error":
                          var statearr_10932_10955 = state_10925__$1;
                          statearr_10932_10955[1] = 8;
                          break;
                        default:
                          var statearr_10933_10956 = state_10925__$1;
                          statearr_10933_10956[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10926 === 2) {
                        var inst_10904 = state_10925[2];
                        var inst_10905 = inst_10904;
                        var state_10925__$1 = function() {
                          var statearr_10934 = state_10925;
                          statearr_10934[7] = inst_10905;
                          return statearr_10934;
                        }();
                        var statearr_10935_10957 = state_10925__$1;
                        statearr_10935_10957[2] = null;
                        statearr_10935_10957[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10926 === 9) {
                          var inst_10905 = state_10925[7];
                          var inst_10913 = [cljs.core.str("Unexpected status"), cljs.core.str(inst_10905)].join("");
                          var inst_10914 = function() {
                            throw inst_10913;
                          }();
                          var state_10925__$1 = state_10925;
                          var statearr_10936_10958 = state_10925__$1;
                          statearr_10936_10958[2] = inst_10914;
                          statearr_10936_10958[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10926 === 5) {
                            var inst_10918 = state_10925[2];
                            var state_10925__$1 = function() {
                              var statearr_10937 = state_10925;
                              statearr_10937[8] = inst_10918;
                              return statearr_10937;
                            }();
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10925__$1, 10, status_chan);
                          } else {
                            if (state_val_10926 === 10) {
                              var inst_10920 = state_10925[2];
                              var inst_10905 = inst_10920;
                              var state_10925__$1 = function() {
                                var statearr_10938 = state_10925;
                                statearr_10938[7] = inst_10905;
                                return statearr_10938;
                              }();
                              var statearr_10939_10959 = state_10925__$1;
                              statearr_10939_10959[2] = null;
                              statearr_10939_10959[1] = 3;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10926 === 8) {
                                var inst_10911 = alert("Yo, the programmer messed up real bad.");
                                var state_10925__$1 = state_10925;
                                var statearr_10940_10960 = state_10925__$1;
                                statearr_10940_10960[2] = inst_10911;
                                statearr_10940_10960[1] = 5;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto___10948, status_chan);
        return function(switch__8222__auto__, c__8284__auto___10948, status_chan) {
          return function() {
            var yinch$canvas_interface$consume_status_BANG__$_state_machine__8223__auto__ = null;
            var yinch$canvas_interface$consume_status_BANG__$_state_machine__8223__auto____0 = function() {
              var statearr_10944 = [null, null, null, null, null, null, null, null, null];
              statearr_10944[0] = yinch$canvas_interface$consume_status_BANG__$_state_machine__8223__auto__;
              statearr_10944[1] = 1;
              return statearr_10944;
            };
            var yinch$canvas_interface$consume_status_BANG__$_state_machine__8223__auto____1 = function(state_10925) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_10925);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e10945) {
                    if (e10945 instanceof Object) {
                      var ex__8226__auto__ = e10945;
                      var statearr_10946_10961 = state_10925;
                      statearr_10946_10961[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10925);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e10945;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10962 = state_10925;
                  state_10925 = G__10962;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            yinch$canvas_interface$consume_status_BANG__$_state_machine__8223__auto__ = function(state_10925) {
              switch(arguments.length) {
                case 0:
                  return yinch$canvas_interface$consume_status_BANG__$_state_machine__8223__auto____0.call(this);
                case 1:
                  return yinch$canvas_interface$consume_status_BANG__$_state_machine__8223__auto____1.call(this, state_10925);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            yinch$canvas_interface$consume_status_BANG__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = yinch$canvas_interface$consume_status_BANG__$_state_machine__8223__auto____0;
            yinch$canvas_interface$consume_status_BANG__$_state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = yinch$canvas_interface$consume_status_BANG__$_state_machine__8223__auto____1;
            return yinch$canvas_interface$consume_status_BANG__$_state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto___10948, status_chan);
      }();
      var state__8286__auto__ = function() {
        var statearr_10947 = f__8285__auto__.call(null);
        statearr_10947[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto___10948;
        return statearr_10947;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto___10948, status_chan));
  return status_chan;
};
yinch.canvas_interface.pump_interaction_BANG_ = function yinch$canvas_interface$pump_interaction_BANG_(canvas_data, game_state) {
  var interaction_chan = cljs.core.async.chan.call(null);
  dommy.core.listen_BANG_.call(null, (new cljs.core.Keyword(null, "element", "element", 1974019749)).cljs$core$IFn$_invoke$arity$1(canvas_data), new cljs.core.Keyword(null, "click", "click", 1912301393), function(interaction_chan) {
    return function(e) {
      var x = e["layerX"];
      var y = e["layerY"];
      var vec__10964 = yinch.canvas_interface.screen__GT_grid.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, y], null));
      var major = cljs.core.nth.call(null, vec__10964, 0, null);
      var minor = cljs.core.nth.call(null, vec__10964, 1, null);
      var player = (new cljs.core.Keyword(null, "turn", "turn", 75759344)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, game_state));
      return cljs.core.async.put_BANG_.call(null, interaction_chan, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "grid-click", "grid-click", 1849433699), new cljs.core.Keyword(null, "click-info", "click-info", 1742344538), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [player, major, minor], null)], null));
    };
  }(interaction_chan));
  return interaction_chan;
};
yinch.canvas_interface.bind_internal_handlers_BANG_ = function yinch$canvas_interface$bind_internal_handlers_BANG_(canvas_data, game_state, hover_cell) {
  dommy.core.listen_BANG_.call(null, (new cljs.core.Keyword(null, "element", "element", 1974019749)).cljs$core$IFn$_invoke$arity$1(canvas_data), new cljs.core.Keyword(null, "keydown", "keydown", -629268186), function(e) {
    var G__10966 = e["keyCode"];
    switch(G__10966) {
      case 68:
        return cljs.core.print.call(null, yinch.game.urlize.call(null, cljs.core.deref.call(null, game_state)));
        break;
      case 83:
        return cljs.core.print.call(null, yinch.game.game__GT_script.call(null, cljs.core.deref.call(null, game_state)));
        break;
      default:
        return null;
    }
  });
  return dommy.core.listen_BANG_.call(null, (new cljs.core.Keyword(null, "element", "element", 1974019749)).cljs$core$IFn$_invoke$arity$1(canvas_data), new cljs.core.Keyword(null, "mousemove", "mousemove", -1077794734), function(e) {
    var x = e["layerX"];
    var y = e["layerY"];
    var cell = yinch.canvas_interface.screen__GT_grid.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, y], null));
    var old_val = cljs.core.deref.call(null, hover_cell);
    var new_val = cljs.core.swap_BANG_.call(null, hover_cell, cljs.core.constantly.call(null, cell));
    if (cljs.core.not_EQ_.call(null, new_val, old_val) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "phase", "phase", 575722892)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, game_state)), new cljs.core.Keyword(null, "run-pick", "run-pick", -1842216705))) {
      return yinch.canvas_interface.draw_board_BANG_.call(null, cljs.core.deref.call(null, game_state), canvas_data, hover_cell);
    } else {
      return null;
    }
  });
};
yinch.canvas_interface.start_rendering_BANG_ = function yinch$canvas_interface$start_rendering_BANG_(canvas_selector) {
  var canvas_data = yinch.canvas_interface.init_canvas_BANG_.call(null, canvas_selector);
  var game_state = cljs.core.atom.call(null, null);
  var hover_cell = cljs.core.atom.call(null, null);
  var state_chan = yinch.canvas_interface.consume_state_BANG_.call(null, canvas_data, game_state, hover_cell);
  var status_chan = yinch.canvas_interface.consume_status_BANG_.call(null);
  var interaction_chan = yinch.canvas_interface.pump_interaction_BANG_.call(null, canvas_data, game_state);
  yinch.canvas_interface.bind_internal_handlers_BANG_.call(null, canvas_data, game_state, hover_cell);
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [state_chan, status_chan, interaction_chan], null);
};
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!body && !docEl) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.devicePixelRatio_;
goog.dom.getPixelRatio = goog.functions.cacheReturnValue(function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
});
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception, goog.debug.Logger.prototype.log));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception, opt_fnStackContext) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    var context;
    if (goog.STRICT_MODE_COMPATIBLE) {
      context = opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord;
    } else {
      context = opt_fnStackContext || arguments.callee.caller;
    }
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.xpc");
goog.provide("goog.net.xpc.CfgFields");
goog.provide("goog.net.xpc.ChannelStates");
goog.provide("goog.net.xpc.TransportNames");
goog.provide("goog.net.xpc.TransportTypes");
goog.provide("goog.net.xpc.UriCfgFields");
goog.require("goog.log");
goog.net.xpc.TransportTypes = {NATIVE_MESSAGING:1, FRAME_ELEMENT_METHOD:2, IFRAME_RELAY:3, IFRAME_POLLING:4, FLASH:5, NIX:6, DIRECT:7};
goog.net.xpc.TransportNames = {1:"NativeMessagingTransport", 2:"FrameElementMethodTransport", 3:"IframeRelayTransport", 4:"IframePollingTransport", 5:"FlashTransport", 6:"NixTransport", 7:"DirectTransport"};
goog.net.xpc.CfgFields = {CHANNEL_NAME:"cn", AUTH_TOKEN:"at", REMOTE_AUTH_TOKEN:"rat", PEER_URI:"pu", IFRAME_ID:"ifrid", TRANSPORT:"tp", LOCAL_RELAY_URI:"lru", PEER_RELAY_URI:"pru", LOCAL_POLL_URI:"lpu", PEER_POLL_URI:"ppu", PEER_HOSTNAME:"ph", ONE_SIDED_HANDSHAKE:"osh", ROLE:"role", NATIVE_TRANSPORT_PROTOCOL_VERSION:"nativeProtocolVersion", DIRECT_TRANSPORT_SYNC_MODE:"directSyncMode"};
goog.net.xpc.UriCfgFields = [goog.net.xpc.CfgFields.PEER_URI, goog.net.xpc.CfgFields.LOCAL_RELAY_URI, goog.net.xpc.CfgFields.PEER_RELAY_URI, goog.net.xpc.CfgFields.LOCAL_POLL_URI, goog.net.xpc.CfgFields.PEER_POLL_URI];
goog.net.xpc.ChannelStates = {NOT_CONNECTED:1, CONNECTED:2, CLOSED:3};
goog.net.xpc.TRANSPORT_SERVICE_ = "tp";
goog.net.xpc.SETUP = "SETUP";
goog.net.xpc.SETUP_NTPV2 = "SETUP_NTPV2";
goog.net.xpc.SETUP_ACK_ = "SETUP_ACK";
goog.net.xpc.SETUP_ACK_NTPV2 = "SETUP_ACK_NTPV2";
goog.net.xpc.channels = {};
goog.net.xpc.getRandomString = function(length, opt_characters) {
  var chars = opt_characters || goog.net.xpc.randomStringCharacters_;
  var charsLength = chars.length;
  var s = "";
  while (length-- > 0) {
    s += chars.charAt(Math.floor(Math.random() * charsLength));
  }
  return s;
};
goog.net.xpc.randomStringCharacters_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
goog.net.xpc.logger = goog.log.getLogger("goog.net.xpc");
goog.provide("goog.net.xpc.CrossPageChannelRole");
goog.net.xpc.CrossPageChannelRole = {OUTER:0, INNER:1};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.net.xpc.Transport");
goog.require("goog.Disposable");
goog.require("goog.dom");
goog.require("goog.net.xpc.TransportNames");
goog.net.xpc.Transport = function(opt_domHelper) {
  goog.Disposable.call(this);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
};
goog.inherits(goog.net.xpc.Transport, goog.Disposable);
goog.net.xpc.Transport.prototype.transportType = 0;
goog.net.xpc.Transport.prototype.getType = function() {
  return this.transportType;
};
goog.net.xpc.Transport.prototype.getWindow = function() {
  return this.domHelper_.getWindow();
};
goog.net.xpc.Transport.prototype.getName = function() {
  return goog.net.xpc.TransportNames[this.transportType] || "";
};
goog.net.xpc.Transport.prototype.transportServiceHandler = goog.abstractMethod;
goog.net.xpc.Transport.prototype.connect = goog.abstractMethod;
goog.net.xpc.Transport.prototype.send = goog.abstractMethod;
goog.provide("goog.net.xpc.IframePollingTransport");
goog.provide("goog.net.xpc.IframePollingTransport.Receiver");
goog.provide("goog.net.xpc.IframePollingTransport.Sender");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.userAgent");
goog.net.xpc.IframePollingTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframePollingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.sendUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_POLL_URI];
  this.rcvUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  this.sendQueue_ = [];
};
goog.inherits(goog.net.xpc.IframePollingTransport, goog.net.xpc.Transport);
goog.net.xpc.IframePollingTransport.prototype.pollsBeforeReconnect_ = 5;
goog.net.xpc.IframePollingTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
goog.net.xpc.IframePollingTransport.prototype.sequence_ = 0;
goog.net.xpc.IframePollingTransport.prototype.waitForAck_ = false;
goog.net.xpc.IframePollingTransport.prototype.initialized_ = false;
goog.net.xpc.IframePollingTransport.prototype.reconnectFrame_ = null;
goog.net.xpc.IframePollingTransport.IFRAME_PREFIX = "googlexpc";
goog.net.xpc.IframePollingTransport.prototype.getMsgFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_msg";
};
goog.net.xpc.IframePollingTransport.prototype.getAckFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_ack";
};
goog.net.xpc.IframePollingTransport.prototype.isChannelAvailable = function() {
  return!this.isDisposed() && this.channel_.isPeerAvailable();
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrames_ = function() {
  try {
    if (this.isChannelAvailable()) {
      return this.channel_.getPeerWindowObject().frames || {};
    }
  } catch (e) {
    goog.log.fine(goog.net.xpc.logger, "error retrieving peer frames");
  }
  return{};
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrame_ = function(frameName) {
  return this.getPeerFrames_()[frameName];
};
goog.net.xpc.IframePollingTransport.prototype.connect = function() {
  if (!this.isChannelAvailable()) {
    return;
  }
  goog.log.fine(goog.net.xpc.logger, "transport connect called");
  if (!this.initialized_) {
    goog.log.fine(goog.net.xpc.logger, "initializing...");
    this.constructSenderFrames_();
    this.initialized_ = true;
  }
  this.checkForeignFramesReady_();
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrames_ = function() {
  var name = this.getMsgFrameName_();
  this.msgIframeElm_ = this.constructSenderFrame_(name);
  this.msgWinObj_ = this.getWindow().frames[name];
  name = this.getAckFrameName_();
  this.ackIframeElm_ = this.constructSenderFrame_(name);
  this.ackWinObj_ = this.getWindow().frames[name];
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrame_ = function(id) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "constructing sender frame: " + id);
  var ifr = goog.dom.createElement("iframe");
  var s = ifr.style;
  s.position = "absolute";
  s.top = "-10px";
  s.left = "10px";
  s.width = "1px";
  s.height = "1px";
  ifr.id = ifr.name = id;
  ifr.src = this.sendUri_ + "#INITIAL";
  this.getWindow().document.body.appendChild(ifr);
  return ifr;
};
goog.net.xpc.IframePollingTransport.prototype.maybeInnerPeerReconnect_ = function() {
  if (this.reconnectFrame_ || this.pollsBeforeReconnect_-- > 0) {
    return;
  }
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "Inner peer reconnect triggered.");
  this.channel_.updateChannelNameAndCatalog(goog.net.xpc.getRandomString(10));
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "switching channels: " + this.channel_.name);
  this.deconstructSenderFrames_();
  this.initialized_ = false;
  this.reconnectFrame_ = this.constructSenderFrame_(goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_reconnect_" + this.channel_.name);
};
goog.net.xpc.IframePollingTransport.prototype.outerPeerReconnect_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "outerPeerReconnect called");
  var frames = this.getPeerFrames_();
  var length = frames.length;
  for (var i = 0;i < length;i++) {
    var frameName;
    try {
      if (frames[i] && frames[i].name) {
        frameName = frames[i].name;
      }
    } catch (e) {
    }
    if (!frameName) {
      continue;
    }
    var message = frameName.split("_");
    if (message.length == 3 && message[0] == goog.net.xpc.IframePollingTransport.IFRAME_PREFIX && message[1] == "reconnect") {
      this.channel_.name = message[2];
      this.deconstructSenderFrames_();
      this.initialized_ = false;
      break;
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.deconstructSenderFrames_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "deconstructSenderFrames called");
  if (this.msgIframeElm_) {
    this.msgIframeElm_.parentNode.removeChild(this.msgIframeElm_);
    this.msgIframeElm_ = null;
    this.msgWinObj_ = null;
  }
  if (this.ackIframeElm_) {
    this.ackIframeElm_.parentNode.removeChild(this.ackIframeElm_);
    this.ackIframeElm_ = null;
    this.ackWinObj_ = null;
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkForeignFramesReady_ = function() {
  if (!(this.isRcvFrameReady_(this.getMsgFrameName_()) && this.isRcvFrameReady_(this.getAckFrameName_()))) {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "foreign frames not (yet) present");
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.maybeInnerPeerReconnect_();
    } else {
      if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
        this.outerPeerReconnect_();
      }
    }
    this.getWindow().setTimeout(goog.bind(this.connect, this), 100);
  } else {
    goog.log.fine(goog.net.xpc.logger, "foreign frames present");
    this.msgReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getMsgFrameName_()), goog.bind(this.processIncomingMsg, this));
    this.ackReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getAckFrameName_()), goog.bind(this.processIncomingAck, this));
    this.checkLocalFramesPresent_();
  }
};
goog.net.xpc.IframePollingTransport.prototype.isRcvFrameReady_ = function(frameName) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking for receive frame: " + frameName);
  try {
    var winObj = this.getPeerFrame_(frameName);
    if (!winObj || winObj.location.href.indexOf(this.rcvUri_) != 0) {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
};
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresent_ = function() {
  var frames = this.getPeerFrames_();
  if (!(frames[this.getAckFrameName_()] && frames[this.getMsgFrameName_()])) {
    if (!this.checkLocalFramesPresentCb_) {
      this.checkLocalFramesPresentCb_ = goog.bind(this.checkLocalFramesPresent_, this);
    }
    this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);
    goog.log.fine(goog.net.xpc.logger, "local frames not (yet) present");
  } else {
    this.msgSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.msgWinObj_);
    this.ackSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.ackWinObj_);
    goog.log.fine(goog.net.xpc.logger, "local frames ready");
    this.getWindow().setTimeout(goog.bind(function() {
      this.msgSender_.send(goog.net.xpc.SETUP);
      this.sentConnectionSetup_ = true;
      this.waitForAck_ = true;
      goog.log.fine(goog.net.xpc.logger, "SETUP sent");
    }, this), 100);
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkIfConnected_ = function() {
  if (this.sentConnectionSetupAck_ && this.rcvdConnectionSetupAck_) {
    this.channel_.notifyConnected();
    if (this.deliveryQueue_) {
      goog.log.fine(goog.net.xpc.logger, "delivering queued messages " + "(" + this.deliveryQueue_.length + ")");
      for (var i = 0, m;i < this.deliveryQueue_.length;i++) {
        m = this.deliveryQueue_[i];
        this.channel_.xpcDeliver(m.service, m.payload);
      }
      delete this.deliveryQueue_;
    }
  } else {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking if connected: " + "ack sent:" + this.sentConnectionSetupAck_ + ", ack rcvd: " + this.rcvdConnectionSetupAck_);
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingMsg = function(raw) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg received: " + raw);
  if (raw == goog.net.xpc.SETUP) {
    if (!this.ackSender_) {
      return;
    }
    this.ackSender_.send(goog.net.xpc.SETUP_ACK_);
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "SETUP_ACK sent");
    this.sentConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected() || this.sentConnectionSetupAck_) {
      var pos = raw.indexOf("|");
      var head = raw.substring(0, pos);
      var frame = raw.substring(pos + 1);
      pos = head.indexOf(",");
      if (pos == -1) {
        var seq = head;
        this.ackSender_.send("ACK:" + seq);
        this.deliverPayload_(frame);
      } else {
        var seq = head.substring(0, pos);
        this.ackSender_.send("ACK:" + seq);
        var partInfo = head.substring(pos + 1).split("/");
        var part0 = parseInt(partInfo[0], 10);
        var part1 = parseInt(partInfo[1], 10);
        if (part0 == 1) {
          this.parts_ = [];
        }
        this.parts_.push(frame);
        if (part0 == part1) {
          this.deliverPayload_(this.parts_.join(""));
          delete this.parts_;
        }
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received msg, but channel is not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingAck = function(msgStr) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "ack received: " + msgStr);
  if (msgStr == goog.net.xpc.SETUP_ACK_) {
    this.waitForAck_ = false;
    this.rcvdConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected()) {
      if (!this.waitForAck_) {
        goog.log.warning(goog.net.xpc.logger, "got unexpected ack");
        return;
      }
      var seq = parseInt(msgStr.split(":")[1], 10);
      if (seq == this.sequence_) {
        this.waitForAck_ = false;
        this.sendNextFrame_();
      } else {
        goog.log.warning(goog.net.xpc.logger, "got ack with wrong sequence");
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received ack, but channel not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.sendNextFrame_ = function() {
  if (this.waitForAck_ || !this.sendQueue_.length) {
    return;
  }
  var s = this.sendQueue_.shift();
  ++this.sequence_;
  this.msgSender_.send(this.sequence_ + s);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + this.sequence_ + s);
  this.waitForAck_ = true;
};
goog.net.xpc.IframePollingTransport.prototype.deliverPayload_ = function(s) {
  var pos = s.indexOf(":");
  var service = s.substr(0, pos);
  var payload = s.substring(pos + 1);
  if (!this.channel_.isConnected()) {
    (this.deliveryQueue_ || (this.deliveryQueue_ = [])).push({service:service, payload:payload});
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "queued delivery");
  } else {
    this.channel_.xpcDeliver(service, payload);
  }
};
goog.net.xpc.IframePollingTransport.prototype.MAX_FRAME_LENGTH_ = 3800;
goog.net.xpc.IframePollingTransport.prototype.send = function(service, payload) {
  var frame = service + ":" + payload;
  if (!goog.userAgent.IE || payload.length <= this.MAX_FRAME_LENGTH_) {
    this.sendQueue_.push("|" + frame);
  } else {
    var l = payload.length;
    var num = Math.ceil(l / this.MAX_FRAME_LENGTH_);
    var pos = 0;
    var i = 1;
    while (pos < l) {
      this.sendQueue_.push("," + i + "/" + num + "|" + frame.substr(pos, this.MAX_FRAME_LENGTH_));
      i++;
      pos += this.MAX_FRAME_LENGTH_;
    }
  }
  this.sendNextFrame_();
};
goog.net.xpc.IframePollingTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframePollingTransport.base(this, "disposeInternal");
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  goog.array.remove(receivers, this.msgReceiver_);
  goog.array.remove(receivers, this.ackReceiver_);
  this.msgReceiver_ = this.ackReceiver_ = null;
  goog.dom.removeNode(this.msgIframeElm_);
  goog.dom.removeNode(this.ackIframeElm_);
  this.msgIframeElm_ = this.ackIframeElm_ = null;
  this.msgWinObj_ = this.ackWinObj_ = null;
};
goog.net.xpc.IframePollingTransport.receivers_ = [];
goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ = 10;
goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_ = 100;
goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ = 1E3;
goog.net.xpc.IframePollingTransport.receive_ = function() {
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  var receiver;
  var rcvd = false;
  try {
    for (var i = 0;receiver = receivers[i];i++) {
      rcvd = rcvd || receiver.receive();
    }
  } catch (e) {
    goog.log.info(goog.net.xpc.logger, "receive_() failed: " + e);
    receiver.transport_.channel_.notifyTransportError();
    if (!receivers.length) {
      return;
    }
  }
  var now = goog.now();
  if (rcvd) {
    goog.net.xpc.IframePollingTransport.lastActivity_ = now;
  }
  var t = now - goog.net.xpc.IframePollingTransport.lastActivity_ < goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ ? goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ : goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_;
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t);
};
goog.net.xpc.IframePollingTransport.receiveCb_ = goog.bind(goog.net.xpc.IframePollingTransport.receive_, goog.net.xpc.IframePollingTransport);
goog.net.xpc.IframePollingTransport.startRcvTimer_ = function() {
  goog.log.fine(goog.net.xpc.logger, "starting receive-timer");
  goog.net.xpc.IframePollingTransport.lastActivity_ = goog.now();
  if (goog.net.xpc.IframePollingTransport.rcvTimer_) {
    window.clearTimeout(goog.net.xpc.IframePollingTransport.rcvTimer_);
  }
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_);
};
goog.net.xpc.IframePollingTransport.Sender = function(url, windowObj) {
  this.sendUri_ = url;
  this.sendFrame_ = windowObj;
  this.cycle_ = 0;
};
goog.net.xpc.IframePollingTransport.Sender.prototype.send = function(payload) {
  this.cycle_ = ++this.cycle_ % 2;
  var url = this.sendUri_ + "#" + this.cycle_ + encodeURIComponent(payload);
  try {
    if (goog.userAgent.WEBKIT) {
      this.sendFrame_.location.href = url;
    } else {
      this.sendFrame_.location.replace(url);
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "sending failed", e);
  }
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver = function(transport, windowObj, callback) {
  this.transport_ = transport;
  this.rcvFrame_ = windowObj;
  this.cb_ = callback;
  this.currentLoc_ = this.rcvFrame_.location.href.split("#")[0] + "#INITIAL";
  goog.net.xpc.IframePollingTransport.receivers_.push(this);
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver.prototype.receive = function() {
  var loc = this.rcvFrame_.location.href;
  if (loc != this.currentLoc_) {
    this.currentLoc_ = loc;
    var payload = loc.split("#")[1];
    if (payload) {
      payload = payload.substr(1);
      this.cb_(decodeURIComponent(payload));
    }
    return true;
  } else {
    return false;
  }
};
goog.provide("goog.dom.tags");
goog.require("goog.object");
goog.dom.tags.VOID_TAGS_ = goog.object.createSet(("area,base,br,col,command," + "embed,hr,img,input,keygen,link,meta,param,source,track,wbr").split(","));
goog.dom.tags.isVoidTag = function(tagName) {
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};
goog.provide("goog.string.TypedString");
goog.string.TypedString = function() {
};
goog.string.TypedString.prototype.implementsGoogStringTypedString;
goog.string.TypedString.prototype.getTypedStringValue;
goog.provide("goog.string.Const");
goog.require("goog.asserts");
goog.require("goog.string.TypedString");
goog.string.Const = function() {
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = "";
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = true;
goog.string.Const.prototype.getTypedStringValue = function() {
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
goog.string.Const.prototype.toString = function() {
  return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
};
goog.string.Const.unwrap = function(stringConst) {
  if (stringConst instanceof goog.string.Const && stringConst.constructor === goog.string.Const && stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) {
    return stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail("expected object of type Const, got '" + stringConst + "'");
    return "type_error:Const";
  }
};
goog.string.Const.from = function(s) {
  return goog.string.Const.create__googStringSecurityPrivate_(s);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.create__googStringSecurityPrivate_ = function(s) {
  var stringConst = new goog.string.Const;
  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = s;
  return stringConst;
};
goog.provide("goog.html.SafeStyle");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyle = function() {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function(style) {
  var styleString = goog.string.Const.unwrap(style);
  if (styleString.length === 0) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(styleString);
  goog.asserts.assert(goog.string.endsWith(styleString, ";"), "Last character of style string is not ';': " + styleString);
  goog.asserts.assert(goog.string.contains(styleString, ":"), "Style string must contain at least one ':', to " + 'specify a "name: value" pair: ' + styleString);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);
};
goog.html.SafeStyle.checkStyle_ = function(style) {
  goog.asserts.assert(!/[<>]/.test(style), "Forbidden characters in style string: " + style);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyle.prototype.toString = function() {
    return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
  };
}
goog.html.SafeStyle.unwrap = function(safeStyle) {
  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle && safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyle, got '" + safeStyle + "'");
    return "type_error:SafeStyle";
  }
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {
  var safeStyle = new goog.html.SafeStyle;
  safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
  return safeStyle;
};
goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
goog.html.SafeStyle.PropertyMap;
goog.html.SafeStyle.create = function(map) {
  var style = "";
  for (var name in map) {
    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
      throw Error("Name allows only [-_a-zA-Z0-9], got: " + name);
    }
    var value = map[name];
    if (value == null) {
      continue;
    }
    if (value instanceof goog.string.Const) {
      value = goog.string.Const.unwrap(value);
      goog.asserts.assert(!/[{;}]/.test(value), "Value does not allow [{;}].");
    } else {
      if (!goog.html.SafeStyle.VALUE_RE_.test(value)) {
        goog.asserts.fail("String value allows only [-.%_!# a-zA-Z0-9], got: " + value);
        value = goog.html.SafeStyle.INNOCUOUS_STRING;
      }
    }
    style += name + ":" + value + ";";
  }
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(style);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.SafeStyle.VALUE_RE_ = /^[-.%_!# a-zA-Z0-9]+$/;
goog.html.SafeStyle.concat = function(var_args) {
  var style = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      style += goog.html.SafeStyle.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.provide("goog.i18n.bidi");
goog.provide("goog.i18n.bidi.Dir");
goog.provide("goog.i18n.bidi.DirectionalString");
goog.provide("goog.i18n.bidi.Format");
goog.define("goog.i18n.bidi.FORCE_RTL", false);
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 
2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || goog.LOCALE.length >= 3 && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_");
goog.i18n.bidi.Format = {LRE:"\u202a", RLE:"\u202b", PDF:"\u202c", LRM:"\u200e", RLM:"\u200f"};
goog.i18n.bidi.Dir = {LTR:1, RTL:-1, NEUTRAL:0, UNKNOWN:0};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {
  if (typeof givenDir == "number") {
    return givenDir > 0 ? goog.i18n.bidi.Dir.LTR : givenDir < 0 ? goog.i18n.bidi.Dir.RTL : opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
  } else {
    if (givenDir == null) {
      return null;
    } else {
      return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    }
  }
};
goog.i18n.bidi.ltrChars_ = "A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff" + "\u200e\u2c00-\ufb1c\ufe00-\ufe6f\ufefd-\uffff";
goog.i18n.bidi.rtlChars_ = "\u0591-\u07ff\u200f\ufb1d-\ufdff\ufe70-\ufefc";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, "") : str;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str);
};
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str);
};
goog.i18n.bidi.isNeutralChar = function(str) {
  return!goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) || !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = new RegExp("^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|" + ".*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))" + "(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)", "i");
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};
goog.i18n.bidi.bracketGuardHtmlRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(&lt;.*?(&gt;)+)/g;
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInHtml = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  if (useRtl) {
    return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3drtl\x3e$\x26\x3c/span\x3e");
  }
  return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3dltr\x3e$\x26\x3c/span\x3e");
};
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  var mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + "$\x26" + mark);
};
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3drtl");
  }
  return "\n\x3cspan dir\x3drtl\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3dltr");
  }
  return "\n\x3cspan dir\x3dltr\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1\u05f4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1\u05f3");
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /\d/;
goog.i18n.bidi.rtlDetectionThreshold_ = .4;
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  var rtlCount = 0;
  var totalCount = 0;
  var hasWeaklyLtr = false;
  var tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).split(goog.i18n.bidi.wordSeparatorRe_);
  for (var i = 0;i < tokens.length;i++) {
    var token = tokens[i];
    if (goog.i18n.bidi.startsWithRtl(token)) {
      rtlCount++;
      totalCount++;
    } else {
      if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
        hasWeaklyLtr = true;
      } else {
        if (goog.i18n.bidi.hasAnyLtr(token)) {
          totalCount++;
        } else {
          if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
            hasWeaklyLtr = true;
          }
        }
      }
    }
  }
  return totalCount == 0 ? hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) == goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if (element) {
    dir = goog.i18n.bidi.toDir(dir);
    if (dir) {
      element.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
      element.dir = dir == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr";
    }
  }
};
goog.i18n.bidi.DirectionalString = function() {
};
goog.i18n.bidi.DirectionalString.prototype.implementsGoogI18nBidiDirectionalString;
goog.i18n.bidi.DirectionalString.prototype.getDirection;
goog.provide("goog.html.SafeUrl");
goog.require("goog.asserts");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeUrl = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.SafeUrl.prototype.toString = function() {
    return "SafeUrl{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeUrl.unwrap = function(safeUrl) {
  if (safeUrl instanceof goog.html.SafeUrl && safeUrl.constructor === goog.html.SafeUrl && safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeUrl, got '" + safeUrl + "'");
    return "type_error:SafeUrl";
  }
};
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto):|[^&:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else {
    if (url.implementsGoogStringTypedString) {
      url = url.getTypedStringValue();
    } else {
      url = String(url);
    }
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  } else {
    url = goog.html.SafeUrl.normalize_(url);
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.normalize_ = function(url) {
  try {
    var normalized = encodeURI(url);
  } catch (e) {
    return goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return normalized.replace(goog.html.SafeUrl.NORMALIZE_MATCHER_, function(match) {
    return goog.html.SafeUrl.NORMALIZE_REPLACER_MAP_[match];
  });
};
goog.html.SafeUrl.NORMALIZE_MATCHER_ = /[()']|%5B|%5D|%25/g;
goog.html.SafeUrl.NORMALIZE_REPLACER_MAP_ = {"'":"%27", "(":"%28", ")":"%29", "%5B":"[", "%5D":"]", "%25":"%"};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var safeUrl = new goog.html.SafeUrl;
  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
  return safeUrl;
};
goog.provide("goog.html.SafeHtml");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.tags");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeUrl");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeHtml = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
  this.dir_ = null;
};
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeHtml.prototype.getDirection = function() {
  return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeHtml.prototype.toString = function() {
    return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeHtml.unwrap = function(safeHtml) {
  if (safeHtml instanceof goog.html.SafeHtml && safeHtml.constructor === goog.html.SafeHtml && safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeHtml, got '" + safeHtml + "'");
    return "type_error:SafeHtml";
  }
};
goog.html.SafeHtml.TextOrHtml_;
goog.html.SafeHtml.htmlEscape = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var dir = null;
  if (textOrHtml.implementsGoogI18nBidiDirectionalString) {
    dir = textOrHtml.getDirection();
  }
  var textAsString;
  if (textOrHtml.implementsGoogStringTypedString) {
    textAsString = textOrHtml.getTypedStringValue();
  } else {
    textAsString = String(textOrHtml);
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.htmlEscape(textAsString), dir);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet("action", "cite", "data", "formaction", "href", "manifest", "poster", "src");
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet("link", "script", "style");
goog.html.SafeHtml.AttributeValue_;
goog.html.SafeHtml.create = function(tagName, opt_attributes, opt_content) {
  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
    throw Error("Invalid tag name \x3c" + tagName + "\x3e.");
  }
  if (tagName.toLowerCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
    throw Error("Tag name \x3c" + tagName + "\x3e is not allowed for SafeHtml.");
  }
  var dir = null;
  var result = "\x3c" + tagName;
  if (opt_attributes) {
    for (var name in opt_attributes) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
        throw Error('Invalid attribute name "' + name + '".');
      }
      var value = opt_attributes[name];
      if (value == null) {
        continue;
      }
      if (value instanceof goog.string.Const) {
        value = goog.string.Const.unwrap(value);
      } else {
        if (name.toLowerCase() == "style") {
          value = goog.html.SafeHtml.getStyleValue_(value);
        } else {
          if (/^on/i.test(name)) {
            throw Error('Attribute "' + name + '" requires goog.string.Const value, "' + value + '" given.');
          } else {
            if (value instanceof goog.html.SafeUrl) {
              value = goog.html.SafeUrl.unwrap(value);
            } else {
              if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
                throw Error('Attribute "' + name + '" requires goog.string.Const or goog.html.SafeUrl value, "' + value + '" given.');
              }
            }
          }
        }
      }
      goog.asserts.assert(goog.isString(value) || goog.isNumber(value), "String or number value expected, got " + typeof value + " with value: " + value);
      result += " " + name + '\x3d"' + goog.string.htmlEscape(String(value)) + '"';
    }
  }
  var content = opt_content;
  if (!goog.isDef(content)) {
    content = [];
  } else {
    if (!goog.isArray(content)) {
      content = [content];
    }
  }
  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
    goog.asserts.assert(!content.length, "Void tag \x3c" + tagName + "\x3e does not allow content.");
    result += "\x3e";
  } else {
    var html = goog.html.SafeHtml.concat(content);
    result += "\x3e" + goog.html.SafeHtml.unwrap(html) + "\x3c/" + tagName + "\x3e";
    dir = html.getDirection();
  }
  var dirAttribute = opt_attributes && opt_attributes["dir"];
  if (dirAttribute) {
    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
      dir = goog.i18n.bidi.Dir.NEUTRAL;
    } else {
      dir = null;
    }
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);
};
goog.html.SafeHtml.getStyleValue_ = function(value) {
  if (!goog.isObject(value)) {
    throw Error('The "style" attribute requires goog.html.SafeStyle or map ' + "of style properties, " + typeof value + " given: " + value);
  }
  if (!(value instanceof goog.html.SafeStyle)) {
    value = goog.html.SafeStyle.create(value);
  }
  return goog.html.SafeStyle.unwrap(value);
};
goog.html.SafeHtml.createWithDir = function(dir, tagName, opt_attributes, opt_content) {
  var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.concat = function(var_args) {
  var dir = goog.i18n.bidi.Dir.NEUTRAL;
  var content = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      var html = goog.html.SafeHtml.htmlEscape(argument);
      content += goog.html.SafeHtml.unwrap(html);
      var htmlDir = html.getDirection();
      if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
        dir = htmlDir;
      } else {
        if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
          dir = null;
        }
      }
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, dir);
};
goog.html.SafeHtml.concatWithDir = function(dir, var_args) {
  var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(html, dir) {
  var safeHtml = new goog.html.SafeHtml;
  safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = html;
  safeHtml.dir_ = dir;
  return safeHtml;
};
goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
goog.provide("goog.dom.safe");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.dom.safe.setInnerHtml = function(elem, html) {
  elem.innerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setOuterHtml = function(elem, html) {
  elem.outerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.documentWrite = function(doc, html) {
  doc.write(goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setAnchorHref = function(anchor, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setLocationHref = function(loc, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.Thenable");
goog.Thenable = function() {
};
goog.Thenable.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
};
goog.Thenable.IMPLEMENTED_BY_PROP = "$goog_Thenable";
goog.Thenable.addImplementation = function(ctor) {
  goog.exportProperty(ctor.prototype, "then", ctor.prototype.then);
  if (COMPILED) {
    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
  } else {
    ctor.prototype.$goog_Thenable = true;
  }
};
goog.Thenable.isImplementedBy = function(object) {
  if (!object) {
    return false;
  }
  try {
    if (COMPILED) {
      return!!object[goog.Thenable.IMPLEMENTED_BY_PROP];
    }
    return!!object.$goog_Thenable;
  } catch (e) {
    return false;
  }
};
goog.provide("goog.testing.watchers");
goog.testing.watchers.resetWatchers_ = [];
goog.testing.watchers.signalClockReset = function() {
  var watchers = goog.testing.watchers.resetWatchers_;
  for (var i = 0;i < watchers.length;i++) {
    goog.testing.watchers.resetWatchers_[i]();
  }
};
goog.testing.watchers.watchClockReset = function(fn) {
  goog.testing.watchers.resetWatchers_.push(fn);
};
goog.provide("goog.async.run");
goog.require("goog.async.nextTick");
goog.require("goog.async.throwException");
goog.require("goog.testing.watchers");
goog.async.run = function(callback, opt_context) {
  if (!goog.async.run.schedule_) {
    goog.async.run.initializeRunner_();
  }
  if (!goog.async.run.workQueueScheduled_) {
    goog.async.run.schedule_();
    goog.async.run.workQueueScheduled_ = true;
  }
  goog.async.run.workQueue_.push(new goog.async.run.WorkItem_(callback, opt_context));
};
goog.async.run.initializeRunner_ = function() {
  if (goog.global.Promise && goog.global.Promise.resolve) {
    var promise = goog.global.Promise.resolve();
    goog.async.run.schedule_ = function() {
      promise.then(goog.async.run.processWorkQueue);
    };
  } else {
    goog.async.run.schedule_ = function() {
      goog.async.nextTick(goog.async.run.processWorkQueue);
    };
  }
};
goog.async.run.forceNextTick = function() {
  goog.async.run.schedule_ = function() {
    goog.async.nextTick(goog.async.run.processWorkQueue);
  };
};
goog.async.run.schedule_;
goog.async.run.workQueueScheduled_ = false;
goog.async.run.workQueue_ = [];
if (goog.DEBUG) {
  goog.async.run.resetQueue_ = function() {
    goog.async.run.workQueueScheduled_ = false;
    goog.async.run.workQueue_ = [];
  };
  goog.testing.watchers.watchClockReset(goog.async.run.resetQueue_);
}
goog.async.run.processWorkQueue = function() {
  while (goog.async.run.workQueue_.length) {
    var workItems = goog.async.run.workQueue_;
    goog.async.run.workQueue_ = [];
    for (var i = 0;i < workItems.length;i++) {
      var workItem = workItems[i];
      try {
        workItem.fn.call(workItem.scope);
      } catch (e) {
        goog.async.throwException(e);
      }
    }
  }
  goog.async.run.workQueueScheduled_ = false;
};
goog.async.run.WorkItem_ = function(fn, scope) {
  this.fn = fn;
  this.scope = scope;
};
goog.provide("goog.promise.Resolver");
goog.promise.Resolver = function() {
};
goog.promise.Resolver.prototype.promise;
goog.promise.Resolver.prototype.resolve;
goog.promise.Resolver.prototype.reject;
goog.provide("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.asserts");
goog.require("goog.async.run");
goog.require("goog.async.throwException");
goog.require("goog.debug.Error");
goog.require("goog.promise.Resolver");
goog.Promise = function(resolver, opt_context) {
  this.state_ = goog.Promise.State_.PENDING;
  this.result_ = undefined;
  this.parent_ = null;
  this.callbackEntries_ = null;
  this.executing_ = false;
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    this.unhandledRejectionId_ = 0;
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      this.hadUnhandledRejection_ = false;
    }
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.stack_ = [];
    this.addStackTrace_(new Error("created"));
    this.currentStep_ = 0;
  }
  try {
    var self = this;
    resolver.call(opt_context, function(value) {
      self.resolve_(goog.Promise.State_.FULFILLED, value);
    }, function(reason) {
      self.resolve_(goog.Promise.State_.REJECTED, reason);
    });
  } catch (e) {
    this.resolve_(goog.Promise.State_.REJECTED, e);
  }
};
goog.define("goog.Promise.LONG_STACK_TRACES", false);
goog.define("goog.Promise.UNHANDLED_REJECTION_DELAY", 0);
goog.Promise.State_ = {PENDING:0, BLOCKED:1, FULFILLED:2, REJECTED:3};
goog.Promise.CallbackEntry_;
goog.Promise.resolve = function(opt_value) {
  return new goog.Promise(function(resolve, reject) {
    resolve(opt_value);
  });
};
goog.Promise.reject = function(opt_reason) {
  return new goog.Promise(function(resolve, reject) {
    reject(opt_reason);
  });
};
goog.Promise.race = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    if (!promises.length) {
      resolve(undefined);
    }
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(resolve, reject);
    }
  });
};
goog.Promise.all = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toFulfill = promises.length;
    var values = [];
    if (!toFulfill) {
      resolve(values);
      return;
    }
    var onFulfill = function(index, value) {
      toFulfill--;
      values[index] = value;
      if (toFulfill == 0) {
        resolve(values);
      }
    };
    var onReject = function(reason) {
      reject(reason);
    };
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(goog.partial(onFulfill, i), onReject);
    }
  });
};
goog.Promise.firstFulfilled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toReject = promises.length;
    var reasons = [];
    if (!toReject) {
      resolve(undefined);
      return;
    }
    var onFulfill = function(value) {
      resolve(value);
    };
    var onReject = function(index, reason) {
      toReject--;
      reasons[index] = reason;
      if (toReject == 0) {
        reject(reasons);
      }
    };
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(onFulfill, goog.partial(onReject, i));
    }
  });
};
goog.Promise.withResolver = function() {
  var resolve, reject;
  var promise = new goog.Promise(function(rs, rj) {
    resolve = rs;
    reject = rj;
  });
  return new goog.Promise.Resolver_(promise, resolve, reject);
};
goog.Promise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  return this.addChildPromise_(goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null, goog.isFunction(opt_onRejected) ? opt_onRejected : null, opt_context);
};
goog.Thenable.addImplementation(goog.Promise);
goog.Promise.prototype.thenAlways = function(onResolved, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenAlways"));
  }
  var callback = function() {
    try {
      onResolved.call(opt_context);
    } catch (err) {
      goog.Promise.handleRejection_.call(null, err);
    }
  };
  this.addCallbackEntry_({child:null, onRejected:callback, onFulfilled:callback});
  return this;
};
goog.Promise.prototype.thenCatch = function(onRejected, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenCatch"));
  }
  return this.addChildPromise_(null, onRejected, opt_context);
};
goog.Promise.prototype.cancel = function(opt_message) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    goog.async.run(function() {
      var err = new goog.Promise.CancellationError(opt_message);
      this.cancelInternal_(err);
    }, this);
  }
};
goog.Promise.prototype.cancelInternal_ = function(err) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    if (this.parent_) {
      this.parent_.cancelChild_(this, err);
    } else {
      this.resolve_(goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.cancelChild_ = function(childPromise, err) {
  if (!this.callbackEntries_) {
    return;
  }
  var childCount = 0;
  var childIndex = -1;
  for (var i = 0, entry;entry = this.callbackEntries_[i];i++) {
    var child = entry.child;
    if (child) {
      childCount++;
      if (child == childPromise) {
        childIndex = i;
      }
      if (childIndex >= 0 && childCount > 1) {
        break;
      }
    }
  }
  if (childIndex >= 0) {
    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
      this.cancelInternal_(err);
    } else {
      var callbackEntry = this.callbackEntries_.splice(childIndex, 1)[0];
      this.executeCallback_(callbackEntry, goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {
  if ((!this.callbackEntries_ || !this.callbackEntries_.length) && (this.state_ == goog.Promise.State_.FULFILLED || this.state_ == goog.Promise.State_.REJECTED)) {
    this.scheduleCallbacks_();
  }
  if (!this.callbackEntries_) {
    this.callbackEntries_ = [];
  }
  this.callbackEntries_.push(callbackEntry);
};
goog.Promise.prototype.addChildPromise_ = function(onFulfilled, onRejected, opt_context) {
  var callbackEntry = {child:null, onFulfilled:null, onRejected:null};
  callbackEntry.child = new goog.Promise(function(resolve, reject) {
    callbackEntry.onFulfilled = onFulfilled ? function(value) {
      try {
        var result = onFulfilled.call(opt_context, value);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    } : resolve;
    callbackEntry.onRejected = onRejected ? function(reason) {
      try {
        var result = onRejected.call(opt_context, reason);
        if (!goog.isDef(result) && reason instanceof goog.Promise.CancellationError) {
          reject(reason);
        } else {
          resolve(result);
        }
      } catch (err) {
        reject(err);
      }
    } : reject;
  });
  callbackEntry.child.parent_ = this;
  this.addCallbackEntry_((callbackEntry));
  return callbackEntry.child;
};
goog.Promise.prototype.unblockAndFulfill_ = function(value) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.FULFILLED, value);
};
goog.Promise.prototype.unblockAndReject_ = function(reason) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.REJECTED, reason);
};
goog.Promise.prototype.resolve_ = function(state, x) {
  if (this.state_ != goog.Promise.State_.PENDING) {
    return;
  }
  if (this == x) {
    state = goog.Promise.State_.REJECTED;
    x = new TypeError("Promise cannot resolve to itself");
  } else {
    if (goog.Thenable.isImplementedBy(x)) {
      x = (x);
      this.state_ = goog.Promise.State_.BLOCKED;
      x.then(this.unblockAndFulfill_, this.unblockAndReject_, this);
      return;
    } else {
      if (goog.isObject(x)) {
        try {
          var then = x["then"];
          if (goog.isFunction(then)) {
            this.tryThen_(x, then);
            return;
          }
        } catch (e) {
          state = goog.Promise.State_.REJECTED;
          x = e;
        }
      }
    }
  }
  this.result_ = x;
  this.state_ = state;
  this.scheduleCallbacks_();
  if (state == goog.Promise.State_.REJECTED && !(x instanceof goog.Promise.CancellationError)) {
    goog.Promise.addUnhandledRejection_(this, x);
  }
};
goog.Promise.prototype.tryThen_ = function(thenable, then) {
  this.state_ = goog.Promise.State_.BLOCKED;
  var promise = this;
  var called = false;
  var resolve = function(value) {
    if (!called) {
      called = true;
      promise.unblockAndFulfill_(value);
    }
  };
  var reject = function(reason) {
    if (!called) {
      called = true;
      promise.unblockAndReject_(reason);
    }
  };
  try {
    then.call(thenable, resolve, reject);
  } catch (e) {
    reject(e);
  }
};
goog.Promise.prototype.scheduleCallbacks_ = function() {
  if (!this.executing_) {
    this.executing_ = true;
    goog.async.run(this.executeCallbacks_, this);
  }
};
goog.Promise.prototype.executeCallbacks_ = function() {
  while (this.callbackEntries_ && this.callbackEntries_.length) {
    var entries = this.callbackEntries_;
    this.callbackEntries_ = [];
    for (var i = 0;i < entries.length;i++) {
      if (goog.Promise.LONG_STACK_TRACES) {
        this.currentStep_++;
      }
      this.executeCallback_(entries[i], this.state_, this.result_);
    }
  }
  this.executing_ = false;
};
goog.Promise.prototype.executeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.FULFILLED) {
    callbackEntry.onFulfilled(result);
  } else {
    this.removeUnhandledRejection_();
    callbackEntry.onRejected(result);
  }
};
goog.Promise.prototype.addStackTrace_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && goog.isString(err.stack)) {
    var trace = err.stack.split("\n", 4)[3];
    var message = err.message;
    message += Array(11 - message.length).join(" ");
    this.stack_.push(message + trace);
  }
};
goog.Promise.prototype.appendLongStack_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && err && goog.isString(err.stack) && this.stack_.length) {
    var longTrace = ["Promise trace:"];
    for (var promise = this;promise;promise = promise.parent_) {
      for (var i = this.currentStep_;i >= 0;i--) {
        longTrace.push(promise.stack_[i]);
      }
      longTrace.push("Value: " + "[" + (promise.state_ == goog.Promise.State_.REJECTED ? "REJECTED" : "FULFILLED") + "] " + "\x3c" + String(promise.result_) + "\x3e");
    }
    err.stack += "\n\n" + longTrace.join("\n");
  }
};
goog.Promise.prototype.removeUnhandledRejection_ = function() {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    for (var p = this;p && p.unhandledRejectionId_;p = p.parent_) {
      goog.global.clearTimeout(p.unhandledRejectionId_);
      p.unhandledRejectionId_ = 0;
    }
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      for (var p = this;p && p.hadUnhandledRejection_;p = p.parent_) {
        p.hadUnhandledRejection_ = false;
      }
    }
  }
};
goog.Promise.addUnhandledRejection_ = function(promise, reason) {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {
      promise.appendLongStack_(reason);
      goog.Promise.handleRejection_.call(null, reason);
    }, goog.Promise.UNHANDLED_REJECTION_DELAY);
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      promise.hadUnhandledRejection_ = true;
      goog.async.run(function() {
        if (promise.hadUnhandledRejection_) {
          promise.appendLongStack_(reason);
          goog.Promise.handleRejection_.call(null, reason);
        }
      });
    }
  }
};
goog.Promise.handleRejection_ = goog.async.throwException;
goog.Promise.setUnhandledRejectionHandler = function(handler) {
  goog.Promise.handleRejection_ = handler;
};
goog.Promise.CancellationError = function(opt_message) {
  goog.Promise.CancellationError.base(this, "constructor", opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);
goog.Promise.CancellationError.prototype.name = "cancel";
goog.Promise.Resolver_ = function(promise, resolve, reject) {
  this.promise = promise;
  this.resolve = resolve;
  this.reject = reject;
};
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.provide("goog.async.Deferred");
goog.provide("goog.async.Deferred.AlreadyCalledError");
goog.provide("goog.async.Deferred.CanceledError");
goog.require("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.Error");
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  this.sequence_ = [];
  this.onCancelFunction_ = opt_onCancelFunction;
  this.defaultScope_ = opt_defaultScope || null;
  this.fired_ = false;
  this.hadError_ = false;
  this.result_ = undefined;
  this.blocked_ = false;
  this.blocking_ = false;
  this.silentlyCanceled_ = false;
  this.unhandledErrorId_ = 0;
  this.parent_ = null;
  this.branches_ = 0;
  if (goog.async.Deferred.LONG_STACK_TRACES) {
    this.constructorStack_ = null;
    if (Error.captureStackTrace) {
      var target = {stack:""};
      Error.captureStackTrace(target, goog.async.Deferred);
      if (typeof target.stack == "string") {
        this.constructorStack_ = target.stack.replace(/^[^\n]*\n/, "");
      }
    }
  }
};
goog.define("goog.async.Deferred.STRICT_ERRORS", false);
goog.define("goog.async.Deferred.LONG_STACK_TRACES", false);
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }
    if (this.onCancelFunction_) {
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCanceled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CanceledError(this));
    }
  } else {
    if (this.result_ instanceof goog.async.Deferred) {
      this.result_.cancel();
    }
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCanceled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCanceled_ = false;
  }
};
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true, opt_result);
};
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.makeStackTraceLong_(opt_result);
  this.updateResult_(false, opt_result);
};
goog.async.Deferred.prototype.makeStackTraceLong_ = function(error) {
  if (!goog.async.Deferred.LONG_STACK_TRACES) {
    return;
  }
  if (this.constructorStack_ && goog.isObject(error) && error.stack && /^[^\n]+(\n   [^\n]+)+/.test(error.stack)) {
    error.stack = error.stack + "\nDEFERRED OPERATION:\n" + this.constructorStack_;
  }
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "An execution sequence may not be initiated with a blocking Deferred.");
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, "Blocking Deferreds can not be re-used");
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};
goog.async.Deferred.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  var resolve, reject;
  var promise = new goog.Promise(function(res, rej) {
    resolve = res;
    reject = rej;
  });
  this.addCallbacks(resolve, function(reason) {
    if (reason instanceof goog.async.Deferred.CanceledError) {
      promise.cancel();
    } else {
      reject(reason);
    }
  });
  return promise.then(opt_onFulfilled, opt_onRejected, opt_context);
};
goog.Thenable.addImplementation(goog.async.Deferred);
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  if (!(otherDeferred instanceof goog.async.Deferred)) {
    return this.addCallback(function() {
      return otherDeferred;
    });
  }
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    return goog.isFunction(sequenceRow[1]);
  });
};
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledErrorId_ && this.hasFired() && this.hasErrback_()) {
    goog.async.Deferred.unscheduleError_(this.unhandledErrorId_);
    this.unhandledErrorId_ = 0;
  }
  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }
  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;
  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();
    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];
    var f = this.hadError_ ? errback : callback;
    if (f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        if (goog.isDef(ret)) {
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }
        if (goog.Thenable.isImplementedBy(res)) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }
      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        this.makeStackTraceLong_(res);
        if (!this.hasErrback_()) {
          unhandledException = true;
        }
      }
    }
  }
  this.result_ = res;
  if (isNewlyBlocked) {
    var onCallback = goog.bind(this.continue_, this, true);
    var onErrback = goog.bind(this.continue_, this, false);
    if (res instanceof goog.async.Deferred) {
      res.addCallbacks(onCallback, onErrback);
      res.blocking_ = true;
    } else {
      res.then(onCallback, onErrback);
    }
  } else {
    if (goog.async.Deferred.STRICT_ERRORS && this.isError(res) && !(res instanceof goog.async.Deferred.CanceledError)) {
      this.hadError_ = true;
      unhandledException = true;
    }
  }
  if (unhandledException) {
    this.unhandledErrorId_ = goog.async.Deferred.scheduleError_(res);
  }
};
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred;
  d.callback(opt_result);
  return d;
};
goog.async.Deferred.fromPromise = function(promise) {
  var d = new goog.async.Deferred;
  d.callback();
  d.addCallback(function() {
    return promise;
  });
  return d;
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d;
};
goog.async.Deferred.canceled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d;
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Deferred has already fired";
goog.async.Deferred.AlreadyCalledError.prototype.name = "AlreadyCalledError";
goog.async.Deferred.CanceledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CanceledError, goog.debug.Error);
goog.async.Deferred.CanceledError.prototype.message = "Deferred was canceled";
goog.async.Deferred.CanceledError.prototype.name = "CanceledError";
goog.async.Deferred.Error_ = function(error) {
  this.id_ = goog.global.setTimeout(goog.bind(this.throwError, this), 0);
  this.error_ = error;
};
goog.async.Deferred.Error_.prototype.throwError = function() {
  goog.asserts.assert(goog.async.Deferred.errorMap_[this.id_], "Cannot throw an error that is not scheduled.");
  delete goog.async.Deferred.errorMap_[this.id_];
  throw this.error_;
};
goog.async.Deferred.Error_.prototype.resetTimer = function() {
  goog.global.clearTimeout(this.id_);
};
goog.async.Deferred.errorMap_ = {};
goog.async.Deferred.scheduleError_ = function(error) {
  var deferredError = new goog.async.Deferred.Error_(error);
  goog.async.Deferred.errorMap_[deferredError.id_] = deferredError;
  return deferredError.id_;
};
goog.async.Deferred.unscheduleError_ = function(id) {
  var error = goog.async.Deferred.errorMap_[id];
  if (error) {
    error.resetTimer();
    delete goog.async.Deferred.errorMap_[id];
  }
};
goog.async.Deferred.assertNoErrors = function() {
  var map = goog.async.Deferred.errorMap_;
  for (var key in map) {
    var error = map[key];
    error.resetTimer();
    error.throwError();
  }
};
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.net.xpc.DirectTransport");
goog.require("goog.Timer");
goog.require("goog.async.Deferred");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.object");
goog.scope(function() {
  var CfgFields = goog.net.xpc.CfgFields;
  var CrossPageChannelRole = goog.net.xpc.CrossPageChannelRole;
  var Deferred = goog.async.Deferred;
  var EventHandler = goog.events.EventHandler;
  var Timer = goog.Timer;
  var Transport = goog.net.xpc.Transport;
  goog.net.xpc.DirectTransport = function(channel, opt_domHelper) {
    goog.net.xpc.DirectTransport.base(this, "constructor", opt_domHelper);
    this.channel_ = channel;
    this.eventHandler_ = new EventHandler(this);
    this.registerDisposable(this.eventHandler_);
    this.maybeAttemptToConnectTimer_ = new Timer(DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_, this.getWindow());
    this.registerDisposable(this.maybeAttemptToConnectTimer_);
    this.setupAckReceived_ = new Deferred;
    this.setupAckSent_ = new Deferred;
    this.connected_ = new Deferred;
    this.endpointId_ = goog.net.xpc.getRandomString(10);
    this.peerEndpointId_ = null;
    this.asyncSendsMap_ = {};
    this.originalChannelName_ = this.channel_.name;
    this.channel_.updateChannelNameAndCatalog(DirectTransport.getRoledChannelName_(this.channel_.name, this.channel_.getRole()));
    this.initialized_ = false;
    this.connected_.awaitDeferred(this.setupAckReceived_);
    this.connected_.awaitDeferred(this.setupAckSent_);
    this.connected_.addCallback(this.notifyConnected_, this);
    this.connected_.callback(true);
    this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, Timer.TICK, this.maybeAttemptToConnect_);
    goog.log.info(goog.net.xpc.logger, "DirectTransport created. role\x3d" + this.channel_.getRole());
  };
  goog.inherits(goog.net.xpc.DirectTransport, Transport);
  var DirectTransport = goog.net.xpc.DirectTransport;
  DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_ = 100;
  DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ = 0;
  DirectTransport.isSupported = function(peerWindow) {
    try {
      return window.document.domain == peerWindow.document.domain;
    } catch (e) {
      return false;
    }
  };
  DirectTransport.activeCount_ = {};
  DirectTransport.GLOBAL_TRANPORT_PATH_ = "crosswindowmessaging.channel";
  DirectTransport.MESSAGE_DELIMITER_ = ",";
  DirectTransport.initialize_ = function(listenWindow) {
    var uid = goog.getUid(listenWindow);
    var value = DirectTransport.activeCount_[uid] || 0;
    if (value == 0) {
      var globalProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, listenWindow);
      if (globalProxy == null) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, DirectTransport.messageReceivedHandler_, listenWindow);
      }
    }
    DirectTransport.activeCount_[uid]++;
  };
  DirectTransport.getRoledChannelName_ = function(channelName, role) {
    return channelName + "_" + role;
  };
  DirectTransport.messageReceivedHandler_ = function(literal) {
    var msg = DirectTransport.Message_.fromLiteral(literal);
    var channelName = msg.channelName;
    var service = msg.service;
    var payload = msg.payload;
    goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
    var channel = goog.net.xpc.channels[channelName];
    if (channel) {
      channel.xpcDeliver(service, payload);
      return true;
    }
    var transportMessageType = DirectTransport.parseTransportPayload_(payload)[0];
    for (var staleChannelName in goog.net.xpc.channels) {
      var staleChannel = goog.net.xpc.channels[staleChannelName];
      if (staleChannel.getRole() == CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && transportMessageType == goog.net.xpc.SETUP) {
        staleChannel.updateChannelNameAndCatalog(channelName);
        staleChannel.xpcDeliver(service, payload);
        return true;
      }
    }
    goog.log.info(goog.net.xpc.logger, "channel name mismatch; message ignored.");
    return false;
  };
  DirectTransport.prototype.transportType = goog.net.xpc.TransportTypes.DIRECT;
  DirectTransport.prototype.transportServiceHandler = function(payload) {
    var transportParts = DirectTransport.parseTransportPayload_(payload);
    var transportMessageType = transportParts[0];
    var peerEndpointId = transportParts[1];
    switch(transportMessageType) {
      case goog.net.xpc.SETUP_ACK_:
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
        break;
      case goog.net.xpc.SETUP:
        this.sendSetupAckMessage_();
        if (this.peerEndpointId_ != null && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
        break;
    }
  };
  DirectTransport.prototype.sendSetupMessage_ = function() {
    var payload = goog.net.xpc.SETUP;
    payload += DirectTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  };
  DirectTransport.prototype.sendSetupAckMessage_ = function() {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    if (!this.setupAckSent_.hasFired()) {
      this.setupAckSent_.callback(true);
    }
  };
  DirectTransport.prototype.connect = function() {
    var win = this.getWindow();
    if (win) {
      DirectTransport.initialize_(win);
      this.initialized_ = true;
      this.maybeAttemptToConnect_();
    } else {
      goog.log.fine(goog.net.xpc.logger, "connect(): no window to initialize.");
    }
  };
  DirectTransport.prototype.maybeAttemptToConnect_ = function() {
    var outerRole = this.channel_.getRole() == CrossPageChannelRole.OUTER;
    if (this.channel_.isConnected()) {
      this.maybeAttemptToConnectTimer_.stop();
      return;
    }
    this.maybeAttemptToConnectTimer_.start();
    this.sendSetupMessage_();
  };
  DirectTransport.prototype.send = function(service, payload) {
    if (!this.channel_.getPeerWindowObject()) {
      goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
      return;
    }
    var channelName = DirectTransport.getRoledChannelName_(this.originalChannelName_, this.getPeerRole_());
    var message = new DirectTransport.Message_(channelName, service, payload);
    if (this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE]) {
      this.executeScheduledSend_(message);
    } else {
      this.asyncSendsMap_[goog.getUid(message)] = Timer.callOnce(goog.bind(this.executeScheduledSend_, this, message), 0);
    }
  };
  DirectTransport.prototype.executeScheduledSend_ = function(message) {
    var messageId = goog.getUid(message);
    if (this.asyncSendsMap_[messageId]) {
      delete this.asyncSendsMap_[messageId];
    }
    try {
      var peerProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, this.channel_.getPeerWindowObject());
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Can't access other window, ignoring.", error);
      return;
    }
    if (goog.isNull(peerProxy)) {
      goog.log.warning(goog.net.xpc.logger, "Peer window had no global function.");
      return;
    }
    try {
      peerProxy(message.toLiteral());
      goog.log.info(goog.net.xpc.logger, "send(): channelName\x3d" + message.channelName + " service\x3d" + message.service + " payload\x3d" + message.payload);
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Error performing call, ignoring.", error);
    }
  };
  DirectTransport.prototype.getPeerRole_ = function() {
    var role = this.channel_.getRole();
    return role == goog.net.xpc.CrossPageChannelRole.OUTER ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  };
  DirectTransport.prototype.notifyConnected_ = function() {
    this.channel_.notifyConnected(this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE] ? DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ : 0);
  };
  DirectTransport.prototype.disposeInternal = function() {
    if (this.initialized_) {
      var listenWindow = this.getWindow();
      var uid = goog.getUid(listenWindow);
      var value = --DirectTransport.activeCount_[uid];
      if (value == 1) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, null, listenWindow);
      }
    }
    if (this.asyncSendsMap_) {
      goog.object.forEach(this.asyncSendsMap_, function(timerId) {
        Timer.clear(timerId);
      });
      this.asyncSendsMap_ = null;
    }
    if (this.setupAckReceived_) {
      this.setupAckReceived_.cancel();
      delete this.setupAckReceived_;
    }
    if (this.setupAckSent_) {
      this.setupAckSent_.cancel();
      delete this.setupAckSent_;
    }
    if (this.connected_) {
      this.connected_.cancel();
      delete this.connected_;
    }
    DirectTransport.base(this, "disposeInternal");
  };
  DirectTransport.parseTransportPayload_ = function(payload) {
    var transportParts = (payload.split(DirectTransport.MESSAGE_DELIMITER_));
    transportParts[1] = transportParts[1] || null;
    return transportParts;
  };
  DirectTransport.Message_ = function(channelName, service, payload) {
    this.channelName = channelName;
    this.service = service;
    this.payload = payload;
  };
  DirectTransport.Message_.prototype.toLiteral = function() {
    return{"channelName":this.channelName, "service":this.service, "payload":this.payload};
  };
  DirectTransport.Message_.fromLiteral = function(literal) {
    return new DirectTransport.Message_(literal["channelName"], literal["service"], literal["payload"]);
  };
});
goog.provide("goog.Delay");
goog.provide("goog.async.Delay");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.Disposable.call(this);
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.listener_;
  delete this.handler_;
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.stop = function() {
  if (this.isActive()) {
    goog.Timer.clear(this.id_);
  }
  this.id_ = 0;
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.Delay.prototype.isActive = function() {
  return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  if (this.listener_) {
    this.listener_.call(this.handler_);
  }
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.messaging.MessageChannel");
goog.messaging.MessageChannel = function() {
};
goog.messaging.MessageChannel.prototype.connect = function(opt_connectCb) {
};
goog.messaging.MessageChannel.prototype.isConnected = function() {
};
goog.messaging.MessageChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
};
goog.messaging.MessageChannel.prototype.registerDefaultService = function(callback) {
};
goog.messaging.MessageChannel.prototype.send = function(serviceName, payload) {
};
goog.provide("goog.messaging.AbstractChannel");
goog.require("goog.Disposable");
goog.require("goog.debug");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.MessageChannel");
goog.messaging.AbstractChannel = function() {
  goog.messaging.AbstractChannel.base(this, "constructor");
  this.services_ = {};
};
goog.inherits(goog.messaging.AbstractChannel, goog.Disposable);
goog.messaging.AbstractChannel.prototype.defaultService_;
goog.messaging.AbstractChannel.prototype.logger = goog.log.getLogger("goog.messaging.AbstractChannel");
goog.messaging.AbstractChannel.prototype.connect = function(opt_connectCb) {
  if (opt_connectCb) {
    opt_connectCb();
  }
};
goog.messaging.AbstractChannel.prototype.isConnected = function() {
  return true;
};
goog.messaging.AbstractChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
  this.services_[serviceName] = {callback:callback, objectPayload:!!opt_objectPayload};
};
goog.messaging.AbstractChannel.prototype.registerDefaultService = function(callback) {
  this.defaultService_ = callback;
};
goog.messaging.AbstractChannel.prototype.send = goog.abstractMethod;
goog.messaging.AbstractChannel.prototype.deliver = function(serviceName, payload) {
  var service = this.getService(serviceName, payload);
  if (!service) {
    return;
  }
  var decodedPayload = this.decodePayload(serviceName, payload, service.objectPayload);
  if (goog.isDefAndNotNull(decodedPayload)) {
    service.callback(decodedPayload);
  }
};
goog.messaging.AbstractChannel.prototype.getService = function(serviceName, payload) {
  var service = this.services_[serviceName];
  if (service) {
    return service;
  } else {
    if (this.defaultService_) {
      var callback = goog.partial(this.defaultService_, serviceName);
      var objectPayload = goog.isObject(payload);
      return{callback:callback, objectPayload:objectPayload};
    }
  }
  goog.log.warning(this.logger, 'Unknown service name "' + serviceName + '"');
  return null;
};
goog.messaging.AbstractChannel.prototype.decodePayload = function(serviceName, payload, objectPayload) {
  if (objectPayload && goog.isString(payload)) {
    try {
      return goog.json.parse(payload);
    } catch (err) {
      goog.log.warning(this.logger, "Expected JSON payload for " + serviceName + ', was "' + payload + '"');
      return null;
    }
  } else {
    if (!objectPayload && !goog.isString(payload)) {
      return goog.json.serialize(payload);
    }
  }
  return payload;
};
goog.messaging.AbstractChannel.prototype.disposeInternal = function() {
  goog.messaging.AbstractChannel.base(this, "disposeInternal");
  delete this.logger;
  delete this.services_;
  delete this.defaultService_;
};
goog.provide("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.FrameElementMethodTransport = function(channel, opt_domHelper) {
  goog.net.xpc.FrameElementMethodTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.queue_ = [];
  this.deliverQueuedCb_ = goog.bind(this.deliverQueued_, this);
};
goog.inherits(goog.net.xpc.FrameElementMethodTransport, goog.net.xpc.Transport);
goog.net.xpc.FrameElementMethodTransport.prototype.transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
goog.net.xpc.FrameElementMethodTransport.prototype.recursive_ = false;
goog.net.xpc.FrameElementMethodTransport.prototype.timer_ = 0;
goog.net.xpc.FrameElementMethodTransport.outgoing_ = null;
goog.net.xpc.FrameElementMethodTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.iframeElm_ = this.channel_.getIframeElement();
    this.iframeElm_["XPC_toOuter"] = goog.bind(this.incoming_, this);
  } else {
    this.attemptSetup_();
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_ = function() {
  var retry = true;
  try {
    if (!this.iframeElm_) {
      this.iframeElm_ = this.getWindow().frameElement;
    }
    if (this.iframeElm_ && this.iframeElm_["XPC_toOuter"]) {
      this.outgoing_ = this.iframeElm_["XPC_toOuter"];
      this.iframeElm_["XPC_toOuter"]["XPC_toInner"] = goog.bind(this.incoming_, this);
      retry = false;
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (retry) {
    if (!this.attemptSetupCb_) {
      this.attemptSetupCb_ = goog.bind(this.attemptSetup_, this);
    }
    this.getWindow().setTimeout(this.attemptSetupCb_, 100);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler = function(payload) {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER && !this.channel_.isConnected() && payload == goog.net.xpc.SETUP_ACK_) {
    this.outgoing_ = this.iframeElm_["XPC_toOuter"]["XPC_toInner"];
    this.channel_.notifyConnected();
  } else {
    throw Error("Got unexpected transport message.");
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.incoming_ = function(serviceName, payload) {
  if (!this.recursive_ && this.queue_.length == 0) {
    this.channel_.xpcDeliver(serviceName, payload);
  } else {
    this.queue_.push({serviceName:serviceName, payload:payload});
    if (this.queue_.length == 1) {
      this.timer_ = this.getWindow().setTimeout(this.deliverQueuedCb_, 1);
    }
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_ = function() {
  while (this.queue_.length) {
    var msg = this.queue_.shift();
    this.channel_.xpcDeliver(msg.serviceName, msg.payload);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.send = function(service, payload) {
  this.recursive_ = true;
  this.outgoing_(service, payload);
  this.recursive_ = false;
};
goog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal = function() {
  goog.net.xpc.FrameElementMethodTransport.superClass_.disposeInternal.call(this);
  this.outgoing_ = null;
  this.iframeElm_ = null;
};
goog.provide("goog.net.xpc.IframeRelayTransport");
goog.require("goog.dom");
goog.require("goog.dom.safe");
goog.require("goog.events");
goog.require("goog.html.SafeHtml");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.userAgent");
goog.net.xpc.IframeRelayTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframeRelayTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.peerRelayUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_RELAY_URI];
  this.peerIframeId_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.IFRAME_ID];
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.startCleanupTimer_();
  }
};
goog.inherits(goog.net.xpc.IframeRelayTransport, goog.net.xpc.Transport);
if (goog.userAgent.WEBKIT) {
  goog.net.xpc.IframeRelayTransport.iframeRefs_ = [];
  goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_ = 1E3;
  goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_ = 3E3;
  goog.net.xpc.IframeRelayTransport.cleanupTimer_ = 0;
  goog.net.xpc.IframeRelayTransport.startCleanupTimer_ = function() {
    if (!goog.net.xpc.IframeRelayTransport.cleanupTimer_) {
      goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(function() {
        goog.net.xpc.IframeRelayTransport.cleanup_();
      }, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
    }
  };
  goog.net.xpc.IframeRelayTransport.cleanup_ = function(opt_maxAge) {
    var now = goog.now();
    var maxAge = opt_maxAge || goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_;
    while (goog.net.xpc.IframeRelayTransport.iframeRefs_.length && now - goog.net.xpc.IframeRelayTransport.iframeRefs_[0].timestamp >= maxAge) {
      var ifr = goog.net.xpc.IframeRelayTransport.iframeRefs_.shift().iframeElement;
      goog.dom.removeNode(ifr);
      goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe removed");
    }
    goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(goog.net.xpc.IframeRelayTransport.cleanupCb_, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
  };
  goog.net.xpc.IframeRelayTransport.cleanupCb_ = function() {
    goog.net.xpc.IframeRelayTransport.cleanup_();
  };
}
goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_ = 1800;
goog.net.xpc.IframeRelayTransport.FragmentInfo;
goog.net.xpc.IframeRelayTransport.fragmentMap_ = {};
goog.net.xpc.IframeRelayTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
goog.net.xpc.IframeRelayTransport.prototype.connect = function() {
  if (!this.getWindow()["xpcRelay"]) {
    this.getWindow()["xpcRelay"] = goog.net.xpc.IframeRelayTransport.receiveMessage_;
  }
  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
};
goog.net.xpc.IframeRelayTransport.receiveMessage_ = function(channelName, frame) {
  var pos = frame.indexOf(":");
  var header = frame.substr(0, pos);
  var payload = frame.substr(pos + 1);
  if (!goog.userAgent.IE || (pos = header.indexOf("|")) == -1) {
    var service = header
  } else {
    var service = header.substr(0, pos);
    var fragmentIdStr = header.substr(pos + 1);
    pos = fragmentIdStr.indexOf("+");
    var messageIdStr = fragmentIdStr.substr(0, pos);
    var fragmentNum = parseInt(fragmentIdStr.substr(pos + 1), 10);
    var fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
    if (!fragmentInfo) {
      fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr] = {fragments:[], received:0, expected:0};
    }
    if (goog.string.contains(fragmentIdStr, "++")) {
      fragmentInfo.expected = fragmentNum + 1;
    }
    fragmentInfo.fragments[fragmentNum] = payload;
    fragmentInfo.received++;
    if (fragmentInfo.received != fragmentInfo.expected) {
      return;
    }
    payload = fragmentInfo.fragments.join("");
    delete goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
  }
  goog.net.xpc.channels[channelName].xpcDeliver(service, decodeURIComponent(payload));
};
goog.net.xpc.IframeRelayTransport.prototype.transportServiceHandler = function(payload) {
  if (payload == goog.net.xpc.SETUP) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    this.channel_.notifyConnected();
  } else {
    if (payload == goog.net.xpc.SETUP_ACK_) {
      this.channel_.notifyConnected();
    }
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send = function(service, payload) {
  var encodedPayload = encodeURIComponent(payload);
  var encodedLen = encodedPayload.length;
  var maxSize = goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_;
  if (goog.userAgent.IE && encodedLen > maxSize) {
    var messageIdStr = goog.string.getRandomString();
    for (var startIndex = 0, fragmentNum = 0;startIndex < encodedLen;fragmentNum++) {
      var payloadFragment = encodedPayload.substr(startIndex, maxSize);
      startIndex += maxSize;
      var fragmentIdStr = messageIdStr + (startIndex >= encodedLen ? "++" : "+") + fragmentNum;
      this.send_(service, payloadFragment, fragmentIdStr);
    }
  } else {
    this.send_(service, encodedPayload);
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send_ = function(service, encodedPayload, opt_fragmentIdStr) {
  if (goog.userAgent.IE) {
    var div = this.getWindow().document.createElement("div");
    goog.dom.safe.setInnerHtml(div, goog.html.SafeHtml.create("iframe", {"onload":goog.string.Const.from("this.xpcOnload()")}));
    var ifr = div.childNodes[0];
    div = null;
    ifr["xpcOnload"] = goog.net.xpc.IframeRelayTransport.iframeLoadHandler_;
  } else {
    var ifr = this.getWindow().document.createElement("iframe");
    if (goog.userAgent.WEBKIT) {
      goog.net.xpc.IframeRelayTransport.iframeRefs_.push({timestamp:goog.now(), iframeElement:ifr});
    } else {
      goog.events.listen(ifr, "load", goog.net.xpc.IframeRelayTransport.iframeLoadHandler_);
    }
  }
  var style = ifr.style;
  style.visibility = "hidden";
  style.width = ifr.style.height = "0px";
  style.position = "absolute";
  var url = this.peerRelayUri_;
  url += "#" + this.channel_.name;
  if (this.peerIframeId_) {
    url += "," + this.peerIframeId_;
  }
  url += "|" + service;
  if (opt_fragmentIdStr) {
    url += "|" + opt_fragmentIdStr;
  }
  url += ":" + encodedPayload;
  ifr.src = url;
  this.getWindow().document.body.appendChild(ifr);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + url);
};
goog.net.xpc.IframeRelayTransport.iframeLoadHandler_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe-load");
  goog.dom.removeNode(this);
  this.xpcOnload = null;
};
goog.net.xpc.IframeRelayTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframeRelayTransport.base(this, "disposeInternal");
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.cleanup_(0);
  }
};
goog.provide("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.async.Deferred");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.NativeMessagingTransport = function(channel, peerHostname, opt_domHelper, opt_oneSidedHandshake, opt_protocolVersion) {
  goog.net.xpc.NativeMessagingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.protocolVersion_ = opt_protocolVersion || 2;
  goog.asserts.assert(this.protocolVersion_ >= 1);
  goog.asserts.assert(this.protocolVersion_ <= 2);
  this.peerHostname_ = peerHostname || "*";
  this.eventHandler_ = new goog.events.EventHandler(this);
  this.maybeAttemptToConnectTimer_ = new goog.Timer(100, this.getWindow());
  this.oneSidedHandshake_ = !!opt_oneSidedHandshake;
  this.setupAckReceived_ = new goog.async.Deferred;
  this.setupAckSent_ = new goog.async.Deferred;
  this.connected_ = new goog.async.Deferred;
  this.endpointId_ = goog.net.xpc.getRandomString(10);
  this.peerEndpointId_ = null;
  if (this.oneSidedHandshake_) {
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.connected_.awaitDeferred(this.setupAckReceived_);
    } else {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  } else {
    this.connected_.awaitDeferred(this.setupAckReceived_);
    if (this.protocolVersion_ == 2) {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  }
  this.connected_.addCallback(this.notifyConnected_, this);
  this.connected_.callback(true);
  this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, goog.Timer.TICK, this.maybeAttemptToConnect_);
  goog.log.info(goog.net.xpc.logger, "NativeMessagingTransport created.  " + "protocolVersion\x3d" + this.protocolVersion_ + ", oneSidedHandshake\x3d" + this.oneSidedHandshake_ + ", role\x3d" + this.channel_.getRole());
};
goog.inherits(goog.net.xpc.NativeMessagingTransport, goog.net.xpc.Transport);
goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ = 200;
goog.net.xpc.NativeMessagingTransport.prototype.peerProtocolVersion_ = null;
goog.net.xpc.NativeMessagingTransport.prototype.initialized_ = false;
goog.net.xpc.NativeMessagingTransport.prototype.transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_ = ",";
goog.net.xpc.NativeMessagingTransport.activeCount_ = {};
goog.net.xpc.NativeMessagingTransport.sendTimerId_ = 0;
goog.net.xpc.NativeMessagingTransport.prototype.couldPeerVersionBe_ = function(version) {
  return this.peerProtocolVersion_ == null || this.peerProtocolVersion_ == version;
};
goog.net.xpc.NativeMessagingTransport.initialize_ = function(listenWindow) {
  var uid = goog.getUid(listenWindow);
  var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
  if (!goog.isNumber(value)) {
    value = 0;
  }
  if (value == 0) {
    goog.events.listen(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
  }
  goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value + 1;
};
goog.net.xpc.NativeMessagingTransport.messageReceived_ = function(msgEvt) {
  var data = msgEvt.getBrowserEvent().data;
  if (!goog.isString(data)) {
    return false;
  }
  var headDelim = data.indexOf("|");
  var serviceDelim = data.indexOf(":");
  if (headDelim == -1 || serviceDelim == -1) {
    return false;
  }
  var channelName = data.substring(0, headDelim);
  var service = data.substring(headDelim + 1, serviceDelim);
  var payload = data.substring(serviceDelim + 1);
  goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
  var channel = goog.net.xpc.channels[channelName];
  if (channel) {
    channel.xpcDeliver(service, payload, msgEvt.getBrowserEvent().origin);
    return true;
  }
  var transportMessageType = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload)[0];
  for (var staleChannelName in goog.net.xpc.channels) {
    var staleChannel = goog.net.xpc.channels[staleChannelName];
    if (staleChannel.getRole() == goog.net.xpc.CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && (transportMessageType == goog.net.xpc.SETUP || transportMessageType == goog.net.xpc.SETUP_NTPV2)) {
      staleChannel.updateChannelNameAndCatalog(channelName);
      staleChannel.xpcDeliver(service, payload);
      return true;
    }
  }
  goog.log.info(goog.net.xpc.logger, 'channel name mismatch; message ignored"');
  return false;
};
goog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler = function(payload) {
  var transportParts = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload);
  var transportMessageType = transportParts[0];
  var peerEndpointId = transportParts[1];
  switch(transportMessageType) {
    case goog.net.xpc.SETUP_ACK_:
      this.setPeerProtocolVersion_(1);
      if (!this.setupAckReceived_.hasFired()) {
        this.setupAckReceived_.callback(true);
      }
      break;
    case goog.net.xpc.SETUP_ACK_NTPV2:
      if (this.protocolVersion_ == 2) {
        this.setPeerProtocolVersion_(2);
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
      }
      break;
    case goog.net.xpc.SETUP:
      this.setPeerProtocolVersion_(1);
      this.sendSetupAckMessage_(1);
      break;
    case goog.net.xpc.SETUP_NTPV2:
      if (this.protocolVersion_ == 2) {
        var prevPeerProtocolVersion = this.peerProtocolVersion_;
        this.setPeerProtocolVersion_(2);
        this.sendSetupAckMessage_(2);
        if ((prevPeerProtocolVersion == 1 || this.peerEndpointId_ != null) && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
      }
      break;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupMessage_ = function() {
  goog.asserts.assert(!(this.protocolVersion_ == 1 && this.peerProtocolVersion_ == 2));
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2)) {
    var payload = goog.net.xpc.SETUP_NTPV2;
    payload += goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  }
  if (this.couldPeerVersionBe_(1)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupAckMessage_ = function(protocolVersion) {
  goog.asserts.assert(this.protocolVersion_ != 1 || protocolVersion != 2, "Shouldn't try to send a v2 setup ack in v1 mode.");
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2) && protocolVersion == 2) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_NTPV2);
  } else {
    if (this.couldPeerVersionBe_(1) && protocolVersion == 1) {
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    } else {
      return;
    }
  }
  if (!this.setupAckSent_.hasFired()) {
    this.setupAckSent_.callback(true);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.setPeerProtocolVersion_ = function(version) {
  if (version > this.peerProtocolVersion_) {
    this.peerProtocolVersion_ = version;
  }
  if (this.peerProtocolVersion_ == 1) {
    if (!this.setupAckSent_.hasFired() && !this.oneSidedHandshake_) {
      this.setupAckSent_.callback(true);
    }
    this.peerEndpointId_ = null;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.connect = function() {
  goog.net.xpc.NativeMessagingTransport.initialize_(this.getWindow());
  this.initialized_ = true;
  this.maybeAttemptToConnect_();
};
goog.net.xpc.NativeMessagingTransport.prototype.maybeAttemptToConnect_ = function() {
  var outerFrame = this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER;
  if (this.oneSidedHandshake_ && outerFrame || this.channel_.isConnected() || this.isDisposed()) {
    this.maybeAttemptToConnectTimer_.stop();
    return;
  }
  this.maybeAttemptToConnectTimer_.start();
  this.sendSetupMessage_();
};
goog.net.xpc.NativeMessagingTransport.prototype.send = function(service, payload) {
  var win = this.channel_.getPeerWindowObject();
  if (!win) {
    goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
    return;
  }
  this.send = function(service, payload) {
    var transport = this;
    var channelName = this.channel_.name;
    var sendFunctor = function() {
      transport.sendTimerId_ = 0;
      try {
        var obj = win.postMessage ? win : win.document;
        if (!obj.postMessage) {
          goog.log.warning(goog.net.xpc.logger, "Peer window had no postMessage function.");
          return;
        }
        obj.postMessage(channelName + "|" + service + ":" + payload, transport.peerHostname_);
        goog.log.fine(goog.net.xpc.logger, "send(): service\x3d" + service + " payload\x3d" + payload + " to hostname\x3d" + transport.peerHostname_);
      } catch (error) {
        goog.log.warning(goog.net.xpc.logger, "Error performing postMessage, ignoring.", error);
      }
    };
    this.sendTimerId_ = goog.Timer.callOnce(sendFunctor, 0);
  };
  this.send(service, payload);
};
goog.net.xpc.NativeMessagingTransport.prototype.notifyConnected_ = function() {
  var delay = this.protocolVersion_ == 1 || this.peerProtocolVersion_ == 1 ? goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ : undefined;
  this.channel_.notifyConnected(delay);
};
goog.net.xpc.NativeMessagingTransport.prototype.disposeInternal = function() {
  if (this.initialized_) {
    var listenWindow = this.getWindow();
    var uid = goog.getUid(listenWindow);
    var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
    goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value - 1;
    if (value == 1) {
      goog.events.unlisten(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
    }
  }
  if (this.sendTimerId_) {
    goog.Timer.clear(this.sendTimerId_);
    this.sendTimerId_ = 0;
  }
  goog.dispose(this.eventHandler_);
  delete this.eventHandler_;
  goog.dispose(this.maybeAttemptToConnectTimer_);
  delete this.maybeAttemptToConnectTimer_;
  this.setupAckReceived_.cancel();
  delete this.setupAckReceived_;
  this.setupAckSent_.cancel();
  delete this.setupAckSent_;
  this.connected_.cancel();
  delete this.connected_;
  delete this.send;
  goog.net.xpc.NativeMessagingTransport.base(this, "disposeInternal");
};
goog.net.xpc.NativeMessagingTransport.parseTransportPayload_ = function(payload) {
  var transportParts = (payload.split(goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_));
  transportParts[1] = transportParts[1] || null;
  return transportParts;
};
goog.provide("goog.net.xpc.NixTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.reflect");
goog.net.xpc.NixTransport = function(channel, opt_domHelper) {
  goog.net.xpc.NixTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.authToken_ = channel[goog.net.xpc.CfgFields.AUTH_TOKEN] || "";
  this.remoteAuthToken_ = channel[goog.net.xpc.CfgFields.REMOTE_AUTH_TOKEN] || "";
  goog.net.xpc.NixTransport.conductGlobalSetup_(this.getWindow());
  this[goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE] = this.handleMessage_;
  this[goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL] = this.createChannel_;
};
goog.inherits(goog.net.xpc.NixTransport, goog.net.xpc.Transport);
goog.net.xpc.NixTransport.NIX_WRAPPER = "GCXPC____NIXVBS_wrapper";
goog.net.xpc.NixTransport.NIX_GET_WRAPPER = "GCXPC____NIXVBS_get_wrapper";
goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE = "GCXPC____NIXJS_handle_message";
goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL = "GCXPC____NIXJS_create_channel";
goog.net.xpc.NixTransport.NIX_ID_FIELD = "GCXPC____NIXVBS_container";
goog.net.xpc.NixTransport.isNixSupported = function() {
  var isSupported = false;
  try {
    var oldOpener = window.opener;
    window.opener = ({});
    isSupported = goog.reflect.canAccessProperty(window, "opener");
    window.opener = oldOpener;
  } catch (e) {
  }
  return isSupported;
};
goog.net.xpc.NixTransport.conductGlobalSetup_ = function(listenWindow) {
  if (listenWindow["nix_setup_complete"]) {
    return;
  }
  var vbscript = "Class " + goog.net.xpc.NixTransport.NIX_WRAPPER + "\n " + "Private m_Transport\n" + "Private m_Auth\n" + "Public Sub SetTransport(transport)\n" + "If isEmpty(m_Transport) Then\n" + "Set m_Transport \x3d transport\n" + "End If\n" + "End Sub\n" + "Public Sub SetAuth(auth)\n" + "If isEmpty(m_Auth) Then\n" + "m_Auth \x3d auth\n" + "End If\n" + "End Sub\n" + "Public Function GetAuthToken()\n " + "GetAuthToken \x3d m_Auth\n" + "End Function\n" + "Public Sub SendMessage(service, payload)\n " + 
  "Call m_Transport." + goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE + "(service, payload)\n" + "End Sub\n" + "Public Sub CreateChannel(channel)\n " + "Call m_Transport." + goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL + "(channel)\n" + "End Sub\n" + "Public Sub " + goog.net.xpc.NixTransport.NIX_ID_FIELD + "()\n " + "End Sub\n" + "End Class\n " + "Function " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + "(transport, auth)\n" + "Dim wrap\n" + "Set wrap \x3d New " + goog.net.xpc.NixTransport.NIX_WRAPPER + 
  "\n" + "wrap.SetTransport transport\n" + "wrap.SetAuth auth\n" + "Set " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + " \x3d wrap\n" + "End Function";
  try {
    listenWindow.execScript(vbscript, "vbscript");
    listenWindow["nix_setup_complete"] = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting global setup: " + e);
  }
};
goog.net.xpc.NixTransport.prototype.transportType = goog.net.xpc.TransportTypes.NIX;
goog.net.xpc.NixTransport.prototype.localSetupCompleted_ = false;
goog.net.xpc.NixTransport.prototype.nixChannel_ = null;
goog.net.xpc.NixTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.attemptOuterSetup_();
  } else {
    this.attemptInnerSetup_();
  }
};
goog.net.xpc.NixTransport.prototype.attemptOuterSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  var innerFrame = this.channel_.getIframeElement();
  try {
    var theWindow = this.getWindow();
    var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
    innerFrame.contentWindow.opener = getWrapper(this, this.authToken_);
    this.localSetupCompleted_ = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.attemptInnerSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  try {
    var opener = this.getWindow().opener;
    if (opener && goog.net.xpc.NixTransport.NIX_ID_FIELD in opener) {
      this.nixChannel_ = opener;
      var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
      if (remoteAuthToken != this.remoteAuthToken_) {
        goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
        return;
      }
      var theWindow = this.getWindow();
      var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
      this.nixChannel_["CreateChannel"](getWrapper(this, this.authToken_));
      this.localSetupCompleted_ = true;
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
    return;
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.createChannel_ = function(channel) {
  if (typeof channel != "unknown" || !(goog.net.xpc.NixTransport.NIX_ID_FIELD in channel)) {
    goog.log.error(goog.net.xpc.logger, "Invalid NIX channel given to createChannel_");
  }
  this.nixChannel_ = channel;
  var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
  if (remoteAuthToken != this.remoteAuthToken_) {
    goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
    return;
  }
  this.channel_.notifyConnected();
};
goog.net.xpc.NixTransport.prototype.handleMessage_ = function(serviceName, payload) {
  var deliveryHandler = function() {
    this.channel_.xpcDeliver(serviceName, payload);
  };
  this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1);
};
goog.net.xpc.NixTransport.prototype.send = function(service, payload) {
  if (typeof this.nixChannel_ !== "unknown") {
    goog.log.error(goog.net.xpc.logger, "NIX channel not connected");
  }
  this.nixChannel_["SendMessage"](service, payload);
};
goog.net.xpc.NixTransport.prototype.disposeInternal = function() {
  goog.net.xpc.NixTransport.base(this, "disposeInternal");
  this.nixChannel_ = null;
};
goog.provide("goog.net.xpc.CrossPageChannel");
goog.require("goog.Uri");
goog.require("goog.async.Deferred");
goog.require("goog.async.Delay");
goog.require("goog.dispose");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventType");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.AbstractChannel");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.ChannelStates");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.DirectTransport");
goog.require("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc.IframePollingTransport");
goog.require("goog.net.xpc.IframeRelayTransport");
goog.require("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.net.xpc.UriCfgFields");
goog.require("goog.string");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.net.xpc.CrossPageChannel = function(cfg, opt_domHelper) {
  goog.net.xpc.CrossPageChannel.base(this, "constructor");
  for (var i = 0, uriField;uriField = goog.net.xpc.UriCfgFields[i];i++) {
    if (uriField in cfg && !/^https?:\/\//.test(cfg[uriField])) {
      throw Error("URI " + cfg[uriField] + " is invalid for field " + uriField);
    }
  }
  this.cfg_ = cfg;
  this.name = this.cfg_[goog.net.xpc.CfgFields.CHANNEL_NAME] || goog.net.xpc.getRandomString(10);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
  this.deferredDeliveries_ = [];
  this.peerLoadHandler_ = new goog.events.EventHandler(this);
  cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] || goog.uri.utils.getHost(this.domHelper_.getWindow().location.href) + "/robots.txt";
  cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] || goog.uri.utils.getHost(cfg[goog.net.xpc.CfgFields.PEER_URI] || "") + "/robots.txt";
  goog.net.xpc.channels[this.name] = this;
  if (!goog.events.getListener(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_)) {
    goog.events.listenOnce(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_);
  }
  goog.log.info(goog.net.xpc.logger, "CrossPageChannel created: " + this.name);
};
goog.inherits(goog.net.xpc.CrossPageChannel, goog.messaging.AbstractChannel);
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_ = new RegExp("^%*" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_ = new RegExp("^%+" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.prototype.connectionDelay_ = null;
goog.net.xpc.CrossPageChannel.prototype.peerWindowDeferred_ = null;
goog.net.xpc.CrossPageChannel.prototype.transport_ = null;
goog.net.xpc.CrossPageChannel.prototype.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
goog.net.xpc.CrossPageChannel.prototype.isConnected = function() {
  return this.state_ == goog.net.xpc.ChannelStates.CONNECTED;
};
goog.net.xpc.CrossPageChannel.prototype.peerWindowObject_ = null;
goog.net.xpc.CrossPageChannel.prototype.iframeElement_ = null;
goog.net.xpc.CrossPageChannel.prototype.getConfig = function() {
  return this.cfg_;
};
goog.net.xpc.CrossPageChannel.prototype.getIframeElement = function() {
  return this.iframeElement_;
};
goog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject = function(peerWindowObject) {
  this.peerWindowObject_ = peerWindowObject;
};
goog.net.xpc.CrossPageChannel.prototype.getPeerWindowObject = function() {
  return this.peerWindowObject_;
};
goog.net.xpc.CrossPageChannel.prototype.isPeerAvailable = function() {
  try {
    return!!this.peerWindowObject_ && !Boolean(this.peerWindowObject_.closed);
  } catch (e) {
    return false;
  }
};
goog.net.xpc.CrossPageChannel.prototype.determineTransportType_ = function() {
  var transportType;
  if (goog.isFunction(document.postMessage) || goog.isFunction(window.postMessage) || goog.userAgent.IE && window.postMessage) {
    transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
  } else {
    if (goog.userAgent.GECKO) {
      transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
    } else {
      if (goog.userAgent.IE && this.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI]) {
        transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
      } else {
        if (goog.userAgent.IE && goog.net.xpc.NixTransport.isNixSupported()) {
          transportType = goog.net.xpc.TransportTypes.NIX;
        } else {
          transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
        }
      }
    }
  }
  return transportType;
};
goog.net.xpc.CrossPageChannel.prototype.createTransport_ = function() {
  if (this.transport_) {
    return;
  }
  var CfgFields = goog.net.xpc.CfgFields;
  if (!this.cfg_[CfgFields.TRANSPORT]) {
    this.cfg_[CfgFields.TRANSPORT] = this.determineTransportType_();
  }
  switch(this.cfg_[CfgFields.TRANSPORT]) {
    case goog.net.xpc.TransportTypes.NATIVE_MESSAGING:
      var protocolVersion = this.cfg_[CfgFields.NATIVE_TRANSPORT_PROTOCOL_VERSION] || 2;
      this.transport_ = new goog.net.xpc.NativeMessagingTransport(this, this.cfg_[CfgFields.PEER_HOSTNAME], this.domHelper_, !!this.cfg_[CfgFields.ONE_SIDED_HANDSHAKE], protocolVersion);
      break;
    case goog.net.xpc.TransportTypes.NIX:
      this.transport_ = new goog.net.xpc.NixTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD:
      this.transport_ = new goog.net.xpc.FrameElementMethodTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_RELAY:
      this.transport_ = new goog.net.xpc.IframeRelayTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_POLLING:
      this.transport_ = new goog.net.xpc.IframePollingTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.DIRECT:
      if (this.peerWindowObject_ && goog.net.xpc.DirectTransport.isSupported((this.peerWindowObject_))) {
        this.transport_ = new goog.net.xpc.DirectTransport(this, this.domHelper_);
      } else {
        goog.log.info(goog.net.xpc.logger, "DirectTransport not supported for this window, peer window in" + " different security context or not set yet.");
      }
      break;
  }
  if (this.transport_) {
    goog.log.info(goog.net.xpc.logger, "Transport created: " + this.transport_.getName());
  } else {
    throw Error("CrossPageChannel: No suitable transport found!");
  }
};
goog.net.xpc.CrossPageChannel.prototype.getTransportType = function() {
  return this.transport_.getType();
};
goog.net.xpc.CrossPageChannel.prototype.getTransportName = function() {
  return this.transport_.getName();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration = function() {
  var peerCfg = {};
  peerCfg[goog.net.xpc.CfgFields.CHANNEL_NAME] = this.name;
  peerCfg[goog.net.xpc.CfgFields.TRANSPORT] = this.cfg_[goog.net.xpc.CfgFields.TRANSPORT];
  peerCfg[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE] = this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE];
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_RELAY_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI];
  }
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    peerCfg[goog.net.xpc.CfgFields.ROLE] = role == goog.net.xpc.CrossPageChannelRole.INNER ? goog.net.xpc.CrossPageChannelRole.OUTER : goog.net.xpc.CrossPageChannelRole.INNER;
  }
  return peerCfg;
};
goog.net.xpc.CrossPageChannel.prototype.createPeerIframe = function(parentElm, opt_configureIframeCb, opt_addCfgParam) {
  goog.log.info(goog.net.xpc.logger, "createPeerIframe()");
  var iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];
  if (!iframeId) {
    iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID] = "xpcpeer" + goog.net.xpc.getRandomString(4);
  }
  var iframeElm = goog.dom.getDomHelper(parentElm).createElement("IFRAME");
  iframeElm.id = iframeElm.name = iframeId;
  if (opt_configureIframeCb) {
    opt_configureIframeCb(iframeElm);
  } else {
    iframeElm.style.width = iframeElm.style.height = "100%";
  }
  this.cleanUpIncompleteConnection_();
  this.peerWindowDeferred_ = new goog.async.Deferred(undefined, this);
  var peerUri = this.getPeerUri(opt_addCfgParam);
  this.peerLoadHandler_.listenOnceWithScope(iframeElm, "load", this.peerWindowDeferred_.callback, false, this.peerWindowDeferred_);
  if (goog.userAgent.GECKO || goog.userAgent.WEBKIT) {
    window.setTimeout(goog.bind(function() {
      parentElm.appendChild(iframeElm);
      iframeElm.src = peerUri.toString();
      goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
    }, this), 1);
  } else {
    iframeElm.src = peerUri.toString();
    parentElm.appendChild(iframeElm);
    goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
  }
  return(iframeElm);
};
goog.net.xpc.CrossPageChannel.prototype.cleanUpIncompleteConnection_ = function() {
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.cancel();
    this.peerWindowDeferred_ = null;
  }
  this.deferredDeliveries_.length = 0;
  this.peerLoadHandler_.removeAll();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerUri = function(opt_addCfgParam) {
  var peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI];
  if (goog.isString(peerUri)) {
    peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI] = new goog.Uri(peerUri);
  }
  if (opt_addCfgParam !== false) {
    peerUri.setParameterValue("xpc", goog.json.serialize(this.getPeerConfiguration()));
  }
  return peerUri;
};
goog.net.xpc.CrossPageChannel.prototype.connect = function(opt_connectCb) {
  this.connectCb_ = opt_connectCb || goog.nullFunction;
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.addCallback(this.continueConnection_);
  } else {
    this.continueConnection_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.continueConnection_ = function() {
  goog.log.info(goog.net.xpc.logger, "continueConnection_()");
  this.peerWindowDeferred_ = null;
  if (this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]) {
    this.iframeElement_ = this.domHelper_.getElement(this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]);
  }
  if (this.iframeElement_) {
    var winObj = this.iframeElement_.contentWindow;
    if (!winObj) {
      winObj = window.frames[this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]];
    }
    this.setPeerWindowObject(winObj);
  }
  if (!this.peerWindowObject_) {
    if (window == window.top) {
      throw Error("CrossPageChannel: Can't connect, peer window-object not set.");
    } else {
      this.setPeerWindowObject(window.parent);
    }
  }
  this.createTransport_();
  this.transport_.connect();
  while (this.deferredDeliveries_.length > 0) {
    this.deferredDeliveries_.shift()();
  }
};
goog.net.xpc.CrossPageChannel.prototype.close = function() {
  this.cleanUpIncompleteConnection_();
  this.state_ = goog.net.xpc.ChannelStates.CLOSED;
  goog.dispose(this.transport_);
  this.transport_ = null;
  this.connectCb_ = null;
  goog.dispose(this.connectionDelay_);
  this.connectionDelay_ = null;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" closed');
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected = function(opt_delay) {
  if (this.isConnected() || this.connectionDelay_ && this.connectionDelay_.isActive()) {
    return;
  }
  this.state_ = goog.net.xpc.ChannelStates.CONNECTED;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" connected');
  goog.dispose(this.connectionDelay_);
  if (goog.isDef(opt_delay)) {
    this.connectionDelay_ = new goog.async.Delay(this.connectCb_, opt_delay);
    this.connectionDelay_.start();
  } else {
    this.connectionDelay_ = null;
    this.connectCb_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected_ = goog.net.xpc.CrossPageChannel.prototype.notifyConnected;
goog.net.xpc.CrossPageChannel.prototype.notifyTransportError = function() {
  goog.log.info(goog.net.xpc.logger, "Transport Error");
  this.close();
};
goog.net.xpc.CrossPageChannel.prototype.send = function(serviceName, payload) {
  if (!this.isConnected()) {
    goog.log.error(goog.net.xpc.logger, "Can't send. Channel not connected.");
    return;
  }
  if (!this.isPeerAvailable()) {
    goog.log.error(goog.net.xpc.logger, "Peer has disappeared.");
    this.close();
    return;
  }
  if (goog.isObject(payload)) {
    payload = goog.json.serialize(payload);
  }
  this.transport_.send(this.escapeServiceName_(serviceName), payload);
};
goog.net.xpc.CrossPageChannel.prototype.xpcDeliver = function(serviceName, payload, opt_origin) {
  if (this.peerWindowDeferred_) {
    this.deferredDeliveries_.push(goog.bind(this.xpcDeliver, this, serviceName, payload, opt_origin));
    return;
  }
  if (!this.isMessageOriginAcceptable_(opt_origin)) {
    goog.log.warning(goog.net.xpc.logger, 'Message received from unapproved origin "' + opt_origin + '" - rejected.');
    return;
  }
  if (this.isDisposed()) {
    goog.log.warning(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Disposed.");
  } else {
    if (!serviceName || serviceName == goog.net.xpc.TRANSPORT_SERVICE_) {
      this.transport_.transportServiceHandler(payload);
    } else {
      if (this.isConnected()) {
        this.deliver(this.unescapeServiceName_(serviceName), payload);
      } else {
        goog.log.info(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Not connected.");
      }
    }
  }
};
goog.net.xpc.CrossPageChannel.prototype.escapeServiceName_ = function(name) {
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_.test(name)) {
    name = "%" + name;
  }
  return name.replace(/[%:|]/g, encodeURIComponent);
};
goog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_ = function(name) {
  name = name.replace(/%[0-9a-f]{2}/gi, decodeURIComponent);
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_.test(name)) {
    return name.substring(1);
  } else {
    return name;
  }
};
goog.net.xpc.CrossPageChannel.prototype.getRole = function() {
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (goog.isNumber(role)) {
    return role;
  } else {
    return window.parent == this.peerWindowObject_ ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  }
};
goog.net.xpc.CrossPageChannel.prototype.updateChannelNameAndCatalog = function(name) {
  goog.log.fine(goog.net.xpc.logger, "changing channel name to " + name);
  delete goog.net.xpc.channels[this.name];
  this.name = name;
  goog.net.xpc.channels[name] = this;
};
goog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable_ = function(opt_origin) {
  var peerHostname = this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
  return goog.string.isEmptySafe(opt_origin) || goog.string.isEmptySafe(peerHostname) || opt_origin == this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
};
goog.net.xpc.CrossPageChannel.prototype.disposeInternal = function() {
  this.close();
  this.peerWindowObject_ = null;
  this.iframeElement_ = null;
  delete goog.net.xpc.channels[this.name];
  goog.dispose(this.peerLoadHandler_);
  delete this.peerLoadHandler_;
  goog.net.xpc.CrossPageChannel.base(this, "disposeInternal");
};
goog.net.xpc.CrossPageChannel.disposeAll_ = function() {
  for (var name in goog.net.xpc.channels) {
    goog.dispose(goog.net.xpc.channels[name]);
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.net.WebSocket");
goog.provide("goog.net.WebSocket.ErrorEvent");
goog.provide("goog.net.WebSocket.EventType");
goog.provide("goog.net.WebSocket.MessageEvent");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventTarget");
goog.require("goog.log");
goog.net.WebSocket = function(opt_autoReconnect, opt_getNextReconnect) {
  goog.net.WebSocket.base(this, "constructor");
  this.autoReconnect_ = goog.isDef(opt_autoReconnect) ? opt_autoReconnect : true;
  this.getNextReconnect_ = opt_getNextReconnect || goog.net.WebSocket.EXPONENTIAL_BACKOFF_;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.inherits(goog.net.WebSocket, goog.events.EventTarget);
goog.net.WebSocket.prototype.webSocket_ = null;
goog.net.WebSocket.prototype.url_ = null;
goog.net.WebSocket.prototype.protocol_ = undefined;
goog.net.WebSocket.prototype.closeExpected_ = false;
goog.net.WebSocket.prototype.reconnectAttempt_ = 0;
goog.net.WebSocket.prototype.logger_ = goog.log.getLogger("goog.net.WebSocket");
goog.net.WebSocket.EventType = {CLOSED:goog.events.getUniqueId("closed"), ERROR:goog.events.getUniqueId("error"), MESSAGE:goog.events.getUniqueId("message"), OPENED:goog.events.getUniqueId("opened")};
goog.net.WebSocket.ReadyState_ = {CONNECTING:0, OPEN:1, CLOSING:2, CLOSED:3};
goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_ = 60 * 1E3;
goog.net.WebSocket.EXPONENTIAL_BACKOFF_ = function(attempt) {
  var time = Math.pow(2, attempt) * 1E3;
  return Math.min(time, goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_);
};
goog.net.WebSocket.protectEntryPoints = function(errorHandler) {
  goog.net.WebSocket.prototype.onOpen_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onError_);
};
goog.net.WebSocket.prototype.open = function(url, opt_protocol) {
  goog.asserts.assert(goog.global["WebSocket"], "This browser does not support WebSocket");
  goog.asserts.assert(!this.isOpen(), "The WebSocket is already open");
  this.clearReconnectTimer_();
  this.url_ = url;
  this.protocol_ = opt_protocol;
  if (this.protocol_) {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_ + " with protocol " + this.protocol_);
    this.webSocket_ = new WebSocket(this.url_, this.protocol_);
  } else {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_);
    this.webSocket_ = new WebSocket(this.url_);
  }
  this.webSocket_.onopen = goog.bind(this.onOpen_, this);
  this.webSocket_.onclose = goog.bind(this.onClose_, this);
  this.webSocket_.onmessage = goog.bind(this.onMessage_, this);
  this.webSocket_.onerror = goog.bind(this.onError_, this);
};
goog.net.WebSocket.prototype.close = function() {
  this.clearReconnectTimer_();
  if (this.webSocket_) {
    goog.log.info(this.logger_, "Closing the WebSocket.");
    this.closeExpected_ = true;
    this.webSocket_.close();
    this.webSocket_ = null;
  }
};
goog.net.WebSocket.prototype.send = function(message) {
  goog.asserts.assert(this.isOpen(), "Cannot send without an open socket");
  this.webSocket_.send(message);
};
goog.net.WebSocket.prototype.isOpen = function() {
  return!!this.webSocket_ && this.webSocket_.readyState == goog.net.WebSocket.ReadyState_.OPEN;
};
goog.net.WebSocket.prototype.onOpen_ = function() {
  goog.log.info(this.logger_, "WebSocket opened on " + this.url_);
  this.dispatchEvent(goog.net.WebSocket.EventType.OPENED);
  this.reconnectAttempt_ = 0;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.net.WebSocket.prototype.onClose_ = function(event) {
  goog.log.info(this.logger_, "The WebSocket on " + this.url_ + " closed.");
  this.dispatchEvent(goog.net.WebSocket.EventType.CLOSED);
  this.webSocket_ = null;
  if (this.closeExpected_) {
    goog.log.info(this.logger_, "The WebSocket closed normally.");
    this.url_ = null;
    this.protocol_ = undefined;
  } else {
    goog.log.error(this.logger_, "The WebSocket disconnected unexpectedly: " + event.data);
    if (this.autoReconnect_) {
      var seconds = Math.floor(this.nextReconnect_ / 1E3);
      goog.log.info(this.logger_, "Seconds until next reconnect attempt: " + seconds);
      this.reconnectTimer_ = goog.Timer.callOnce(goog.bind(this.open, this, this.url_, this.protocol_), this.nextReconnect_, this);
      this.reconnectAttempt_++;
      this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
    }
  }
  this.closeExpected_ = false;
};
goog.net.WebSocket.prototype.onMessage_ = function(event) {
  var message = event.data;
  this.dispatchEvent(new goog.net.WebSocket.MessageEvent(message));
};
goog.net.WebSocket.prototype.onError_ = function(event) {
  var data = (event.data);
  goog.log.error(this.logger_, "An error occurred: " + data);
  this.dispatchEvent(new goog.net.WebSocket.ErrorEvent(data));
};
goog.net.WebSocket.prototype.clearReconnectTimer_ = function() {
  if (goog.isDefAndNotNull(this.reconnectTimer_)) {
    goog.Timer.clear(this.reconnectTimer_);
  }
  this.reconnectTimer_ = null;
};
goog.net.WebSocket.prototype.disposeInternal = function() {
  goog.net.WebSocket.base(this, "disposeInternal");
  this.close();
};
goog.net.WebSocket.MessageEvent = function(message) {
  goog.net.WebSocket.MessageEvent.base(this, "constructor", goog.net.WebSocket.EventType.MESSAGE);
  this.message = message;
};
goog.inherits(goog.net.WebSocket.MessageEvent, goog.events.Event);
goog.net.WebSocket.ErrorEvent = function(data) {
  goog.net.WebSocket.ErrorEvent.base(this, "constructor", goog.net.WebSocket.EventType.ERROR);
  this.data = data;
};
goog.inherits(goog.net.WebSocket.ErrorEvent, goog.events.Event);
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.WebSocket.prototype.onOpen_ = transformer(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = transformer(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = transformer(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = transformer(goog.net.WebSocket.prototype.onError_);
});
goog.provide("clojure.browser.event");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
clojure.browser.event.IEventType = function() {
  var obj20816 = {};
  return obj20816;
}();
clojure.browser.event.event_types = function clojure$browser$event$event_types(this$) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.clojure$browser$event$IEventType$event_types$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.clojure$browser$event$IEventType$event_types$arity$1(this$);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = clojure.browser.event.event_types[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = clojure.browser.event.event_types["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEventType.event-types", this$);
        }
      }
    }().call(null, this$);
  }
};
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$ = true;
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__20817) {
      var vec__20818 = p__20817;
      var k = cljs.core.nth.call(null, vec__20818, 0, null);
      var v = cljs.core.nth.call(null, vec__20818, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
if (typeof Element !== "undefined") {
  Element.prototype.clojure$browser$event$IEventType$ = true;
  Element.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
    var this$__$1 = this;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
      return function(p__20819) {
        var vec__20820 = p__20819;
        var k = cljs.core.nth.call(null, vec__20820, 0, null);
        var v = cljs.core.nth.call(null, vec__20820, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
      };
    }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
  };
} else {
}
clojure.browser.event.listen = function clojure$browser$event$listen() {
  var G__20822 = arguments.length;
  switch(G__20822) {
    case 3:
      return clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.listen.call(null, src, type, fn, false);
};
clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.listen(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.listen.cljs$lang$maxFixedArity = 4;
clojure.browser.event.listen_once = function clojure$browser$event$listen_once() {
  var G__20825 = arguments.length;
  switch(G__20825) {
    case 3:
      return clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.listen_once.call(null, src, type, fn, false);
};
clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.listenOnce(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.listen_once.cljs$lang$maxFixedArity = 4;
clojure.browser.event.unlisten = function clojure$browser$event$unlisten() {
  var G__20828 = arguments.length;
  switch(G__20828) {
    case 3:
      return clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.unlisten.call(null, src, type, fn, false);
};
clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.unlisten(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.unlisten.cljs$lang$maxFixedArity = 4;
clojure.browser.event.unlisten_by_key = function clojure$browser$event$unlisten_by_key(key) {
  return goog.events.unlistenByKey(key);
};
clojure.browser.event.dispatch_event = function clojure$browser$event$dispatch_event(src, event) {
  return goog.events.dispatchEvent(src, event);
};
clojure.browser.event.expose = function clojure$browser$event$expose(e) {
  return goog.events.expose(e);
};
clojure.browser.event.fire_listeners = function clojure$browser$event$fire_listeners(obj, type, capture, event) {
  return null;
};
clojure.browser.event.total_listener_count = function clojure$browser$event$total_listener_count() {
  return goog.events.getTotalListenerCount();
};
clojure.browser.event.get_listener = function clojure$browser$event$get_listener(src, type, listener, opt_capt, opt_handler) {
  return null;
};
clojure.browser.event.all_listeners = function clojure$browser$event$all_listeners(obj, type, capture) {
  return null;
};
clojure.browser.event.unique_event_id = function clojure$browser$event$unique_event_id(event_type) {
  return null;
};
clojure.browser.event.has_listener = function clojure$browser$event$has_listener(obj, opt_type, opt_capture) {
  return null;
};
clojure.browser.event.remove_all = function clojure$browser$event$remove_all(opt_obj, opt_type, opt_capt) {
  return null;
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
cljs.reader.PushbackReader = function() {
  var obj12665 = {};
  return obj12665;
}();
cljs.reader.read_char = function cljs$reader$read_char(reader) {
  if (function() {
    var and__4266__auto__ = reader;
    if (and__4266__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4914__auto__ = reader == null ? null : reader;
    return function() {
      var or__4278__auto__ = cljs.reader.read_char[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.reader.read_char["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function cljs$reader$unread(reader, ch) {
  if (function() {
    var and__4266__auto__ = reader;
    if (and__4266__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4914__auto__ = reader == null ? null : reader;
    return function() {
      var or__4278__auto__ = cljs.reader.unread[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.reader.unread["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4857__auto__, writer__4858__auto__, opt__4859__auto__) {
  return cljs.core._write.call(null, writer__4858__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function cljs$reader$__GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function cljs$reader$push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function cljs$reader$whitespace_QMARK_(ch) {
  var or__4278__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__4278__auto__)) {
    return or__4278__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function cljs$reader$numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function cljs$reader$comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function cljs$reader$number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function cljs$reader$reader_error() {
  var argseq__5318__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5318__auto__);
};
cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic = function(rdr, msg) {
  throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
};
cljs.reader.reader_error.cljs$lang$maxFixedArity = 1;
cljs.reader.reader_error.cljs$lang$applyTo = function(seq12666) {
  var G__12667 = cljs.core.first.call(null, seq12666);
  var seq12666__$1 = cljs.core.next.call(null, seq12666);
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(G__12667, seq12666__$1);
};
cljs.reader.macro_terminating_QMARK_ = function cljs$reader$macro_terminating_QMARK_(ch) {
  var and__4266__auto__ = !(ch === "#");
  if (and__4266__auto__) {
    var and__4266__auto____$1 = !(ch === "'");
    if (and__4266__auto____$1) {
      var and__4266__auto____$2 = !(ch === ":");
      if (and__4266__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__4266__auto____$2;
      }
    } else {
      return and__4266__auto____$1;
    }
  } else {
    return and__4266__auto__;
  }
};
cljs.reader.read_token = function cljs$reader$read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__12668 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__12669 = cljs.reader.read_char.call(null, rdr);
      sb = G__12668;
      ch = G__12669;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function cljs$reader$skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function cljs$reader$re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function cljs$reader$match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function cljs$reader$match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function cljs$reader$match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function cljs$reader$match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function cljs$reader$escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function cljs$reader$read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function cljs$reader$read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function cljs$reader$validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function cljs$reader$make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function cljs$reader$escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function cljs$reader$read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__12670 = cljs.reader.read_char.call(null, rdr);
      ch = G__12670;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function cljs$reader$read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4423__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4423__auto__)) {
        var macrofn = temp__4423__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__12671 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__12671;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__12672 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__12672;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function cljs$reader$not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function cljs$reader$read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4423__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var obj = temp__4423__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function cljs$reader$read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function cljs$reader$read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function cljs$reader$read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function cljs$reader$read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function cljs$reader$read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__4278__auto__ = ch == null;
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__4278__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__12673 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__12674 = cljs.reader.read_char.call(null, reader);
      buffer = G__12673;
      ch = G__12674;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function cljs$reader$read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__12675 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__12676 = cljs.reader.read_char.call(null, reader);
        buffer = G__12675;
        ch = G__12676;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__12677 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__12678 = cljs.reader.read_char.call(null, reader);
          buffer = G__12677;
          ch = G__12678;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function cljs$reader$read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__12683 = function() {
            var G__12681 = buffer;
            G__12681.append(nch);
            return G__12681;
          }();
          var G__12684 = cljs.reader.read_char.call(null, reader);
          buffer = G__12683;
          ch = G__12684;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__12685 = function() {
            var G__12682 = buffer;
            G__12682.append(ch);
            return G__12682;
          }();
          var G__12686 = cljs.reader.read_char.call(null, reader);
          buffer = G__12685;
          ch = G__12686;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function cljs$reader$special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function cljs$reader$read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__4266__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__4266__auto__)) {
      return!(token.length === 1);
    } else {
      return and__4266__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function cljs$reader$read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function cljs$reader$desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function cljs$reader$wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function cljs$reader$throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function cljs$reader$read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__12688 = o;
    if (G__12688) {
      var bit__4952__auto__ = G__12688.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4952__auto__ || G__12688.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__12688.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__12688);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__12688);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function cljs$reader$read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function cljs$reader$read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function cljs$reader$read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function cljs$reader$macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function cljs$reader$dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function cljs$reader$read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__12689 = reader;
        var G__12690 = eof_is_error;
        var G__12691 = sentinel;
        var G__12692 = is_recursive;
        reader = G__12689;
        eof_is_error = G__12690;
        sentinel = G__12691;
        is_recursive = G__12692;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__12693 = cljs.reader.read_comment.call(null, reader, ch);
          var G__12694 = eof_is_error;
          var G__12695 = sentinel;
          var G__12696 = is_recursive;
          reader = G__12693;
          eof_is_error = G__12694;
          sentinel = G__12695;
          is_recursive = G__12696;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__12697 = reader;
            var G__12698 = eof_is_error;
            var G__12699 = sentinel;
            var G__12700 = is_recursive;
            reader = G__12697;
            eof_is_error = G__12698;
            sentinel = G__12699;
            is_recursive = G__12700;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function cljs$reader$read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function cljs$reader$zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__12701 = b.append("0");
          b = G__12701;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function cljs$reader$divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function cljs$reader$indivisible_QMARK_(num, div) {
  return cljs.core.not.call(null, cljs.reader.divisible_QMARK_.call(null, num, div));
};
cljs.reader.leap_year_QMARK_ = function cljs$reader$leap_year_QMARK_(year) {
  var and__4266__auto__ = cljs.reader.divisible_QMARK_.call(null, year, 4);
  if (cljs.core.truth_(and__4266__auto__)) {
    var or__4278__auto__ = cljs.reader.indivisible_QMARK_.call(null, year, 100);
    if (cljs.core.truth_(or__4278__auto__)) {
      return or__4278__auto__;
    } else {
      return cljs.reader.divisible_QMARK_.call(null, year, 400);
    }
  } else {
    return and__4266__auto__;
  }
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function cljs$reader$parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function cljs$reader$check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function cljs$reader$parse_and_validate_timestamp(s) {
  var vec__12703 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__12703, 0, null);
  var years = cljs.core.nth.call(null, vec__12703, 1, null);
  var months = cljs.core.nth.call(null, vec__12703, 2, null);
  var days = cljs.core.nth.call(null, vec__12703, 3, null);
  var hours = cljs.core.nth.call(null, vec__12703, 4, null);
  var minutes = cljs.core.nth.call(null, vec__12703, 5, null);
  var seconds = cljs.core.nth.call(null, vec__12703, 6, null);
  var fraction = cljs.core.nth.call(null, vec__12703, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__12703, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__12703, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__12703, 10, null);
  var v = vec__12703;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__4278__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__4278__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__4278__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__4278__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__4278__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__4278__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__4278__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__4278__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__4278__auto__)) {
        return or__4278__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function cljs$reader$parse_timestamp(ts) {
  var temp__4423__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var vec__12705 = temp__4423__auto__;
    var years = cljs.core.nth.call(null, vec__12705, 0, null);
    var months = cljs.core.nth.call(null, vec__12705, 1, null);
    var days = cljs.core.nth.call(null, vec__12705, 2, null);
    var hours = cljs.core.nth.call(null, vec__12705, 3, null);
    var minutes = cljs.core.nth.call(null, vec__12705, 4, null);
    var seconds = cljs.core.nth.call(null, vec__12705, 5, null);
    var ms = cljs.core.nth.call(null, vec__12705, 6, null);
    var offset = cljs.core.nth.call(null, vec__12705, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function cljs$reader$read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function cljs$reader$read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function cljs$reader$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__12718_12730 = cljs.core.seq.call(null, form);
    var chunk__12719_12731 = null;
    var count__12720_12732 = 0;
    var i__12721_12733 = 0;
    while (true) {
      if (i__12721_12733 < count__12720_12732) {
        var x_12734 = cljs.core._nth.call(null, chunk__12719_12731, i__12721_12733);
        arr.push(x_12734);
        var G__12735 = seq__12718_12730;
        var G__12736 = chunk__12719_12731;
        var G__12737 = count__12720_12732;
        var G__12738 = i__12721_12733 + 1;
        seq__12718_12730 = G__12735;
        chunk__12719_12731 = G__12736;
        count__12720_12732 = G__12737;
        i__12721_12733 = G__12738;
        continue;
      } else {
        var temp__4425__auto___12739 = cljs.core.seq.call(null, seq__12718_12730);
        if (temp__4425__auto___12739) {
          var seq__12718_12740__$1 = temp__4425__auto___12739;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12718_12740__$1)) {
            var c__5063__auto___12741 = cljs.core.chunk_first.call(null, seq__12718_12740__$1);
            var G__12742 = cljs.core.chunk_rest.call(null, seq__12718_12740__$1);
            var G__12743 = c__5063__auto___12741;
            var G__12744 = cljs.core.count.call(null, c__5063__auto___12741);
            var G__12745 = 0;
            seq__12718_12730 = G__12742;
            chunk__12719_12731 = G__12743;
            count__12720_12732 = G__12744;
            i__12721_12733 = G__12745;
            continue;
          } else {
            var x_12746 = cljs.core.first.call(null, seq__12718_12740__$1);
            arr.push(x_12746);
            var G__12747 = cljs.core.next.call(null, seq__12718_12740__$1);
            var G__12748 = null;
            var G__12749 = 0;
            var G__12750 = 0;
            seq__12718_12730 = G__12747;
            chunk__12719_12731 = G__12748;
            count__12720_12732 = G__12749;
            i__12721_12733 = G__12750;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj12723 = {};
        return obj12723;
      }();
      var seq__12724_12751 = cljs.core.seq.call(null, form);
      var chunk__12725_12752 = null;
      var count__12726_12753 = 0;
      var i__12727_12754 = 0;
      while (true) {
        if (i__12727_12754 < count__12726_12753) {
          var vec__12728_12755 = cljs.core._nth.call(null, chunk__12725_12752, i__12727_12754);
          var k_12756 = cljs.core.nth.call(null, vec__12728_12755, 0, null);
          var v_12757 = cljs.core.nth.call(null, vec__12728_12755, 1, null);
          obj[cljs.core.name.call(null, k_12756)] = v_12757;
          var G__12758 = seq__12724_12751;
          var G__12759 = chunk__12725_12752;
          var G__12760 = count__12726_12753;
          var G__12761 = i__12727_12754 + 1;
          seq__12724_12751 = G__12758;
          chunk__12725_12752 = G__12759;
          count__12726_12753 = G__12760;
          i__12727_12754 = G__12761;
          continue;
        } else {
          var temp__4425__auto___12762 = cljs.core.seq.call(null, seq__12724_12751);
          if (temp__4425__auto___12762) {
            var seq__12724_12763__$1 = temp__4425__auto___12762;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12724_12763__$1)) {
              var c__5063__auto___12764 = cljs.core.chunk_first.call(null, seq__12724_12763__$1);
              var G__12765 = cljs.core.chunk_rest.call(null, seq__12724_12763__$1);
              var G__12766 = c__5063__auto___12764;
              var G__12767 = cljs.core.count.call(null, c__5063__auto___12764);
              var G__12768 = 0;
              seq__12724_12751 = G__12765;
              chunk__12725_12752 = G__12766;
              count__12726_12753 = G__12767;
              i__12727_12754 = G__12768;
              continue;
            } else {
              var vec__12729_12769 = cljs.core.first.call(null, seq__12724_12763__$1);
              var k_12770 = cljs.core.nth.call(null, vec__12729_12769, 0, null);
              var v_12771 = cljs.core.nth.call(null, vec__12729_12769, 1, null);
              obj[cljs.core.name.call(null, k_12770)] = v_12771;
              var G__12772 = cljs.core.next.call(null, seq__12724_12763__$1);
              var G__12773 = null;
              var G__12774 = 0;
              var G__12775 = 0;
              seq__12724_12751 = G__12772;
              chunk__12725_12752 = G__12773;
              count__12726_12753 = G__12774;
              i__12727_12754 = G__12775;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function cljs$reader$read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function cljs$reader$maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function cljs$reader$register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function cljs$reader$deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function cljs$reader$register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function cljs$reader$deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("cljs.repl");
goog.require("cljs.core");
cljs.repl.print_doc = function cljs$repl$print_doc(m) {
  cljs.core.println.call(null, "-------------------------");
  cljs.core.println.call(null, [cljs.core.str(function() {
    var temp__4425__auto__ = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var ns = temp__4425__auto__;
      return[cljs.core.str(ns), cljs.core.str("/")].join("");
    } else {
      return null;
    }
  }()), cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
  if (cljs.core.truth_((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(m))) {
    cljs.core.println.call(null, "Protocol");
  } else {
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(m))) {
    var seq__20844_20856 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(m));
    var chunk__20845_20857 = null;
    var count__20846_20858 = 0;
    var i__20847_20859 = 0;
    while (true) {
      if (i__20847_20859 < count__20846_20858) {
        var f_20860 = cljs.core._nth.call(null, chunk__20845_20857, i__20847_20859);
        cljs.core.println.call(null, "  ", f_20860);
        var G__20861 = seq__20844_20856;
        var G__20862 = chunk__20845_20857;
        var G__20863 = count__20846_20858;
        var G__20864 = i__20847_20859 + 1;
        seq__20844_20856 = G__20861;
        chunk__20845_20857 = G__20862;
        count__20846_20858 = G__20863;
        i__20847_20859 = G__20864;
        continue;
      } else {
        var temp__4425__auto___20865 = cljs.core.seq.call(null, seq__20844_20856);
        if (temp__4425__auto___20865) {
          var seq__20844_20866__$1 = temp__4425__auto___20865;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__20844_20866__$1)) {
            var c__5063__auto___20867 = cljs.core.chunk_first.call(null, seq__20844_20866__$1);
            var G__20868 = cljs.core.chunk_rest.call(null, seq__20844_20866__$1);
            var G__20869 = c__5063__auto___20867;
            var G__20870 = cljs.core.count.call(null, c__5063__auto___20867);
            var G__20871 = 0;
            seq__20844_20856 = G__20868;
            chunk__20845_20857 = G__20869;
            count__20846_20858 = G__20870;
            i__20847_20859 = G__20871;
            continue;
          } else {
            var f_20872 = cljs.core.first.call(null, seq__20844_20866__$1);
            cljs.core.println.call(null, "  ", f_20872);
            var G__20873 = cljs.core.next.call(null, seq__20844_20866__$1);
            var G__20874 = null;
            var G__20875 = 0;
            var G__20876 = 0;
            seq__20844_20856 = G__20873;
            chunk__20845_20857 = G__20874;
            count__20846_20858 = G__20875;
            i__20847_20859 = G__20876;
            continue;
          }
        } else {
        }
      }
      break;
    }
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(m))) {
      if (cljs.core.truth_(function() {
        var or__4278__auto__ = (new cljs.core.Keyword(null, "macro", "macro", -867863404)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__4278__auto__)) {
          return or__4278__auto__;
        } else {
          return(new cljs.core.Keyword(null, "repl-special-function", "repl-special-function", 1262603725)).cljs$core$IFn$_invoke$arity$1(m);
        }
      }())) {
        cljs.core.prn.call(null, (new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(m));
      } else {
        cljs.core.prn.call(null, cljs.core.second.call(null, (new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(m)));
      }
    } else {
    }
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "special-form", "special-form", -1326536374)).cljs$core$IFn$_invoke$arity$1(m))) {
    cljs.core.println.call(null, "Special Form");
    cljs.core.println.call(null, " ", (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(m));
    if (cljs.core.contains_QMARK_.call(null, m, new cljs.core.Keyword(null, "url", "url", 276297046))) {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(m))) {
        return cljs.core.println.call(null, [cljs.core.str("\n  Please see http://clojure.org/"), cljs.core.str((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
      } else {
        return null;
      }
    } else {
      return cljs.core.println.call(null, [cljs.core.str("\n  Please see http://clojure.org/special_forms#"), cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
    }
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "macro", "macro", -867863404)).cljs$core$IFn$_invoke$arity$1(m))) {
      cljs.core.println.call(null, "Macro");
    } else {
    }
    if (cljs.core.truth_((new cljs.core.Keyword(null, "repl-special-function", "repl-special-function", 1262603725)).cljs$core$IFn$_invoke$arity$1(m))) {
      cljs.core.println.call(null, "REPL Special Function");
    } else {
    }
    cljs.core.println.call(null, " ", (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(m));
    if (cljs.core.truth_((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(m))) {
      var seq__20848 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(m));
      var chunk__20849 = null;
      var count__20850 = 0;
      var i__20851 = 0;
      while (true) {
        if (i__20851 < count__20850) {
          var vec__20852 = cljs.core._nth.call(null, chunk__20849, i__20851);
          var name = cljs.core.nth.call(null, vec__20852, 0, null);
          var map__20853 = cljs.core.nth.call(null, vec__20852, 1, null);
          var map__20853__$1 = cljs.core.seq_QMARK_.call(null, map__20853) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20853) : map__20853;
          var doc = cljs.core.get.call(null, map__20853__$1, new cljs.core.Keyword(null, "doc", "doc", 1913296891));
          var arglists = cljs.core.get.call(null, map__20853__$1, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754));
          cljs.core.println.call(null);
          cljs.core.println.call(null, " ", name);
          cljs.core.println.call(null, " ", arglists);
          if (cljs.core.truth_(doc)) {
            cljs.core.println.call(null, " ", doc);
          } else {
          }
          var G__20877 = seq__20848;
          var G__20878 = chunk__20849;
          var G__20879 = count__20850;
          var G__20880 = i__20851 + 1;
          seq__20848 = G__20877;
          chunk__20849 = G__20878;
          count__20850 = G__20879;
          i__20851 = G__20880;
          continue;
        } else {
          var temp__4425__auto__ = cljs.core.seq.call(null, seq__20848);
          if (temp__4425__auto__) {
            var seq__20848__$1 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__20848__$1)) {
              var c__5063__auto__ = cljs.core.chunk_first.call(null, seq__20848__$1);
              var G__20881 = cljs.core.chunk_rest.call(null, seq__20848__$1);
              var G__20882 = c__5063__auto__;
              var G__20883 = cljs.core.count.call(null, c__5063__auto__);
              var G__20884 = 0;
              seq__20848 = G__20881;
              chunk__20849 = G__20882;
              count__20850 = G__20883;
              i__20851 = G__20884;
              continue;
            } else {
              var vec__20854 = cljs.core.first.call(null, seq__20848__$1);
              var name = cljs.core.nth.call(null, vec__20854, 0, null);
              var map__20855 = cljs.core.nth.call(null, vec__20854, 1, null);
              var map__20855__$1 = cljs.core.seq_QMARK_.call(null, map__20855) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20855) : map__20855;
              var doc = cljs.core.get.call(null, map__20855__$1, new cljs.core.Keyword(null, "doc", "doc", 1913296891));
              var arglists = cljs.core.get.call(null, map__20855__$1, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754));
              cljs.core.println.call(null);
              cljs.core.println.call(null, " ", name);
              cljs.core.println.call(null, " ", arglists);
              if (cljs.core.truth_(doc)) {
                cljs.core.println.call(null, " ", doc);
              } else {
              }
              var G__20885 = cljs.core.next.call(null, seq__20848__$1);
              var G__20886 = null;
              var G__20887 = 0;
              var G__20888 = 0;
              seq__20848 = G__20885;
              chunk__20849 = G__20886;
              count__20850 = G__20887;
              i__20851 = G__20888;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    } else {
      return null;
    }
  }
};
goog.provide("clojure.browser.net");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("goog.net.WebSocket");
goog.require("goog.net.EventType");
goog.require("goog.json");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.XhrIo");
goog.require("clojure.browser.event");
goog.require("goog.net.xpc.CrossPageChannel");
clojure.browser.net._STAR_timeout_STAR_ = 1E4;
clojure.browser.net.event_types = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__20891) {
  var vec__20892 = p__20891;
  var k = cljs.core.nth.call(null, vec__20892, 0, null);
  var v = cljs.core.nth.call(null, vec__20892, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
clojure.browser.net.IConnection = function() {
  var obj20894 = {};
  return obj20894;
}();
clojure.browser.net.connect = function clojure$browser$net$connect() {
  var G__20896 = arguments.length;
  switch(G__20896) {
    case 1:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.clojure$browser$net$IConnection$connect$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$connect$arity$1(this$);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = clojure.browser.net.connect[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = clojure.browser.net.connect["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
        }
      }
    }().call(null, this$);
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$2 = function(this$, opt1) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.clojure$browser$net$IConnection$connect$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$connect$arity$2(this$, opt1);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = clojure.browser.net.connect[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = clojure.browser.net.connect["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
        }
      }
    }().call(null, this$, opt1);
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$3 = function(this$, opt1, opt2) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.clojure$browser$net$IConnection$connect$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$connect$arity$3(this$, opt1, opt2);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = clojure.browser.net.connect[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = clojure.browser.net.connect["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
        }
      }
    }().call(null, this$, opt1, opt2);
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$4 = function(this$, opt1, opt2, opt3) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.clojure$browser$net$IConnection$connect$arity$4;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$connect$arity$4(this$, opt1, opt2, opt3);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = clojure.browser.net.connect[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = clojure.browser.net.connect["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
        }
      }
    }().call(null, this$, opt1, opt2, opt3);
  }
};
clojure.browser.net.connect.cljs$lang$maxFixedArity = 4;
clojure.browser.net.transmit = function clojure$browser$net$transmit() {
  var G__20898 = arguments.length;
  switch(G__20898) {
    case 2:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$2 = function(this$, opt) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.clojure$browser$net$IConnection$transmit$arity$2;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$transmit$arity$2(this$, opt);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = clojure.browser.net.transmit["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
        }
      }
    }().call(null, this$, opt);
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$3 = function(this$, opt, opt2) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.clojure$browser$net$IConnection$transmit$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$transmit$arity$3(this$, opt, opt2);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = clojure.browser.net.transmit["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
        }
      }
    }().call(null, this$, opt, opt2);
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$4 = function(this$, opt, opt2, opt3) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.clojure$browser$net$IConnection$transmit$arity$4;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$transmit$arity$4(this$, opt, opt2, opt3);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = clojure.browser.net.transmit["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
        }
      }
    }().call(null, this$, opt, opt2, opt3);
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$5 = function(this$, opt, opt2, opt3, opt4) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.clojure$browser$net$IConnection$transmit$arity$5;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$transmit$arity$5(this$, opt, opt2, opt3, opt4);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = clojure.browser.net.transmit["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
        }
      }
    }().call(null, this$, opt, opt2, opt3, opt4);
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$6 = function(this$, opt, opt2, opt3, opt4, opt5) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.clojure$browser$net$IConnection$transmit$arity$6;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$transmit$arity$6(this$, opt, opt2, opt3, opt4, opt5);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = clojure.browser.net.transmit[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = clojure.browser.net.transmit["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
        }
      }
    }().call(null, this$, opt, opt2, opt3, opt4, opt5);
  }
};
clojure.browser.net.transmit.cljs$lang$maxFixedArity = 6;
clojure.browser.net.close = function clojure$browser$net$close(this$) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.clojure$browser$net$IConnection$close$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IConnection$close$arity$1(this$);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = clojure.browser.net.close[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = clojure.browser.net.close["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IConnection.close", this$);
        }
      }
    }().call(null, this$);
  }
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$ = true;
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, uri) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, "GET", null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, uri, method) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$4 = function(this$, uri, method, content) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$5 = function(this$, uri, method, content, headers) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, headers, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$6 = function(this$, uri, method, content, headers, timeout) {
  var this$__$1 = this;
  this$__$1.setTimeoutInterval(timeout);
  return this$__$1.send(uri, method, content, headers);
};
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$ = true;
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__20901) {
      var vec__20902 = p__20901;
      var k = cljs.core.nth.call(null, vec__20902, 0, null);
      var v = cljs.core.nth.call(null, vec__20902, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
};
clojure.browser.net.xpc_config_fields = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__20903) {
  var vec__20904 = p__20903;
  var k = cljs.core.nth.call(null, vec__20904, 0, null);
  var v = cljs.core.nth.call(null, vec__20904, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.js__GT_clj.call(null, goog.net.xpc.CfgFields)));
clojure.browser.net.xhr_connection = function clojure$browser$net$xhr_connection() {
  return new goog.net.XhrIo;
};
clojure.browser.net.ICrossPageChannel = function() {
  var obj20906 = {};
  return obj20906;
}();
clojure.browser.net.register_service = function clojure$browser$net$register_service() {
  var G__20908 = arguments.length;
  switch(G__20908) {
    case 3:
      return clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$3 = function(this$, service_name, fn) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3(this$, service_name, fn);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = clojure.browser.net.register_service[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = clojure.browser.net.register_service["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
        }
      }
    }().call(null, this$, service_name, fn);
  }
};
clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4(this$, service_name, fn, encode_json_QMARK_);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = clojure.browser.net.register_service[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = clojure.browser.net.register_service["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
        }
      }
    }().call(null, this$, service_name, fn, encode_json_QMARK_);
  }
};
clojure.browser.net.register_service.cljs$lang$maxFixedArity = 4;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$3 = function(this$, service_name, fn) {
  var this$__$1 = this;
  return clojure.browser.net.register_service.call(null, this$__$1, service_name, fn, false);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  var this$__$1 = this;
  return this$__$1.registerService(cljs.core.name.call(null, service_name), fn, encode_json_QMARK_);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$1 = function(this$) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, null);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, on_connect_fn) {
  var this$__$1 = this;
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, on_connect_fn, config_iframe_fn) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, on_connect_fn, config_iframe_fn, document.body);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$4 = function(this$, on_connect_fn, config_iframe_fn, iframe_parent) {
  var this$__$1 = this;
  this$__$1.createPeerIframe(iframe_parent, config_iframe_fn);
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, service_name, payload) {
  var this$__$1 = this;
  return this$__$1.send(cljs.core.name.call(null, service_name), payload);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close();
};
clojure.browser.net.xpc_connection = function clojure$browser$net$xpc_connection() {
  var G__20911 = arguments.length;
  switch(G__20911) {
    case 0:
      return clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$0 = function() {
  var temp__4425__auto__ = (new goog.Uri(window.location.href)).getParameterValue("xpc");
  if (cljs.core.truth_(temp__4425__auto__)) {
    var config = temp__4425__auto__;
    return new goog.net.xpc.CrossPageChannel(goog.json.parse(config));
  } else {
    return null;
  }
};
clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$1 = function(config) {
  return new goog.net.xpc.CrossPageChannel(cljs.core.reduce.call(null, function(sum, p__20912) {
    var vec__20913 = p__20912;
    var k = cljs.core.nth.call(null, vec__20913, 0, null);
    var v = cljs.core.nth.call(null, vec__20913, 1, null);
    var temp__4423__auto__ = cljs.core.get.call(null, clojure.browser.net.xpc_config_fields, k);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var field = temp__4423__auto__;
      var G__20914 = sum;
      G__20914[field] = v;
      return G__20914;
    } else {
      return sum;
    }
  }, function() {
    var obj20916 = {};
    return obj20916;
  }(), config));
};
clojure.browser.net.xpc_connection.cljs$lang$maxFixedArity = 1;
clojure.browser.net.IWebSocket = function() {
  var obj20919 = {};
  return obj20919;
}();
clojure.browser.net.open_QMARK_ = function clojure$browser$net$open_QMARK_(this$) {
  if (function() {
    var and__4266__auto__ = this$;
    if (and__4266__auto__) {
      return this$.clojure$browser$net$IWebSocket$open_QMARK_$arity$1;
    } else {
      return and__4266__auto__;
    }
  }()) {
    return this$.clojure$browser$net$IWebSocket$open_QMARK_$arity$1(this$);
  } else {
    var x__4914__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4278__auto__ = clojure.browser.net.open_QMARK_[goog.typeOf(x__4914__auto__)];
      if (or__4278__auto__) {
        return or__4278__auto__;
      } else {
        var or__4278__auto____$1 = clojure.browser.net.open_QMARK_["_"];
        if (or__4278__auto____$1) {
          return or__4278__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWebSocket.open?", this$);
        }
      }
    }().call(null, this$);
  }
};
goog.net.WebSocket.prototype.clojure$browser$net$IWebSocket$ = true;
goog.net.WebSocket.prototype.clojure$browser$net$IWebSocket$open_QMARK_$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.isOpen(cljs.core.List.EMPTY);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$ = true;
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, url) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, url, null);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, url, protocol) {
  var this$__$1 = this;
  return this$__$1.open(url, protocol);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, message) {
  var this$__$1 = this;
  return this$__$1.send(message);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close(cljs.core.List.EMPTY);
};
goog.net.WebSocket.prototype.clojure$browser$event$IEventType$ = true;
goog.net.WebSocket.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__20920) {
      var vec__20921 = p__20920;
      var k = cljs.core.nth.call(null, vec__20921, 0, null);
      var v = cljs.core.nth.call(null, vec__20921, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.WebSocket.EventType))));
};
clojure.browser.net.websocket_connection = function clojure$browser$net$websocket_connection() {
  var G__20923 = arguments.length;
  switch(G__20923) {
    case 0:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$0 = function() {
  return clojure.browser.net.websocket_connection.call(null, null, null);
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$1 = function(auto_reconnect_QMARK_) {
  return clojure.browser.net.websocket_connection.call(null, auto_reconnect_QMARK_, null);
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$2 = function(auto_reconnect_QMARK_, next_reconnect_fn) {
  return new goog.net.WebSocket(auto_reconnect_QMARK_, next_reconnect_fn);
};
clojure.browser.net.websocket_connection.cljs$lang$maxFixedArity = 2;
goog.provide("clojure.browser.repl");
goog.require("cljs.core");
goog.require("goog.dom");
goog.require("goog.labs.userAgent.browser");
goog.require("clojure.browser.net");
goog.require("clojure.browser.event");
goog.require("cljs.repl");
clojure.browser.repl.xpc_connection = cljs.core.atom.call(null, null);
clojure.browser.repl.repl_print = function clojure$browser$repl$repl_print(data) {
  var temp__4423__auto__ = cljs.core.deref.call(null, clojure.browser.repl.xpc_connection);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var conn = temp__4423__auto__;
    return clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1299562414), cljs.core.pr_str.call(null, data));
  } else {
    return null;
  }
};
clojure.browser.repl.get_ua_product = function clojure$browser$repl$get_ua_product() {
  if (cljs.core.truth_(goog.labs.userAgent.browser.isSafari())) {
    return new cljs.core.Keyword(null, "safari", "safari", 497115653);
  } else {
    if (cljs.core.truth_(goog.labs.userAgent.browser.isChrome())) {
      return new cljs.core.Keyword(null, "chrome", "chrome", 1718738387);
    } else {
      if (cljs.core.truth_(goog.labs.userAgent.browser.isFirefox())) {
        return new cljs.core.Keyword(null, "firefox", "firefox", 1283768880);
      } else {
        if (cljs.core.truth_(goog.labs.userAgent.browser.isIE())) {
          return new cljs.core.Keyword(null, "ie", "ie", 2038473780);
        } else {
          return null;
        }
      }
    }
  }
};
clojure.browser.repl.evaluate_javascript = function clojure$browser$repl$evaluate_javascript(conn, block) {
  var result = function() {
    try {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "value", "value", 305978217), [cljs.core.str(eval(block))].join("")], null);
    } catch (e20802) {
      var e = e20802;
      return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "ua-product", "ua-product", 938384227), clojure.browser.repl.get_ua_product.call(null), new cljs.core.Keyword(null, "value", "value", 305978217), [cljs.core.str(e)].join(""), new cljs.core.Keyword(null, "stacktrace", "stacktrace", -95588394), cljs.core.truth_(e.hasOwnProperty("stack")) ? 
      e.stack : "No stacktrace available."], null);
    }
  }();
  return cljs.core.pr_str.call(null, result);
};
clojure.browser.repl.send_result = function clojure$browser$repl$send_result(connection, url, data) {
  return clojure.browser.net.transmit.call(null, connection, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print = function clojure$browser$repl$send_print() {
  var G__20804 = arguments.length;
  switch(G__20804) {
    case 2:
      return clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$2 = function(url, data) {
  return clojure.browser.repl.send_print.call(null, url, data, 0);
};
clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$3 = function(url, data, n) {
  var conn = clojure.browser.net.xhr_connection.call(null);
  clojure.browser.event.listen.call(null, conn, new cljs.core.Keyword(null, "error", "error", -978969032), function(conn) {
    return function(_) {
      if (n < 10) {
        return clojure.browser.repl.send_print.call(null, url, data, n + 1);
      } else {
        return console.log([cljs.core.str("Could not send "), cljs.core.str(data), cljs.core.str(" after "), cljs.core.str(n), cljs.core.str(" attempts.")].join(""));
      }
    };
  }(conn));
  return clojure.browser.net.transmit.call(null, conn, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print.cljs$lang$maxFixedArity = 3;
clojure.browser.repl.order = cljs.core.atom.call(null, 0);
clojure.browser.repl.wrap_message = function clojure$browser$repl$wrap_message(t, data) {
  return cljs.core.pr_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), t, new cljs.core.Keyword(null, "content", "content", 15833224), data, new cljs.core.Keyword(null, "order", "order", -1254677256), cljs.core.swap_BANG_.call(null, clojure.browser.repl.order, cljs.core.inc)], null));
};
clojure.browser.repl.start_evaluator = function clojure$browser$repl$start_evaluator(url) {
  var temp__4423__auto__ = clojure.browser.net.xpc_connection.call(null);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var repl_connection = temp__4423__auto__;
    var connection = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, connection, new cljs.core.Keyword(null, "success", "success", 1890645906), function(connection, repl_connection, temp__4423__auto__) {
      return function(e) {
        return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", -315749780), e.currentTarget.getResponseText(cljs.core.List.EMPTY));
      };
    }(connection, repl_connection, temp__4423__auto__));
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 35388249), function(connection, repl_connection, temp__4423__auto__) {
      return function(data) {
        return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "result", "result", 1415092211), data));
      };
    }(connection, repl_connection, temp__4423__auto__));
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "print", "print", 1299562414), function(connection, repl_connection, temp__4423__auto__) {
      return function(data) {
        return clojure.browser.repl.send_print.call(null, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "print", "print", 1299562414), data));
      };
    }(connection, repl_connection, temp__4423__auto__));
    clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null));
    return setTimeout(function(connection, repl_connection, temp__4423__auto__) {
      return function() {
        return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "ready", "ready", 1086465795), "ready"));
      };
    }(connection, repl_connection, temp__4423__auto__), 50);
  } else {
    return alert("No 'xpc' param provided to child iframe.");
  }
};
clojure.browser.repl.load_queue = null;
clojure.browser.repl.bootstrap = function clojure$browser$repl$bootstrap() {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    goog.require__ = goog.require;
    goog.isProvided_ = function(name) {
      return false;
    };
    goog.writeScriptTag__ = function(src, opt_sourceText) {
      var loaded = cljs.core.atom.call(null, false);
      var onload = function(loaded) {
        return function() {
          if (cljs.core.truth_(function() {
            var and__4266__auto__ = clojure.browser.repl.load_queue;
            if (cljs.core.truth_(and__4266__auto__)) {
              return cljs.core.deref.call(null, loaded) === false;
            } else {
              return and__4266__auto__;
            }
          }())) {
            cljs.core.swap_BANG_.call(null, loaded, cljs.core.not);
            if (clojure.browser.repl.load_queue.length === 0) {
              return clojure.browser.repl.load_queue = null;
            } else {
              return goog.writeScriptTag__.apply(null, clojure.browser.repl.load_queue.shift());
            }
          } else {
            return null;
          }
        };
      }(loaded);
      return document.body.appendChild(function() {
        var script = document.createElement("script");
        var script__$1 = function() {
          var G__20809 = script;
          G__20809["type"] = "text/javascript";
          G__20809["onload"] = onload;
          G__20809["onreadystatechange"] = onload;
          return G__20809;
        }();
        var script__$2 = opt_sourceText == null ? function() {
          var G__20810 = script__$1;
          G__20810["src"] = src;
          return G__20810;
        }() : function() {
          var G__20811 = script__$1;
          goog.dom.setTextContext(G__20811, opt_sourceText);
          return G__20811;
        }();
        return script__$2;
      }());
    };
    goog.writeScriptTag_ = function(src, opt_sourceText) {
      if (cljs.core.truth_(clojure.browser.repl.load_queue)) {
        return clojure.browser.repl.load_queue.push([src, opt_sourceText]);
      } else {
        clojure.browser.repl.load_queue = [];
        return goog.writeScriptTag__(src, opt_sourceText);
      }
    };
    return goog.require = function(src, reload) {
      if (cljs.core._EQ_.call(null, reload, "reload-all")) {
        goog.cljsReloadAll_ = true;
      } else {
      }
      var reload_QMARK_ = function() {
        var or__4278__auto__ = reload;
        if (cljs.core.truth_(or__4278__auto__)) {
          return or__4278__auto__;
        } else {
          return goog.cljsReloadAll__;
        }
      }();
      if (cljs.core.truth_(reload_QMARK_)) {
        var path_20812 = goog.dependencies_.nameToPath[src];
        delete goog.dependencies_.visited[path_20812];
        delete goog.dependencies_.written[[cljs.core.str(goog.basePath), cljs.core.str(path_20812)].join("")];
      } else {
      }
      var ret = goog.require__(src);
      if (cljs.core._EQ_.call(null, reload, "reload-all")) {
        goog.cljsReloadAll_ = false;
      } else {
      }
      return ret;
    };
  }
};
clojure.browser.repl.connect = function clojure$browser$repl$connect(repl_server_url) {
  var repl_connection = clojure.browser.net.xpc_connection.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "peer_uri", "peer_uri", 910305997), repl_server_url], null));
  cljs.core.swap_BANG_.call(null, clojure.browser.repl.xpc_connection, cljs.core.constantly.call(null, repl_connection));
  clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", -315749780), function(repl_connection) {
    return function(js) {
      return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 35388249), clojure.browser.repl.evaluate_javascript.call(null, repl_connection, js));
    };
  }(repl_connection));
  clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null), function(repl_connection) {
    return function(iframe) {
      return iframe.style.display = "none";
    };
  }(repl_connection));
  clojure.browser.repl.bootstrap.call(null);
  return repl_connection;
};
goog.provide("yinch.repl");
goog.require("cljs.core");
goog.require("clojure.browser.repl");
goog.require("cemerick.url");
cljs.core.enable_console_print_BANG_.call(null);
yinch.repl.connect = function yinch$repl$connect() {
  return clojure.browser.repl.connect.call(null, "http://localhost:9000/repl");
};
goog.exportSymbol("yinch.repl.connect", yinch.repl.connect);
goog.provide("yinch.core");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("yinch.game");
goog.require("yinch.canvas_interface");
goog.require("cemerick.url");
goog.require("cljs.reader");
goog.require("yinch.utils");
yinch.core.start = function yinch$core$start() {
  var G__11707 = arguments.length;
  switch(G__11707) {
    case 0:
      return yinch.core.start.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return yinch.core.start.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
goog.exportSymbol("yinch.core.start", yinch.core.start);
yinch.core.start.cljs$core$IFn$_invoke$arity$0 = function() {
  var init_hash = document["location"]["hash"];
  if (cljs.core.empty_QMARK_.call(null, init_hash)) {
    return yinch.core.start.call(null, yinch.game.new_game.call(null));
  } else {
    return yinch.core.start.call(null, cljs.reader.read_string.call(null, cemerick.url.url_decode.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.rest.call(null, init_hash)))));
  }
};
yinch.core.start.cljs$core$IFn$_invoke$arity$1 = function(game) {
  var vec__11708 = yinch.canvas_interface.start_rendering_BANG_.call(null, new cljs.core.Keyword(null, "#primaryCanvas", "#primaryCanvas", 1664716416));
  var state_chan = cljs.core.nth.call(null, vec__11708, 0, null);
  var status_chan = cljs.core.nth.call(null, vec__11708, 1, null);
  var interaction_chan = cljs.core.nth.call(null, vec__11708, 2, null);
  cljs.core.async.put_BANG_.call(null, state_chan, game);
  var c__8284__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__8284__auto__, vec__11708, state_chan, status_chan, interaction_chan) {
    return function() {
      var f__8285__auto__ = function() {
        var switch__8222__auto__ = function(c__8284__auto__, vec__11708, state_chan, status_chan, interaction_chan) {
          return function(state_11726) {
            var state_val_11727 = state_11726[1];
            if (state_val_11727 === 1) {
              var state_11726__$1 = state_11726;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11726__$1, 2, interaction_chan);
            } else {
              if (state_val_11727 === 2) {
                var inst_11710 = state_11726[2];
                var inst_11711 = inst_11710;
                var inst_11712 = game;
                var state_11726__$1 = function() {
                  var statearr_11728 = state_11726;
                  statearr_11728[7] = inst_11711;
                  statearr_11728[8] = inst_11712;
                  return statearr_11728;
                }();
                var statearr_11729_11741 = state_11726__$1;
                statearr_11729_11741[2] = null;
                statearr_11729_11741[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11727 === 3) {
                  var inst_11711 = state_11726[7];
                  var inst_11712 = state_11726[8];
                  var inst_11717 = state_11726[9];
                  var inst_11715 = yinch.game.intrepret_move.call(null, inst_11712, inst_11711);
                  var inst_11716 = cljs.core.nth.call(null, inst_11715, 0, null);
                  var inst_11717__$1 = cljs.core.nth.call(null, inst_11715, 1, null);
                  var inst_11718 = cljs.core.async.put_BANG_.call(null, state_chan, inst_11717__$1);
                  var inst_11719 = cljs.core.async.put_BANG_.call(null, status_chan, inst_11716);
                  var state_11726__$1 = function() {
                    var statearr_11730 = state_11726;
                    statearr_11730[10] = inst_11718;
                    statearr_11730[11] = inst_11719;
                    statearr_11730[9] = inst_11717__$1;
                    return statearr_11730;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11726__$1, 5, interaction_chan);
                } else {
                  if (state_val_11727 === 4) {
                    var inst_11724 = state_11726[2];
                    var state_11726__$1 = state_11726;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11726__$1, inst_11724);
                  } else {
                    if (state_val_11727 === 5) {
                      var inst_11717 = state_11726[9];
                      var inst_11721 = state_11726[2];
                      var inst_11711 = inst_11721;
                      var inst_11712 = inst_11717;
                      var state_11726__$1 = function() {
                        var statearr_11731 = state_11726;
                        statearr_11731[7] = inst_11711;
                        statearr_11731[8] = inst_11712;
                        return statearr_11731;
                      }();
                      var statearr_11732_11742 = state_11726__$1;
                      statearr_11732_11742[2] = null;
                      statearr_11732_11742[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__8284__auto__, vec__11708, state_chan, status_chan, interaction_chan);
        return function(switch__8222__auto__, c__8284__auto__, vec__11708, state_chan, status_chan, interaction_chan) {
          return function() {
            var yinch$core$state_machine__8223__auto__ = null;
            var yinch$core$state_machine__8223__auto____0 = function() {
              var statearr_11736 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11736[0] = yinch$core$state_machine__8223__auto__;
              statearr_11736[1] = 1;
              return statearr_11736;
            };
            var yinch$core$state_machine__8223__auto____1 = function(state_11726) {
              while (true) {
                var ret_value__8224__auto__ = function() {
                  try {
                    while (true) {
                      var result__8225__auto__ = switch__8222__auto__.call(null, state_11726);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__8225__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__8225__auto__;
                      }
                      break;
                    }
                  } catch (e11737) {
                    if (e11737 instanceof Object) {
                      var ex__8226__auto__ = e11737;
                      var statearr_11738_11743 = state_11726;
                      statearr_11738_11743[5] = ex__8226__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11726);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11737;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__8224__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11744 = state_11726;
                  state_11726 = G__11744;
                  continue;
                } else {
                  return ret_value__8224__auto__;
                }
                break;
              }
            };
            yinch$core$state_machine__8223__auto__ = function(state_11726) {
              switch(arguments.length) {
                case 0:
                  return yinch$core$state_machine__8223__auto____0.call(this);
                case 1:
                  return yinch$core$state_machine__8223__auto____1.call(this, state_11726);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            yinch$core$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$0 = yinch$core$state_machine__8223__auto____0;
            yinch$core$state_machine__8223__auto__.cljs$core$IFn$_invoke$arity$1 = yinch$core$state_machine__8223__auto____1;
            return yinch$core$state_machine__8223__auto__;
          }();
        }(switch__8222__auto__, c__8284__auto__, vec__11708, state_chan, status_chan, interaction_chan);
      }();
      var state__8286__auto__ = function() {
        var statearr_11739 = f__8285__auto__.call(null);
        statearr_11739[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__8284__auto__;
        return statearr_11739;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__8286__auto__);
    };
  }(c__8284__auto__, vec__11708, state_chan, status_chan, interaction_chan));
  return c__8284__auto__;
};
yinch.core.start.cljs$lang$maxFixedArity = 1;

//# sourceMappingURL=main.map.js